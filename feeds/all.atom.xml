<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Bala Juluri's Blog</title><link href="plasmon360.github.io/" rel="alternate"></link><link href="plasmon360.github.io/feeds/all.atom.xml" rel="self"></link><id>plasmon360.github.io/</id><updated>2018-06-20T10:50:00-07:00</updated><subtitle>Ramblings</subtitle><entry><title>Calculating molarity, weight concentration from absorbance value for plasmonic nanoparticles in solution</title><link href="plasmon360.github.io/calculating-molarity-weight-concentration-from-absorbance-value-for-plasmonic-nanoparticles-in-solution.html" rel="alternate"></link><published>2018-06-20T10:50:00-07:00</published><updated>2018-06-20T10:50:00-07:00</updated><author><name>juluribk</name></author><id>tag:None,2018-06-20:plasmon360.github.io/calculating-molarity-weight-concentration-from-absorbance-value-for-plasmonic-nanoparticles-in-solution.html</id><summary type="html">&lt;p&gt;It is common to measure the peak absorbance of the plasmonic nanoparticles in solution and then get the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Molarity (moles/liter)&lt;/li&gt;
&lt;li&gt;Number of particles per ml&lt;/li&gt;
&lt;li&gt;Weight concentration (ug/ml)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I wrote a small python function to extract these parameters.  The following inputs are needed for the function&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;d_nm …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;It is common to measure the peak absorbance of the plasmonic nanoparticles in solution and then get the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Molarity (moles/liter)&lt;/li&gt;
&lt;li&gt;Number of particles per ml&lt;/li&gt;
&lt;li&gt;Weight concentration (ug/ml)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I wrote a small python function to extract these parameters.  The following inputs are needed for the function&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;d_nm :   diameter of the particle in nanoparticle&lt;/li&gt;
&lt;li&gt;od :  peak OD measured from the absorbance plot&lt;/li&gt;
&lt;li&gt;path_length_cm :  cuvette length in centimeter&lt;/li&gt;
&lt;li&gt;density_g_per_cm3 :  for gold it is 19.28, for silver it is 10.49&lt;/li&gt;
&lt;li&gt;molar_Extinction_perM_percm :  Molar extinction coefficient extracted from &lt;a href="https://www.sigmaaldrich.com/technical-documents/articles/materials-science/nanomaterials/gold-nanoparticles.html"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;This can extracted from measuring absorbance at different concentrations and then fitting a linear line. the slope will be molar extinction coefficient&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here is the code.
&lt;iframe src="https://trinket.io/embed/python/f1353652f2?start=result" width="100%" height="656" frameborder="0" marginwidth="0" marginheight="0" allowfullscreen&gt;&lt;/iframe&gt;&lt;/p&gt;</content><category term="Publications"></category></entry><entry><title>Creating Energy Band Diagrams for Solar cells and LED</title><link href="plasmon360.github.io/creating-energy-band-diagrams-for-solar-cells-and-led.html" rel="alternate"></link><published>2017-09-11T10:42:00-07:00</published><updated>2017-09-11T10:42:00-07:00</updated><author><name>juluribk</name></author><id>tag:None,2017-09-11:plasmon360.github.io/creating-energy-band-diagrams-for-solar-cells-and-led.html</id><summary type="html">&lt;p&gt;Energy band diagrams are used to visulize the electron and hole transport in Solar cells and LED. I want to quickly draw them and came up with a python module.&lt;/p&gt;
&lt;p&gt;You can download the module at my &lt;a href="%20%20https://github.com/plasmon360/Energy-Band-diagram" title="github repository"&gt;github repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here's an example on how to use this code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Band_diagram …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Energy band diagrams are used to visulize the electron and hole transport in Solar cells and LED. I want to quickly draw them and came up with a python module.&lt;/p&gt;
&lt;p&gt;You can download the module at my &lt;a href="%20%20https://github.com/plasmon360/Energy-Band-diagram" title="github repository"&gt;github repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here's an example on how to use this code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Band_diagram&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;metal&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;semiconductor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;plot&lt;/span&gt;

&lt;span class="c1"&gt;# # Define the metals and semiconductors. Here wf is the work function of metals,&lt;/span&gt;
&lt;span class="c1"&gt;# # cb is conduction band minimum and vb is valance band maximum wrt to vacuum level&lt;/span&gt;

&lt;span class="n"&gt;ITO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;metal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;5.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ITO&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;p_nio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;semiconductor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.85&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;5.49&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;P-NIO&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;p3HT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;semiconductor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;5.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;P3HT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;PCBM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;semiconductor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;6.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;PCBM&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;ZnO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;semiconductor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;4.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;vb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;7.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ZnO&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  
&lt;span class="n"&gt;LiF_Al&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;metal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;wf&lt;/span&gt;&lt;span class="o"&gt;=-&lt;/span&gt;&lt;span class="mf"&gt;3.7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;LiF/Al&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;## Create the stack  &lt;/span&gt;
&lt;span class="n"&gt;stack&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ITO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;p_nio&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;p3HT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;PCBM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ZnO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;LiF_Al&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;## plot the stack and save it  &lt;/span&gt;
&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filepath&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Images/Stack1.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;will result in
&lt;a href="http://juluribk.com/wp-content/uploads/2017/09/Stack1.png"&gt;&lt;img alt="Energy Band diagram of organic solar cell" class="aligncenter size-full wp-image-1742" height="480" src="http://juluribk.com/wp-content/uploads/2017/09/Stack1.png" width="640"&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="Publications"></category></entry><entry><title>Tab autocompletetion with python interpreter in bash terminal</title><link href="plasmon360.github.io/tab-autocompletetion-with-python-interpreter-in-bash-terminal.html" rel="alternate"></link><published>2016-10-29T18:16:00-07:00</published><updated>2016-10-29T18:16:00-07:00</updated><author><name>juluribk</name></author><id>tag:None,2016-10-29:plasmon360.github.io/tab-autocompletetion-with-python-interpreter-in-bash-terminal.html</id><summary type="html">&lt;p&gt;I want to tab autocomplete commands in my python interpreter within bash terminal. This is very useful when I import a module and just want to browse through the methods and autocomplete.&lt;/p&gt;
&lt;p&gt;Found two ways to do it. Thanks to stack overflow posts.&lt;/p&gt;
&lt;p&gt;Method 1 (&lt;a href="http://stackoverflow.com/questions/2603798/ipython-tab-completion-not-working"&gt;as mentioned here&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;This is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I want to tab autocomplete commands in my python interpreter within bash terminal. This is very useful when I import a module and just want to browse through the methods and autocomplete.&lt;/p&gt;
&lt;p&gt;Found two ways to do it. Thanks to stack overflow posts.&lt;/p&gt;
&lt;p&gt;Method 1 (&lt;a href="http://stackoverflow.com/questions/2603798/ipython-tab-completion-not-working"&gt;as mentioned here&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;This is easy. Install pyreadline (pip install pyreadline) and use ipython. This is a snapshot of it working.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://juluribk.com/wp-content/uploads/2016/10/iptyhon_autocompletion.png"&gt;&lt;img alt="iptyhon_autocompletion" class="aligncenter size-full wp-image-1731" height="322" src="http://juluribk.com/wp-content/uploads/2016/10/iptyhon_autocompletion.png" width="708"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Method 2 ( &lt;a href="https://docs.python.org/2/library/rlcompleter.html#module-rlcompleter"&gt;as mentioned here&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;This is for standard  python interpreter in bash terminal (such as in Ubuntu). This method requires readline and rlcompeter modules. Install these modules if you do not have them installed. This can be done with pip.&lt;/p&gt;
&lt;p&gt;Basically, the idea is to have a python interpreter look for the value of environment path variable "PYTHONSTARTUP". This variable should be set to a location for the file ("python_startup_file.py") with commands that enable tab autocompletion.&lt;/p&gt;
&lt;p&gt;In my home directory "/home/bjuluri" I make a file called "python_startup_file.py" by&lt;/p&gt;
&lt;p&gt;[cc lang ='bash']&lt;/p&gt;
&lt;p&gt;bjuluri@bjuluri-VirtualBox:\~\$ gedit python_startup_file.py&lt;/p&gt;
&lt;p&gt;[/cc]&lt;/p&gt;
&lt;p&gt;copy and paste following lines&lt;/p&gt;
&lt;p&gt;[cc lang = 'python']&lt;br&gt;
try:&lt;br&gt;
import readline&lt;br&gt;
except ImportError:&lt;br&gt;
print "Module readline not available."&lt;br&gt;
else:&lt;br&gt;
import rlcompleter&lt;br&gt;
readline.parse_and_bind("tab: complete")&lt;br&gt;
[/cc]&lt;/p&gt;
&lt;p&gt;Save and close the file.&lt;/p&gt;
&lt;p&gt;Now lets assign the an environmental variable "PYTHONSTARTUP" to the location of this "python_startup_file"&lt;/p&gt;
&lt;p&gt;./bashrc is loaded whenever a bash terminal is fired. This file sits in the user's home directory, we will edit it and assign the environmental variable at the end of the file.&lt;/p&gt;
&lt;p&gt;[cc]&lt;/p&gt;
&lt;p&gt;nano .bashrc&lt;/p&gt;
&lt;p&gt;[/cc]&lt;/p&gt;
&lt;p&gt;at the end of the file, copy and paste&lt;/p&gt;
&lt;p&gt;[cc lang = 'bash']&lt;/p&gt;
&lt;p&gt;export PYTHONSTARTUP="python_startup_file.py"&lt;/p&gt;
&lt;p&gt;[/cc]&lt;/p&gt;
&lt;p&gt;Save the file and exit.&lt;/p&gt;
&lt;p&gt;reload the .bashrc file in terminal by either opening a new terminal or by typing the following in the current terminal.&lt;/p&gt;
&lt;p&gt;[cc]&lt;/p&gt;
&lt;p&gt;source .bashrc&lt;/p&gt;
&lt;p&gt;[/cc]&lt;/p&gt;
&lt;p&gt;Once those commands run at the python startup, tab autocompletion with suggestions will be enabled in the interpreter.&lt;/p&gt;</content><category term="Free Software"></category><category term="Linux"></category><category term="python"></category></entry><entry><title>Did I turn off the stove...ESP8266</title><link href="plasmon360.github.io/did-i-turn-off-the-stove-esp8266.html" rel="alternate"></link><published>2016-10-08T12:27:00-07:00</published><updated>2016-10-08T12:27:00-07:00</updated><author><name>juluribk</name></author><id>tag:None,2016-10-08:plasmon360.github.io/did-i-turn-off-the-stove-esp8266.html</id><summary type="html">&lt;p&gt;[My wife and I leave the house after a good meal and after like 20 minutes in the car, I ask my wife…did we turn off the stove? My wife answers…you were the last one to cook. What to do now? Go back home and check it. Now …&lt;/p&gt;</summary><content type="html">&lt;p&gt;[My wife and I leave the house after a good meal and after like 20 minutes in the car, I ask my wife…did we turn off the stove? My wife answers…you were the last one to cook. What to do now? Go back home and check it. Now, that sucks.]{style="color: #000000; font-family: Calibri;"}&lt;/p&gt;
&lt;p&gt;[To solve this common problem, I came up with a solution to use internet of things (IOT) to monitor stove status. So here is a final product, a URL I type in my browser and I can see the stove status.]{style="color: #000000; font-family: Calibri;"}&lt;/p&gt;
&lt;p&gt;&lt;a href="http://juluribk.com/wp-content/uploads/2016/10/Capture.png"&gt;&lt;img alt="capture" class="aligncenter wp-image-1718" height="136" src="http://juluribk.com/wp-content/uploads/2016/10/Capture-1024x144.png" width="964"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;How to do IOT cheaply? use ESP8266 module. If you don’t know what I am talking about, ESP8266 is a cheap (4 \$) wifi and microcontroller soc module. To learn more about ESP8266, see here and&lt;a href="http://neilkolban.com/tech/esp8266/"&gt;book by Kolbans&lt;/a&gt;. It can be programmed to connect to wifi network and act as tcp server or tcp client. In addition to connecting to network, it has numerous general purpose inputs-outputs (GPIO), one analog to digital converter (ADC) and couple of PWM’s. TCP server can be used to serve an html page which the status of GPIO pin or read ADC embedded in it. Coding for ESP8266 is done in C programming language, once compiled with toolchain, it can be flashed onto the flash memory. More details on how to compile and flash are described in detail in Kolbans book.&lt;/p&gt;
&lt;p&gt;So coming back to the main point of the article, how did I read the status of my stove, I used the “burner on” led light on my stove which get turned on when any burner is “on”. I read the status of the “burner on” led light by placing a phototranistor close to it (as shown in the schematic below) and the end of phototransistor is fed to a GPIO. If the “burner on” is on then one of the GPIO reads high and if the “burner on” is off then GPIO reads low. One can also use a temperature sensor for this purpose, but “burner on” method works for my stove. This is the schematic of the project:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://juluribk.com/wp-content/uploads/2016/10/text6666.png"&gt;&lt;img alt="text6666" class="aligncenter wp-image-1719" height="510" src="http://juluribk.com/wp-content/uploads/2016/10/text6666-1024x1006.png" width="519"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Two USB-UARTS are used in the project while prototyping. One is used for flashing and other is used for debugging. Note that one has to reset power before flashing. Flashing is done by &lt;a href="https://github.com/themadinventor/esptool"&gt;esptool.py&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is a prototype on breadboard:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://juluribk.com/wp-content/uploads/2016/10/prototype.png"&gt;&lt;img alt="prototype" class="aligncenter wp-image-1721" height="339" src="http://juluribk.com/wp-content/uploads/2016/10/prototype-1024x704.png" width="493"&gt;&lt;/a&gt;&lt;br&gt;
Once the code is flashed onto the esp8266, it should be serving the status of stove. But this only works on local network. How to get the stove status outside my network i.e, when I am not at home? This can be done by assigning a static IP, a port to esp8266 and using dynamic DNS forwarding on my router (a good tutorial on how to do this &lt;a href="http://www.howtogeek.com/66438/how-to-easily-access-your-home-network-from-anywhere-with-ddns/"&gt;is here&lt;/a&gt;. There are many free dynamic dns services out there than can be used. With these modifications, I can now access the stove status from any place in the world.&lt;br&gt;
Here is final implementation of the project.&lt;/p&gt;
&lt;p&gt;[gallery ids="1722,1723"]&lt;/p&gt;
&lt;p&gt;[The code for this project (server application on esp8266 serving GPIO4 status) can be seen &lt;a href="https://github.com/plasmon360/esp8266_c_examples/tree/master/examples/did_i_turn_off_my_stove"&gt;here at my github repository.&lt;/a&gt;]{style="color: #ff0000;"}&lt;/p&gt;</content><category term="Electronics"></category><category term="ESP8266"></category><category term="IOT"></category></entry><entry><title>Coupled Dipole Approximation in Python</title><link href="plasmon360.github.io/coupled-dipole-approximation-in-python.html" rel="alternate"></link><published>2016-07-20T09:39:00-07:00</published><updated>2016-07-20T09:39:00-07:00</updated><author><name>juluribk</name></author><id>tag:None,2016-07-20:plasmon360.github.io/coupled-dipole-approximation-in-python.html</id><summary type="html">&lt;p&gt;[latexpage]&lt;/p&gt;
&lt;p&gt;Coupled dipole approximation (CDA) method is a numerical method to calculate the optical properties (scattering and absorption) of interacting dipoles. This method is used in discrete dipole approximation method (like in&lt;a href="http://www.ddscat.org/"&gt;DDSCAT&lt;/a&gt;software), where a big particle (also known as target) is broken into lot of interacting dipoles arranged …&lt;/p&gt;</summary><content type="html">&lt;p&gt;[latexpage]&lt;/p&gt;
&lt;p&gt;Coupled dipole approximation (CDA) method is a numerical method to calculate the optical properties (scattering and absorption) of interacting dipoles. This method is used in discrete dipole approximation method (like in&lt;a href="http://www.ddscat.org/"&gt;DDSCAT&lt;/a&gt;software), where a big particle (also known as target) is broken into lot of interacting dipoles arranged in cubic lattice. CDA can also be used to calculate the optical properties (scattering and absorption) of random particle distributions (like in L. Zhao et al. J. Phys. Chem. B,  107,  30, 7343,2003 ) and assuming each particle to be small enough that it behaves like a dipole.&lt;/p&gt;
&lt;p&gt;I have implement cda in python ([see source code link at the bottom of this post]{style="color: #ff0000;"}) and use it to calculate the optical properties of nanoparticles that are arranged randomly in cuboid or on a rectangular grid. Once the incident electric field direction (k vector), polarization, positions and radii of particles are given, the code calculates the extinction, scattering and absorption cross-sections. It is important to note that the nano particles should be small enough so that they can act as dipole with quasi-static polarizability.&lt;/p&gt;
&lt;p&gt;[gallery columns="2" size="medium" ids="1679,1680,1681,1678"]&lt;/p&gt;
&lt;p&gt;If you are interested in the numerical part of the code, see below:&lt;/p&gt;
&lt;p&gt;The goal of CDA method is to calculate the self-consistent dipole moments of the dipoles that are interacting with each other. Once dipole moments are calculated, scattering and absorption cross-sections can be calculated. Most of the write up below is from Bruce T. Draine and Piotr J. Flatau, "Discrete-Dipole Approximation For Scattering Calculations," J. Opt. Soc. Am. A 11, 1491-1499 (1994)&lt;/p&gt;
&lt;p&gt;Let start for simplicity by assume two dipoles, dipole \$1\$ positioned at \$\vec{r}_1\$ and dipole \$1\$ positioned at \$\vec{r}_2\$.&lt;/p&gt;
&lt;p&gt;The dipole moment of this dipole \$1\$ is given by \$\vec{p}_1 = p_{1x}\vec{i}+p_{1y}\vec{j}+p_1z\vec{k} = \alpha \vec{E}_1\$, where \$\vec{E}_1 = E_{1x}\vec{i}+E_{1y}\vec{j}+E_{1z}\vec{k}\$ is the local electric field at dipole \$i\$.&lt;/p&gt;
&lt;p&gt;Here,&lt;/p&gt;
&lt;p&gt;\[&lt;br&gt;
\alpha =&lt;br&gt;
\begin{bmatrix}&lt;br&gt;
\alpha_{1xx}&amp;amp;0&amp;amp;0\\&lt;br&gt;
0&amp;amp;\alpha_{1yy}&amp;amp;0\\&lt;br&gt;
0&amp;amp;0&amp;amp;\alpha_{1zz}&lt;br&gt;
\end{bmatrix}&lt;br&gt;
\] is the isotropic polarizability tensor of the \$i\$ dipole.&lt;/p&gt;
&lt;p&gt;The polarizability of the dipole is generally known (generally assumed to follow Clausius-Mossotti relation), but we do not know the local electric field at the dipole \$i\$, because there are complex contributions from other dipoles (like dipole \$2\$).&lt;/p&gt;
&lt;p&gt;Lets write down the local electric field at dipole \$2\$, there will be a incident electric field which is given by \$\vec{E}_{2inc} = \vec{E}_o e\^{i\vec{k}\vec{r}_2}\$ and electric field emanating from dipole \$1\$&lt;/p&gt;
&lt;p&gt;\[&lt;br&gt;
\vec{E}_2 = \vec{E}_o e\^{i\vec{k}\vec{r}_2} + \frac{1}{4\pi\epsilon_o}\left [ \frac{e\^{ikr}}{r} k\^2 \left( \left ( \vec{n}_{21} \times \vec{p}_1 \right ) \times \vec{n}_{21} \right) + e\^{ikr}\left[3\vec{n}_{21}(\vec{n}_{21}\cdot \vec{p}_1)-\vec{p}_1 \right ] \left[\frac{1}{r\^3}-\frac{ik}{r\^2}\right]\right ]&lt;br&gt;
\]&lt;/p&gt;
&lt;p&gt;Here \$r_{21}\$ = \$|\vec{r}_2 - \vec{r}_1|\$&lt;br&gt;
\$\vec{n}_{21} = n_{21x}\vec{i}+n_{21y}\vec{j}+n_{21z}\vec{k} = \frac{\vec{r}_2 - \vec{r}_1}{r_{21}}\$&lt;br&gt;
\$k\$ = \$|\vec{k}|\$ is the wavevector of the incident wave.&lt;/p&gt;
&lt;p&gt;For a constant \$k\$, at the distances near the dipole \$1\$, the second term dominates and this term is called the near field contribution and the first term dominates at the farther distances from the dipole and is called the far field contribution to the electric field.&lt;/p&gt;
&lt;p&gt;Then the above equation can be reduced to a matrix form as follows after some math.&lt;/p&gt;
&lt;p&gt;\[&lt;br&gt;
\tiny&lt;br&gt;
\begin{bmatrix}&lt;br&gt;
E_{2x}\\&lt;br&gt;
E_{2y}\\&lt;br&gt;
E_{2z}&lt;br&gt;
\end{bmatrix}&lt;br&gt;
=&lt;br&gt;
\tiny&lt;br&gt;
\begin{bmatrix}&lt;br&gt;
\alpha_{2xx}&amp;amp;0&amp;amp;0\\&lt;br&gt;
0&amp;amp;\alpha_{2yy}&amp;amp;0\\&lt;br&gt;
0&amp;amp;0&amp;amp;\alpha_{2zz}&lt;br&gt;
\end{bmatrix} \^{-1}&lt;br&gt;
\tiny&lt;br&gt;
\begin{bmatrix}&lt;br&gt;
P_{2x}\\&lt;br&gt;
P_{2y}\\&lt;br&gt;
P_{2z}&lt;br&gt;
\end{bmatrix}&lt;br&gt;
=&lt;br&gt;
\tiny&lt;br&gt;
\begin{bmatrix}&lt;br&gt;
E_{2x_{inc}}\\&lt;br&gt;
E_{2y_{inc}}\\&lt;br&gt;
E_{2z_{inc}}&lt;br&gt;
\end{bmatrix}&lt;br&gt;
+&lt;br&gt;
\]&lt;/p&gt;
&lt;p&gt;\[&lt;br&gt;
\tiny&lt;br&gt;
\begin{matrix}&lt;br&gt;
A_{12}(n_{21y}\^2 +n_{21z}\^2) +B_{12}(3n_{21x}\^2-1)) &amp;amp; n_{21z} n_{21y}(3B_{12}-A_{12}) &amp;amp; n_{21x} n_{21z}(3B_{12}-A_{12}) \\&lt;br&gt;
n_{21x} n_{21y}(3B_{12}-A_{12}) &amp;amp; A_{12}(n_{21x}\^2 +n_{21z}\^2) +B_{12}(3n_{21y}\^2-1)) &amp;amp; n_{21y} n_{21z}(3B_{12}-A_{12}) \\&lt;br&gt;
n_{21x} n_{21z}(3B_{12}-A_{12})&amp;amp; n_{21y} n_{21z}(3B_{12}-A_{12}) &amp;amp; A_{12}(n_{21y}\^2 +n_{21x}\^2) +B_{12}(3n_{21z}\^2-1))&lt;br&gt;
\end{bmatrix}&lt;/p&gt;
&lt;p&gt;\tiny&lt;br&gt;
\begin{bmatrix}&lt;br&gt;
P_{1x}\\&lt;br&gt;
P_{1y}\\&lt;br&gt;
P_{1z}&lt;br&gt;
\end{bmatrix}&lt;br&gt;
\]&lt;/p&gt;
&lt;p&gt;where,&lt;br&gt;
\$A_{12} = \frac{k\^2}{4\pi\epsilon_o}\frac{e\^{ikr_{21}}}{R_{21}}\$ and \$B_{12} = \left[\frac{1}{r_{21}\^3}-\frac{ik}{r_{21}\^2}\right]\frac{e\^{ikr_{21}}}{4\pi\epsilon_o}\$&lt;/p&gt;
&lt;p&gt;Similarly we write the electric field near the dipole \$1\$ as&lt;/p&gt;
&lt;p&gt;\[&lt;br&gt;
\tiny&lt;br&gt;
\begin{bmatrix}&lt;br&gt;
E_{1x}\\&lt;br&gt;
E_{1y}\\&lt;br&gt;
E_{1z}&lt;br&gt;
\end{bmatrix}&lt;br&gt;
=&lt;br&gt;
\begin{bmatrix}&lt;br&gt;
\alpha_{1xx}&amp;amp;0&amp;amp;0\\&lt;br&gt;
0&amp;amp;\alpha_{1yy}&amp;amp;0\\&lt;br&gt;
0&amp;amp;0&amp;amp;\alpha_{1zz}&lt;br&gt;
\end{bmatrix} \^{-1}&lt;br&gt;
\tiny&lt;br&gt;
\begin{bmatrix}&lt;br&gt;
P_{1x}\\&lt;br&gt;
P_{1y}\\&lt;br&gt;
P_{1z}&lt;br&gt;
\end{bmatrix}&lt;br&gt;
=&lt;br&gt;
\begin{bmatrix}&lt;br&gt;
E_{1x_{inc}}\\&lt;br&gt;
E_{1y_{inc}}\\&lt;br&gt;
E_{1z_{inc}}&lt;br&gt;
\end{bmatrix}&lt;br&gt;
+&lt;br&gt;
\]&lt;/p&gt;
&lt;p&gt;\[&lt;br&gt;
\tiny&lt;br&gt;
\begin{bmatrix}&lt;br&gt;
A_{21}(n_{12y}\^2 +n_{12z}\^2) +B_{21}(3n_{12x}\^2-1)) &amp;amp; n_{12z} n_{12y}(3B_{21}-A_{21}) &amp;amp; n_{12x} n_{12z}(3B_{21}-A_{21}) \\&lt;br&gt;
n_{12x} n_{12y}(3B_{21}-A_{21}) &amp;amp; A_{21}(n_{12x}\^2 +n_{12z}\^2) +B_{21}(3n_{12y}\^2-1)) &amp;amp; n_{12y} n_{12z}(3B_{21}-A_{21}) \\&lt;br&gt;
n_{12x} n_{12z}(3B_{21}-A_{21})&amp;amp; n_{121y} n_{12z}(3B_{21}-A_{21}) &amp;amp; A_{21}(n_{12y}\^2 +n_{12x}\^2) +B_{21}(3n_{12z}\^2-1))&lt;br&gt;
\end{bmatrix}&lt;br&gt;
\tiny&lt;br&gt;
\begin{bmatrix}&lt;br&gt;
P_{2x}\\&lt;br&gt;
P_{2y}\\&lt;br&gt;
P_{2z}&lt;br&gt;
\end{bmatrix}&lt;br&gt;
\]&lt;/p&gt;
&lt;p&gt;These two equations can be combined in the form of AP = E matrix equation as follows:&lt;/p&gt;
&lt;p&gt;\[&lt;br&gt;
\begin{bmatrix}&lt;br&gt;
\alpha1\^{-1}&amp;amp;\textbf{M12}&amp;amp;\\&lt;br&gt;
\textbf{M21}&amp;amp;\alpha2\^{-1}&amp;amp;&lt;br&gt;
\end{bmatrix}&lt;br&gt;
\begin{bmatrix}&lt;br&gt;
\vec{P}_{1}\\&lt;br&gt;
\vec{P}_{2}\\&lt;br&gt;
\end{bmatrix}&lt;/p&gt;
&lt;p&gt;=&lt;br&gt;
\begin{bmatrix}&lt;br&gt;
E_{1inc}\\&lt;br&gt;
E_{2inc}\\&lt;br&gt;
\end{bmatrix}&lt;br&gt;
\]&lt;/p&gt;
&lt;p&gt;We can calcualte A from the positions of dipoles, their polarizability and wavevector, we know E from the incident electric fields, but we do not know \$\vec{P}_1\$ and \$\vec{P}_2\$ and that is what we find by solving P in AP = E matrix equation.&lt;/p&gt;
&lt;p&gt;We can extend the same concept to N dipoles, just the matrices in this case become bigger (A is 3N x 3N matrix, P in 3N and E is 3N column matrixes) and we need numerical iterative methods to solve. For solving the AP=E, I use Scipy's &lt;a href="http://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.linalg.bicgstab.html#scipy.sparse.linalg.bicgstab"&gt;biConjugate gradient stabilized method&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Once we know these self-consistent dipole moments, we can calculate the scattering and absorption cross-sections using extinction theorem (see equation 8 and 9 in Bruce T. Draine and Piotr J. Flatau, "Discrete-Dipole Approximation For Scattering Calculations," J. Opt. Soc. Am. A 11, 1491-1499 (1994)).&lt;/p&gt;
&lt;h3 id="see-source-code-at-github-here" style="text-align: center;"&gt;[&lt;a href="https://github.com/plasmon360/CDA_PYTHON"&gt;[See source code at GitHub here]{style="color: #ff0000; text-decoration: underline;"}&lt;/a&gt;]{style="text-decoration: underline;"}&lt;/h3&gt;</content><category term="Plasmonics"></category><category term="electromagnetism"></category><category term="Plasmonics"></category><category term="python"></category></entry><entry><title>Fitting Complex Metal Dielectric Functions with Differential Evolution Method</title><link href="plasmon360.github.io/fitting-complex-metal-dielectric-functions-with-differential-evolution-method.html" rel="alternate"></link><published>2016-04-13T21:59:00-07:00</published><updated>2016-04-13T21:59:00-07:00</updated><author><name>juluribk</name></author><id>tag:None,2016-04-13:plasmon360.github.io/fitting-complex-metal-dielectric-functions-with-differential-evolution-method.html</id><summary type="html">&lt;p&gt;
&lt;script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML" type="text/javascript"&gt;// &lt;![CDATA[&lt;/p&gt;

&lt;p&gt;// ]]&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;

&lt;div class="prompt input_prompt"&gt;

&lt;/div&gt;

&lt;div class="inner_cell"&gt;

&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;

The real and imaginary part of dielectric permittivity of the metals is important to simulate the optical properties of metal films and nanoparticles. Permittivity data is obtained experimentally by ellipsometry and is fitted with analytical models. The most common model for fitting experimental data is with Drude-Lorentz …&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;
&lt;script src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML" type="text/javascript"&gt;// &lt;![CDATA[&lt;/p&gt;

&lt;p&gt;// ]]&gt;&lt;/script&gt;
&lt;/p&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;

&lt;div class="prompt input_prompt"&gt;

&lt;/div&gt;

&lt;div class="inner_cell"&gt;

&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;

The real and imaginary part of dielectric permittivity of the metals is important to simulate the optical properties of metal films and nanoparticles. Permittivity data is obtained experimentally by ellipsometry and is fitted with analytical models. The most common model for fitting experimental data is with Drude-Lorentz model shown below.

\$\$\\epsilon(\\omega)=1-\\frac{f\_1\\omega\_p\^2}{(\\omega\^2+i\\Gamma\_1\\omega)}+\\sum\_{j=2}\^{n}\\frac{f\_j\\omega\_p\^2}{(\\omega\_{o,j}\^2-\\omega\^2-i\\Gamma\_j\\omega)}\$\$

The first term is the Drude part. It represents the response of electron in the Fermi sea/conduction band when it sees external oscillating electric field (these transitions are called as intraband transitions). The Drude term has the plasma frequency (\$\\omega\_p\$, oscillator strengh (\$f\_1\$) and damping term (\$\\Gamma\_1\$). The rest of the terms represent the Lorentz oscillators with specific resonance frequencies (\$\\omega\_{o,j}\$), oscillator strengths (\$f\_{j}\$) and damping terms(\$\\Gamma\_j\$) associated with them. They represent electron excitation from one band to another following an external oscillating electric field at certain resonance frequencies (these transitions are called as interband transitions).

Just out of curiosity, I wanted to do this fitting by myself for a long time now. So I attempted to fit the data with the commonly used fitting method, the least squares method, which involves minimization of the square of the error between the model and experimental data, while changing the parameters. However I was not getting good fitting results even with several attempts, this may be due to the following problems with this method:

-   The fits were very sensitive to the initial guess values of the parameters (oscillator strengths, damping terms, etc).
-   The method is a local minimization technique. What that means is that the least square algorithm (Levenberg - Marquardt ) is changing the parameters in parameter space and searching for the minimum of sum of squares of difference between model and data. While doing this it can get trapped in a local minimum and report the parameters at that point as if it was as global minimum.  
   For more information on the problems of least-square method. See the last section of the article [here](http://www.itl.nist.gov/div898/handbook/pmd/section1/pmd141.htm).

To avoid these problems, researchers use global optimization techniques. See, [Rakic et al.](https://www.osapublishing.org/ao/abstract.cfm?uri=ao-37-22-5271%20) and [Djurisic et al.](%20http://iopscience.iop.org/article/10.1088/1464-4258/2/5/318/meta). Rakic et al. used simulated annealing method , whic is a global optimization method and does a great job fitting experimental data. I wanted to use [Scipy's simulated annealing method](http://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.optimize.anneal.html) to fit the dielectric functions, but found that simulated annealing algorithm is deprecated in scipy 0.14 and they suggest using basin-hopping or differential evolution (DE) algorithms instead.

I gave DE method a try because I didnot see any research article using DE algorithm for fitting dielectric data. If any of the readers find an article that uses DE to fit complex dielectric function, please point me to the article. DE algorithm is a stochastic method that does not involve finding a gradient but rather involves mutation and recombination of random population of solutions. I dont completely understand the guts of the algorithm, but you can find more information [here](https://en.wikipedia.org/wiki/Differential_evolution).

Below is my code of how I do the fitting of gold dielectric function with python and lmfit module. lmfit is a python module that provides a better and convinient fitting and optimization interface for Scipy optimize/minimze methods. The default minimization technique for lmfit is least square (Levenberg-marquardt) methood, so it needs to be changed to differential evolution.

These are my results:  
[![dielectric functions fitting by differential evolution method](http://juluribk.com/wp-content/uploads/2016/04/download.png){.aligncenter .size-full .wp-image-1614 width="839" height="337"}](http://juluribk.com/wp-content/uploads/2016/04/download.png)

[You can download my ipython notebook at the bottom of this post.]{style="color: #ff0000;"}

You can use this method for fitting other dielectric data, but have to tweak the bounds a little bit. If you use my implementation for your fitting your experimental data, please let me know or even better cite it as:

Juluri B.K. "Differential Evolution algorithm to fit Metal Dielectric Functions" &lt;http://juluribk.com/?p=1597&gt;.

&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;

&lt;div class="prompt input_prompt"&gt;

&lt;/div&gt;

&lt;div class="inner_cell"&gt;

&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;

In the following code, I get the gold's experimental dielectric data from [Refractiveindex.info](http://refractiveindex.info/).

&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div class="cell border-box-sizing code_cell rendered"&gt;

&lt;div class="input"&gt;

&lt;div class="prompt input_prompt"&gt;

In \[12\]:

&lt;/div&gt;

&lt;div class="inner_cell"&gt;

&lt;div class="input_area"&gt;

&lt;div class="highlight hl-ipython2"&gt;

    import urllib2 # To make a request and gather data,

    # Query the website

    response = urllib2.urlopen('http://refractiveindex.info/database/main/Au/Babar.yml')

    # Alternative Experimental data sources
    # response = urllib2.urlopen('http://refractiveindex.info/database/main/Au/McPeak.yml')
    # response = urllib2.urlopen('http://refractiveindex.info/database/main/Au/Lemarchand-3.96nm.yml')

    # Read the response. Response is in YAML format. Will use PyYAML parser,
    yaml_data = response.read()
    import yaml
    data =  yaml.load(yaml_data)

    # Lets see what is inside the data,
    print"Keys in the data:" , data.keys() 

    # Lets print the reference for this data,
    print "Reference : ", data['REFERENCES']

    if 'COMMENTS' in data.keys():
        print "Comments : ", data['COMMENTS']

    # Data seems to be stored in 'DATA', if needed uncomment the following line
    #print(data['DATA'])

&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div class="output_wrapper"&gt;

&lt;div class="output"&gt;

&lt;div class="output_area"&gt;

&lt;div class="prompt"&gt;

&lt;/div&gt;

&lt;div class="output_subarea output_stream output_stdout output_text"&gt;

    Keys in the data: ['REFERENCES', 'DATA']
    Reference :  S. Babar and J. H. Weaver. Optical constants of Cu, Ag, and Au revisited, &lt;a href="http://dx.doi.org/10.1364/AO.54.000477"&gt;&lt;i&gt;Appl. Opt.&lt;/i&gt; &lt;b&gt;54&lt;/b&gt;, 477-481 (2015)&lt;/a&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;

&lt;div class="prompt input_prompt"&gt;

&lt;/div&gt;

&lt;div class="inner_cell"&gt;

&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;

Data string contains real and imaginary part of the refractive index (not dielectric permitivitty). I clean up the real and imaginary part of the refractive data and convert them to dielectric permittivities

&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div class="cell border-box-sizing code_cell rendered"&gt;

&lt;div class="input"&gt;

&lt;div class="prompt input_prompt"&gt;

In \[14\]:

&lt;/div&gt;

&lt;div class="inner_cell"&gt;

&lt;div class="input_area"&gt;

&lt;div class="highlight hl-ipython2"&gt;

    # Some clean up needed. The required data string holding wavelength, n and k, is in the form of dictionary item 
    # with key 'data', which is inside a list\n",

    cleaned_nk = data['DATA'][0]['data'] 

    # Use StringIO to convert String buffer as a file like class\n",
    import numpy as np
    from StringIO import StringIO

    # Read the data into as numpy vectors\n",
    wave_micron, n, k  = np.genfromtxt(StringIO(cleaned_nk), unpack=True)

    wave_exp = wave_micron * 1000 # Convert wavelength from microns to nm
    eps_exp = (n + 1j* k)**2  # Convert n,k into dielectric function

    # Lets convert wavelengh in nm to eV and assign it to 'w' 
    h = 4.135667516E-15 # plancks's constant in eV-sec
    c = 299792458E9 # speed of light in vacuum in nm/sec
    w_exp = h*c/wave_exp;  # Convert wavleength in nm to eV

&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;

&lt;div class="prompt input_prompt"&gt;

&lt;/div&gt;

&lt;div class="inner_cell"&gt;

&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;

I define a function that will plot experimental dielectric data. It will also plot fitted models if the data is provided.

&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div class="cell border-box-sizing code_cell rendered"&gt;

&lt;div class="input"&gt;

&lt;div class="prompt input_prompt"&gt;

In \[6\]:

&lt;/div&gt;

&lt;div class="inner_cell"&gt;

&lt;div class="input_area"&gt;

&lt;div class="highlight hl-ipython2"&gt;

    def plot_fit(w_exp,eps_exp, w_for_fit = None,eps_fit_result = None):
        '''
        This functions plots the experimental dielectric function as function of wavelength.
        If fitted model data is available it will also plot it
        '''

        %matplotlib inline
        import matplotlib.pyplot as plt
        from matplotlib.ticker import ScalarFormatter
        from matplotlib import rcParams

        rcParams.update({'font.size': 18}) # Increase the font size
        rcParams['mathtext.default']='regular' # make the mathtext the same size of normal text for better readbility

        # Plot the real part of the dielectric function
        fig,ax = plt.subplots(1,2,figsize = (12,5))
        ax[0].scatter(w_exp, abs(eps_exp.real), marker = 'o',facecolor = 'none', edgecolor = 'g')

        ax[0].set_xlabel('Energy (eV)')
        ax[0].set_ylabel(r'|$\epsilon^\prime$|')


        # Plot the imaginary part of the dielectric function
        ax[1].scatter(w_exp, eps_exp.imag, marker = 'o',facecolor = 'none', edgecolor = 'g')
        ax[1].set_ylabel(r'$\epsilon ^ {\prime \prime}$')
        ax[1].set_xlabel('Energy (eV)')

        # If the fit data is available we will plot it with the actual plots
        if (w_for_fit is not None and eps_fit_result is not None):
            ax[0].plot(w_for_fit, abs(eps_fit_result.real),'-r')
            ax[1].plot(w_for_fit,eps_fit_result.imag,'-r')


        # Set the grid, log and axis formatter
        for axis in ax:
            axis.grid('on')
            axis.set_xscale('log')
            axis.set_yscale('log')
            axis.set_xlim([min(w_exp),max(w_exp)])
            for x_yaxis in [axis.xaxis, axis.yaxis]:
                x_yaxis.set_major_formatter(ScalarFormatter())

        fig.tight_layout()


&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;

&lt;div class="prompt input_prompt"&gt;

&lt;/div&gt;

&lt;div class="inner_cell"&gt;

&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;

Lets plot the experimental data to see the data. Data seems to be from 0.1ev to 10eV. There seems to be three transitions (are all of them interband?) above 1eV

&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div class="cell border-box-sizing code_cell rendered"&gt;

&lt;div class="input"&gt;

&lt;div class="prompt input_prompt"&gt;

In \[7\]:

&lt;/div&gt;

&lt;div class="inner_cell"&gt;

&lt;div class="input_area"&gt;

&lt;div class="highlight hl-ipython2"&gt;

    plot_fit(w_exp,eps_exp)

&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div class="output_wrapper"&gt;

 [![dielectric\_no\_fit](http://juluribk.com/wp-content/uploads/2016/04/dielectric_no_fit.png){.aligncenter .size-full .wp-image-1706 width="839" height="337"}](http://juluribk.com/wp-content/uploads/2016/04/dielectric_no_fit.png) [  
](http://juluribk.com/wp-content/uploads/2016/04/download_with_fit.png)

&lt;/div&gt;

&lt;/div&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;

&lt;div class="prompt input_prompt"&gt;

&lt;/div&gt;

&lt;div class="inner_cell"&gt;

&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;

Lets define a Drude-Lorentz model. This will be the model we will try to fit the experimental data with. The model has one Drude term and five Lorentz oscillators

&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div class="cell border-box-sizing code_cell rendered"&gt;

&lt;div class="input"&gt;

&lt;div class="prompt input_prompt"&gt;

In \[15\]:

&lt;/div&gt;

&lt;div class="inner_cell"&gt;

&lt;div class="input_area"&gt;

&lt;div class="highlight hl-ipython2"&gt;

    def drude_lorentz_model(params, w):
        '''
        This is functional representation of drude lorentz model with the first term being Drude
        and the rest terms being lorentz oscillators
        '''

        # Get the plasma frequency
        omega_p = params['Omega_p'].value


        # Get the Drude parms
        f0 = params['f0'].value
        gamma0 = params['Gamma0'].value

        # Get the first Lorentz term parameters,
        f1 = params['f1'].value
        gamma1 = params['Gamma1'].value
        omega1 = params['Omega1'].value

        # Get the second Lorentz term parameters
        f2 = params['f2'].value
        gamma2 = params['Gamma2'].value
        omega2 = params['Omega2'].value

        # Get the third Lorentz term parameters
        f3 = params['f3'].value
        gamma3 = params['Gamma3'].value
        omega3 = params['Omega3'].value

        # Get the fourth Lorentz term parameters
        f4 = params['f4'].value
        gamma4 = params['Gamma4'].value
        omega4 = params['Omega4'].value

        # Get the fifth Lorentz term parameters
        f5 = params['f5'].value
        gamma5 = params['Gamma5'].value
        omega5 = params['Omega5'].value

        # Drude component
        epsilon_D = 1 - (f0 * omega_p ** 2 / (w ** 2 + 1j * (gamma0) * w))

        # Lorentz first oscillator
        epsilon_L1 = (f1 * omega_p ** 2) / (omega1 ** 2 - w ** 2 - 1j * gamma1 * w)

        # Lorentz SEcond oscillator 
        epsilon_L2 = (f2 * omega_p ** 2) / (omega2 ** 2 - w ** 2 - 1j * gamma2 * w)

        # Lorentz Third oscillator 
        epsilon_L3 = (f3 * omega_p ** 2) / (omega3 ** 2 - w ** 2 - 1j * gamma3 * w)

        # Lorentz Fourth oscillator 
        epsilon_L4 = (f4 * omega_p ** 2) / (omega4 ** 2 - w ** 2 - 1j * gamma4 * w)

        # Lorentz Fifth oscillator 
        epsilon_L5 = (f5 * omega_p ** 2) / (omega5 ** 2 - w ** 2 - 1j * gamma5 * w)

        # Sum all the terms
        epsilon = epsilon_D + epsilon_L1 +epsilon_L2 +  epsilon_L3 +  epsilon_L4 +  epsilon_L5

        return epsilon

&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;

&lt;div class="prompt input_prompt"&gt;

&lt;/div&gt;

&lt;div class="inner_cell"&gt;

&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;

Lets define a callable function which returns a residual. This function will be used by our minimization algorithm. It is important to note how the residual is calculated as it is little bit different than normal fitting examples shown in lmfit, because we are minimizing complex data.

&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div class="cell border-box-sizing code_cell rendered"&gt;

&lt;div class="input"&gt;

&lt;div class="prompt input_prompt"&gt;

In \[9\]:

&lt;/div&gt;

&lt;div class="inner_cell"&gt;

&lt;div class="input_area"&gt;

&lt;div class="highlight hl-ipython2"&gt;

    def complex_residuals(params, model, w, exp_data):
        '''
        This is the residual function that we will try to minimize.
        It takes the params dict that has the parameters that need to be found. 
       '''
        if model == 'Drude':
            # Our Drude model
            epsilon= drude_model(params,w)
        elif model == 'Drude-Lorentz':
            # Our Drude model
            epsilon= drude_lorentz_model(params,w)

        # Lets calculate our complex residual as the way it is done in page 5264
        # Rakic, a D.,et al (1998). Optical properties of metallic films for vertical-cavity optoelectronic devices. Applied Optics, 37(22), 5271–83.
        residual = (abs((epsilon.real - exp_data.real)/exp_data.real) + abs((epsilon.imag - exp_data.imag)/exp_data.imag))**2

        # if the residual is being used for least square optimizaiton we should have used
        # residual = (abs((epsilon.real - exp_data.real)/exp_data.real) + abs((epsilon.imag - exp_data.imag)/exp_data.imag))
        # least square method does the square of the residual in its algorithm. see http://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.optimize.leastsq.html

        return residual

&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;

&lt;div class="prompt input_prompt"&gt;

&lt;/div&gt;

&lt;div class="inner_cell"&gt;

&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;

This is where differential evolution will be used to make a fit to the data. Differential evolution algorithm requires bounds for each parameter. I gave resonable bounds based on looking at the experimental data and hope to see what the algorithm does. It seem to do a resonable job and much better job than least squares method. **The fitting results will vary a little bit each time we run this cell. So run the cell couple of times to see if things change for better.**

&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div class="cell border-box-sizing code_cell rendered"&gt;

&lt;div class="input"&gt;

&lt;div class="prompt input_prompt"&gt;

In \[17\]:

&lt;/div&gt;

&lt;div class="inner_cell"&gt;

&lt;div class="input_area"&gt;

&lt;div class="highlight hl-ipython2"&gt;

    # Note that lmfit should be Version &gt; 0.9.0. We will check this
    import lmfit
    from distutils.version import StrictVersion
    assert StrictVersion(lmfit.__version__) &gt; StrictVersion("0.9.0")

    from lmfit import minimize, Parameters, printfuncs

    # Choose the model we want to fit it with 
    model = 'Drude-Lorentz'

    params = Parameters()
    params.add('Omega_p', value = 9, min = 8.5 , max = 10) # Omega_p has a value in eV, we will add a starting guess here

    # Drude Term
    params.add('f0', value=0.5, min = 1E-10, max = 1) # f  has no units,  we will add a starting guess here 
    params.add('Gamma0', value= 0.03 , min = 1E-10, max = 0.1 ) # Gamma is damping term and has units in eV, we will add a starting guess here

    # Lorentz first Oscillator term
    params.add('f1', value=0.5, min = 1E-10, max = 1) # f  has no units,  we will add a starting guess here 
    params.add('Gamma1', value= 0.5, min = 1E-10 ,  max = 2) # Gamma is damping term and has units in eV, we will add a starting guess here
    params.add('Omega1', value = 5 , min = 5 , max = 10) # Omega_o is oscillator central frequency term  and has units in eV. we will add a starting guess here

    # Lorentz Second Oscillator term
    params.add('f2', value=0.5, min = 1E-10, max = 1) # f  has no units,  we will add a starting guess here 
    params.add('Gamma2', value= 0.5, min = 0.01,  max = 2 ) # Gamma is damping term and has units in eV, we will add a starting guess here
    params.add('Omega2', value = 3 , min = 2.5 , max = 3.5) # Omega_o is oscillator central frequency term  and has units in eV. we will add a starting guess here

    # Lorentz Third Oscillator term
    params.add('f3', value=0.5, min = 1E-10, max = 1) # f  has no units,  we will add a starting guess here 
    params.add('Gamma3', value= 1, min = 0.01 , max = 2) # Gamma is damping term and has units in eV, we will add a starting guess here
    params.add('Omega3', value = 4 , min = 3.5, max = 4.5 ) # Omega_o is oscillator central frequency term  and has units in eV. we will add a starting guess here

    # Lorentz Fourth Oscillator term
    params.add('f4', value=0.5, min = 1E-10, max = 1) # f  has no units,  we will add a starting guess here 
    params.add('Gamma4', value= 1, min = 0.01 , max = 2) # Gamma is damping term and has units in eV, we will add a starting guess here
    params.add('Omega4', value = 5 , min = 4.5, max = 5.5 ) # Omega_o is oscillator central frequency term  and has units in eV. we will add a starting guess here

    # Lorentz Fifth Oscillator term
    params.add('f5', value=0.5, min = 1E-10, max = 1) # f  has no units,  we will add a starting guess here 
    params.add('Gamma5', value= 1, min = 0.01 , max = 2) # Gamma is damping term and has units in eV, we will add a starting guess here
    params.add('Omega5', value = 6 , min = 5.5, max = 6.5 ) # Omega_o is oscillator central frequency term  and has units in eV. we will add a starting guess here



    # Lets fit to all the data.
    w_for_fit = w_exp
    eps_for_fit = eps_exp

    # if we were to fit only a part of the data such as fit only below 2 ev
    #w_for_fit = w_exp[w_exp&lt;2]
    #eps_for_fit = eps_exp[w_exp&lt;2]


    # Call the minimize function with required parameters and use differential evolution as a method 
    minimizer_results = minimize(complex_residuals, params, args=(model, w_for_fit, eps_for_fit), method = 'differential_evolution', strategy='best1bin',
                                 popsize=50, tol=0.01, mutation=(0, 1), recombination=0.9, seed=None, callback=None, disp=True, polish=True, init='latinhypercube')

    # If we were to fit ith with least squares methods
    # minimizer_results = minimize(complex_residuals, params, args=(model, w_for_fit, eps_for_fit), method = 'leastsq')

    #lets see whether the fit exited successfully?
    print "Print exited successfully? :  ", minimizer_results.success

    #lets see the termination status
    print "Termination Status: ", minimizer_results.message

    # lets print the fit report. We dont need lengthy Correlation table
    printfuncs.report_fit(minimizer_results, show_correl=False)

    # Caluclate the epsilon based on the fit results
    eps_fit_result = np.array([drude_lorentz_model(minimizer_results.params, i) for i in w_for_fit])

    # Lets plot the fit data
    plot_fit(w_exp,eps_exp, w_for_fit,eps_fit_result)

&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div class="output_wrapper"&gt;

&lt;div class="output"&gt;

&lt;div class="output_area"&gt;

&lt;div class="prompt"&gt;

&lt;/div&gt;

&lt;div class="output_subarea output_stream output_stdout output_text"&gt;

    differential_evolution step 1: f(x)= 182.623
    differential_evolution step 2: f(x)= 182.623
    differential_evolution step 3: f(x)= 182.623
    differential_evolution step 4: f(x)= 50.6673
    differential_evolution step 5: f(x)= 20.0853
    differential_evolution step 6: f(x)= 20.0853
    .
    .
    .
    differential_evolution step 59: f(x)= 1.19969
    differential_evolution step 60: f(x)= 1.19968
    differential_evolution step 61: f(x)= 1.1984
    differential_evolution step 62: f(x)= 1.19704
    differential_evolution step 63: f(x)= 1.19592
    differential_evolution step 64: f(x)= 1.19556
    differential_evolution step 65: f(x)= 1.19137
    differential_evolution step 66: f(x)= 1.18851
    differential_evolution step 67: f(x)= 1.18354
    differential_evolution step 68: f(x)= 1.18286
    Print exited successfully? :   True
    Termination Status:  Optimization terminated successfully.
    [[Fit Statistics]]
        # function evals   = 66984
        # data points      = 69
        # variables        = 18
        chi-square         = 1.137
        reduced chi-square = 0.022
        Akaike info crit   = -226.448
        Bayesian info crit = -186.234
    [[Variables]]
        Omega_p:   9.97441670 (init= 9)
        f0:        0.68683341 (init= 0.5)
        Gamma0:    0.01987236 (init= 0.03)
        f1:        0.98709783 (init= 0.5)
        Gamma1:    1.4876e-05 (init= 0.5)
        Omega1:    8.02150038 (init= 5)
        f2:        0.07682351 (init= 0.5)
        Gamma2:    0.65934600 (init= 0.5)
        Omega2:    2.91927926 (init= 3)
        f3:        0.16124225 (init= 0.5)
        Gamma3:    1.12448236 (init= 1)
        Omega3:    3.70495567 (init= 4)
        f4:        0.15690286 (init= 0.5)
        Gamma4:    1.18873234 (init= 1)
        Omega4:    4.50000000 (init= 5)
        f5:        0.23132574 (init= 0.5)
        Gamma5:    1.88224399 (init= 1)
        Omega5:    5.71650394 (init= 6)

&lt;/div&gt;

&lt;/div&gt;

&lt;div class="output_area"&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div class="cell border-box-sizing code_cell rendered"&gt;

&lt;div class="input"&gt;

&lt;div class="prompt input_prompt"&gt;

&lt;/div&gt;

&lt;div class="inner_cell"&gt;

![download\_with\_fit](http://juluribk.com/wp-content/uploads/2016/04/download_with_fit.png){.aligncenter .size-large .wp-image-1707 width="780" height="313"}

&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;

&lt;div class="inner_cell"&gt;

&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;

Differential evolution algorithm gives a very reasonable fit as shown above. Code gives the final dielectric parameters for the model and the fit parameters.

[[[Source code of above Ipython notebook](https://gist.github.com/plasmon360/71d4f6fc559e71362e09bb64dd6a1fa3)]{style="color: #ff0000;"}]{style="text-decoration: underline;"} {#source-code-of-above-ipython-notebook style="text-align: center;"}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;</content><category term="Plasmonics"></category></entry><entry><title>Dealing with plotting negative, zero and positive values in log scale</title><link href="plasmon360.github.io/dealing-with-plotting-negative-zero-and-positive-values-in-log-scale.html" rel="alternate"></link><published>2016-03-30T10:00:00-07:00</published><updated>2016-03-30T10:00:00-07:00</updated><author><name>juluribk</name></author><id>tag:None,2016-03-30:plasmon360.github.io/dealing-with-plotting-negative-zero-and-positive-values-in-log-scale.html</id><summary type="html">&lt;p&gt;Sometimes you have to show positive, zero and negative number in log scale. However you cannot take log of negative numbers and zero. But one could approximate it with a log transform modulus as stated &lt;a href="http://blogs.sas.com/content/iml/2014/07/14/log-transformation-of-pos-neg.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In Python with numpy:&lt;/p&gt;
&lt;p&gt;[cc lang='python']&lt;/p&gt;
&lt;p&gt;from numpy import sign, abs, log10&lt;br&gt;
import …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sometimes you have to show positive, zero and negative number in log scale. However you cannot take log of negative numbers and zero. But one could approximate it with a log transform modulus as stated &lt;a href="http://blogs.sas.com/content/iml/2014/07/14/log-transformation-of-pos-neg.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In Python with numpy:&lt;/p&gt;
&lt;p&gt;[cc lang='python']&lt;/p&gt;
&lt;p&gt;from numpy import sign, abs, log10&lt;br&gt;
import matplotlib.pyplot as plt&lt;/p&gt;
&lt;p&gt;# Data varies in several magnitudes and has both positive, zero and negative numbers&lt;br&gt;
x = [-10000,-1000,-100,-10,0,10,100,1000,10000]&lt;br&gt;
# log modulus transform&lt;br&gt;
x_log_modulus_transform= sign(x)*(log10(abs(x)+1))&lt;/p&gt;
&lt;p&gt;f, ax = plt.subplots(2, sharex=True)&lt;br&gt;
ax[0].plot(x,'o')&lt;br&gt;
ax[0].margins(x=0.12, y=0.2) # for better visualization of datapoints at the end of axis&lt;/p&gt;
&lt;p&gt;ax[1].plot(x_log_modulus_transform,'o')&lt;br&gt;
ax[1].margins(x=0.12, y=0.2) # for better visualization of datapoints at the end of axis&lt;br&gt;
ax[0].set_ylabel('x')&lt;br&gt;
ax[1].set_ylabel('sign(x)*(log(|x|+1))')&lt;br&gt;
plt.show()&lt;/p&gt;
&lt;p&gt;[/cc]&lt;/p&gt;
&lt;p&gt;&lt;a href="http://juluribk.com/wp-content/uploads/2016/03/download.png"&gt;&lt;img alt="download" class="aligncenter size-full wp-image-1759" height="349" src="http://juluribk.com/wp-content/uploads/2016/03/download.png" width="567"&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="Publications"></category></entry><entry><title>Python code for generating plasmonic metal dielectric functions</title><link href="plasmon360.github.io/python-code-for-generating-plasmonic-metal-dielectric-functions.html" rel="alternate"></link><published>2015-09-10T08:54:00-07:00</published><updated>2015-09-10T08:54:00-07:00</updated><author><name>juluribk</name></author><id>tag:None,2015-09-10:plasmon360.github.io/python-code-for-generating-plasmonic-metal-dielectric-functions.html</id><summary type="html">&lt;p&gt;[latexpage]&lt;br&gt;
I keep needing a python code to generate the dielectric functions of plasmonic materials such as Au, Ag, Pd, and Pt. I wanted the dielectric functions called by other python codes such as &lt;a href="https://pypi.python.org/pypi/tmm"&gt;TMM&lt;/a&gt;. So I wrote a python version of LD.m&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.mathworks.com/matlabcentral/fileexchange/18040-drude-lorentz-and-debye-lorentz-models-for-the-dielectric-constant-of-metals-and-water"&gt;LD.m&lt;/a&gt; is a matlab file …&lt;/p&gt;</summary><content type="html">&lt;p&gt;[latexpage]&lt;br&gt;
I keep needing a python code to generate the dielectric functions of plasmonic materials such as Au, Ag, Pd, and Pt. I wanted the dielectric functions called by other python codes such as &lt;a href="https://pypi.python.org/pypi/tmm"&gt;TMM&lt;/a&gt;. So I wrote a python version of LD.m&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.mathworks.com/matlabcentral/fileexchange/18040-drude-lorentz-and-debye-lorentz-models-for-the-dielectric-constant-of-metals-and-water"&gt;LD.m&lt;/a&gt; is a matlab file written by Bora Ung that produces dielectric functions of metals either for Lortenz and Loretnz drude models. The dielectric functions are given as follows:&lt;/p&gt;
&lt;p&gt;\$\epsilon(\omega)=1-\frac{f_1\omega_p'\^2}{(\omega\^2+i\Gamma_1'\omega)}+\sum_{j=2}\^{n}\frac{f_j\omega_p'\^2}{(\omega_{o,j}'\^2-\omega\^2-i\Gamma_j'\omega)}\$.&lt;/p&gt;
&lt;p&gt;The first part of the function is the Drude part and the second part is the Lorentz part. The parameters for these models are taken from Rakic et al., Optical properties of metallic films for vertical-cavity optoelectronic devices, Applied Optics (1998).&lt;/p&gt;
&lt;p&gt;You can find my module (LD.py) and its documentation &lt;a href="https://github.com/plasmon360/LD_python"&gt;at my github account&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A typical example is shown below:&lt;/p&gt;
&lt;p&gt;[cc lang='python']&lt;br&gt;
from LD import LD # Make sure the file is accessible to PYTHONPATH or in the same directory of file which is trying to import&lt;br&gt;
import numpy as np&lt;br&gt;
lamda = np.linspace(300E-9,1000E-9,100) # Creates a wavelength vector from 300 nm to 1000 nm of length 100&lt;br&gt;
gold = LD(lamda, material = 'Au',model = 'LD') # Creates gold object with dielectric function of LD model&lt;br&gt;
print gold.epsilon_real # prints the real part of the epislion&lt;br&gt;
print gold.epsilon_imag # prints the imag part of the epsilon&lt;br&gt;
print gold.n # prints the real part of the refractive index&lt;br&gt;
print gold.k # prints the imag part of the refactive index&lt;br&gt;
gold.plot_epsilon() # plots wavelength vs real epilon and imag epsilon&lt;br&gt;
gold.plot_n_k() # plots wavelength vs n and k .&lt;br&gt;
[/cc]&lt;/p&gt;</content><category term="Publications"></category></entry><entry><title>DDSCAT on amazon EC2</title><link href="plasmon360.github.io/ddscat-on-amazon-ec2.html" rel="alternate"></link><published>2015-09-03T21:37:00-07:00</published><updated>2015-09-03T21:37:00-07:00</updated><author><name>juluribk</name></author><id>tag:None,2015-09-03:plasmon360.github.io/ddscat-on-amazon-ec2.html</id><summary type="html">&lt;p&gt;Amazon provides high performance computing capabilities through their EC2 service. You can find more information &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts.html"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;They provide a 750 hr free instance with their a &lt;a href="http://aws.amazon.com/free/"&gt;free-tier progra&lt;/a&gt;m. If you want more resources, you can pay for it. See the &lt;a href="https://aws.amazon.com/ec2/pricing/"&gt;pricing&lt;/a&gt;, pricing seem very reasonable.&lt;/p&gt;
&lt;p&gt;I wanted to see …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Amazon provides high performance computing capabilities through their EC2 service. You can find more information &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts.html"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;They provide a 750 hr free instance with their a &lt;a href="http://aws.amazon.com/free/"&gt;free-tier progra&lt;/a&gt;m. If you want more resources, you can pay for it. See the &lt;a href="https://aws.amazon.com/ec2/pricing/"&gt;pricing&lt;/a&gt;, pricing seem very reasonable.&lt;/p&gt;
&lt;p&gt;I wanted to see how easy it was to install ddscat and run some examples files.&lt;/p&gt;
&lt;p&gt;Amazon allows to create an instance through their very easy-to-use web interface. I chose to install ubuntu amazon machine image on the instance.  While you are creating an instance you are allowed to create a key pair file and download it.  You will need that to connect to amazon instance through ssh client with this key&lt;/p&gt;
&lt;p&gt;Fire up  terminal on a linux box and browse to the folder you have the key pair and issue these commands&lt;/p&gt;
&lt;p&gt;chmod 400 your-key-pair.pem&lt;/p&gt;
&lt;p&gt;Make ssh connection with a command like this&lt;/p&gt;
&lt;p&gt;ssh -i your-key-pair.pem ubuntu@ec2-xx-xx-100-1.compute-1.amazonaws.com&lt;br&gt;
here "ec2-xx-xx-100-1.compute-1.amazonaws.com" is your public dns address&lt;/p&gt;
&lt;p&gt;You should be able to log into the instance. If you get stuck, see detailed info at &lt;a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-connect-to-instance-linux.html"&gt;how to connect to the instance&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Update the package list from different repos with&lt;br&gt;
sudo apt-get update&lt;/p&gt;
&lt;p&gt;install these packages&lt;br&gt;
sudo apt-get install gfortran gcc wget make&lt;/p&gt;
&lt;p&gt;Make a directory for ddscat&lt;/p&gt;
&lt;p&gt;mkdir ddscat_install&lt;br&gt;
cd ddscat_install&lt;/p&gt;
&lt;p&gt;Download the source files and examples&lt;/p&gt;
&lt;p&gt;wget http://ddscat.wikidot.com/local--files/downloads/ddscat7.3.1_150420.tgz&lt;br&gt;
wget http://ddscat.wikidot.com/local--files/downloads/ddscat7.3.1_examples_150519.tgz&lt;/p&gt;
&lt;p&gt;Unzip them&lt;/p&gt;
&lt;p&gt;tar -xzvf ddscat7.3.1_150420.tgz&lt;/p&gt;
&lt;p&gt;tar -xzvf ddscat7.3.1_examples_150519.tgz&lt;/p&gt;
&lt;p&gt;rm *.tgz&lt;/p&gt;
&lt;p&gt;Go to the examples_exp folder&lt;/p&gt;
&lt;p&gt;cd /examples_exp&lt;/p&gt;
&lt;p&gt;To compile ddscat executable and run the examples:&lt;br&gt;
./run_examples&lt;/p&gt;
&lt;p&gt;ddscat executabe file should be created in the src folder, which you can use for your own ddscat test cases.&lt;/p&gt;
&lt;p&gt;To quit the ssh session, type&lt;br&gt;
'exit' in the command prompt&lt;/p&gt;
&lt;p&gt;So as you see, the process is very simple.&lt;/p&gt;</content><category term="Publications"></category></entry><entry><title>Plasmonic Materials in MEEP &gt; 1.2</title><link href="plasmon360.github.io/plasmonic-materials-in-meep-1-2.html" rel="alternate"></link><published>2015-06-13T16:59:00-07:00</published><updated>2015-06-13T16:59:00-07:00</updated><author><name>juluribk</name></author><id>tag:None,2015-06-13:plasmon360.github.io/plasmonic-materials-in-meep-1-2.html</id><summary type="html">&lt;p&gt;&lt;a href="http://juluribk.com/2011/04/27/plasmonic-materials-in-meep/" title="Plasmonic materials in MEEP"&gt;Here is&lt;/a&gt;how I was implementing plasmonic materials in meep1.1 scheme code. Unlike Meep 1. 1, Meep &amp;gt;= 1. 2 changed the way materials are defined. Here I will describe how to change the material definition code from meep1.1 to meep 1.2 . [Please note that one can still …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://juluribk.com/2011/04/27/plasmonic-materials-in-meep/" title="Plasmonic materials in MEEP"&gt;Here is&lt;/a&gt;how I was implementing plasmonic materials in meep1.1 scheme code. Unlike Meep 1. 1, Meep &amp;gt;= 1. 2 changed the way materials are defined. Here I will describe how to change the material definition code from meep1.1 to meep 1.2 . [Please note that one can still use the material definition written from Meep &amp;lt;1.2 for Meep &amp;gt;=1.2 but not vice versa]{style="color: #ff0000;"}.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Installation of Meep 1.2 on ubuntu&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can follow instructions given in &lt;a href="http://juluribk.com/2013/07/20/installing-meep-1-2-on-ubuntu/" title="Installing Meep 1.2 on ubuntu"&gt;my previous post&lt;/a&gt; to compile Meep 1.2 from the source code, but the procedure is outdated and one can use the recently pre-compiled meep packages (which is much easier)&lt;/p&gt;
&lt;p&gt;1) Updated computer to at least "The Utopic Unicorn" (Ubuntu 14.10). Meep 1.2 is compiled for this versions and above. U can see instructions here &lt;a href="http://www.ubuntu.com/download/desktop/upgrade"&gt;how to update ubuntu distribution&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;2) Install meep 1.2 (for serial version) by "sudo apt-get install meep h5utils"&lt;br&gt;
3) check it by "meep --version" and quit the program by "(exit)"&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Modifying the material definition type&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For meep 1.1, I used the following code to define silver material with lorentian model from Rakic et al with 100 nm length unit:&lt;/p&gt;
&lt;p&gt;[cc lang="scheme"]&lt;br&gt;
(define myAg (make dielectric (epsilon 1)&lt;br&gt;
(polarizations&lt;br&gt;
(make polarizability&lt;br&gt;
(omega 1e-20) (gamma 0.0038715) (sigma 4.4625e+39))&lt;br&gt;
(make polarizability&lt;br&gt;
(omega 0.065815) (gamma 0.31343) (sigma 7.9247))&lt;br&gt;
(make polarizability&lt;br&gt;
(omega 0.36142) (gamma 0.036456) (sigma 0.50133))&lt;br&gt;
(make polarizability&lt;br&gt;
(omega 0.66017) (gamma 0.0052426) (sigma 0.013329))&lt;br&gt;
(make polarizability&lt;br&gt;
(omega 0.73259) (gamma 0.07388) (sigma 0.82655))&lt;br&gt;
(make polarizability&lt;br&gt;
(omega 1.6365) (gamma 0.19511) (sigma 1.1133))&lt;br&gt;
)))&lt;/p&gt;
&lt;p&gt;[/cc]&lt;/p&gt;
&lt;p&gt;This was generated by my octave/matlab code (see the material_polarization_generator.m) in the &lt;a href="http://juluribk.com/wp-content/uploads/2011/04/reflection_meep_material_generator.zip"&gt;project file&lt;/a&gt;.  One can use the this file to generate code for other plasmonic materials.&lt;/p&gt;
&lt;p&gt;For Meep 1.2, I did the following changes to the above code&lt;/p&gt;
&lt;p&gt;changed the word "polarizations" to "E-susceptibilities"&lt;/p&gt;
&lt;p&gt;changed the work "polarizability" to "lorentzian-susceptibility"&lt;/p&gt;
&lt;p&gt;changed the word "omega" to "frequency"&lt;/p&gt;
&lt;p&gt;So the meep1.2 code looks like this:&lt;/p&gt;
&lt;p&gt;[cc lang="scheme"]&lt;/p&gt;
&lt;p&gt;(define myAg (make dielectric (epsilon 1)&lt;br&gt;
(E-susceptibilities&lt;br&gt;
(make lorentzian-susceptibility&lt;br&gt;
(frequency 1e-20) (gamma 0.0038715) (sigma 4.4625e+39))&lt;br&gt;
(make lorentzian-susceptibility&lt;br&gt;
(frequency 0.065815) (gamma 0.31343) (sigma 7.9247))&lt;br&gt;
(make lorentzian-susceptibility&lt;br&gt;
(frequency 0.36142) (gamma 0.036456) (sigma 0.50133))&lt;br&gt;
(make lorentzian-susceptibility&lt;br&gt;
(frequency 0.66017) (gamma 0.0052426) (sigma 0.013329))&lt;br&gt;
(make lorentzian-susceptibility&lt;br&gt;
(frequency 0.73259) (gamma 0.07388) (sigma 0.82655))&lt;br&gt;
(make lorentzian-susceptibility&lt;br&gt;
(frequency 1.6365) (gamma 0.19511) (sigma 1.1133))&lt;br&gt;
)))&lt;/p&gt;
&lt;p&gt;[/cc]&lt;/p&gt;
&lt;p&gt;This seems to work fine for me. I used this new code to calculate the reflection from a thin silver film (like the way i did in my previous post) and it matches with the analytical calculation.&lt;/p&gt;</content><category term="Plasmonics"></category><category term="electromagnetism"></category><category term="FDTD"></category><category term="MEEP"></category><category term="octave"></category><category term="Plasmonics"></category></entry><entry><title>Doorbell with NRF24L01 and Arduino</title><link href="plasmon360.github.io/doorbell-with-nrf24l01-and-arduino.html" rel="alternate"></link><published>2015-05-29T13:30:00-07:00</published><updated>2015-05-29T13:30:00-07:00</updated><author><name>juluribk</name></author><id>tag:None,2015-05-29:plasmon360.github.io/doorbell-with-nrf24l01-and-arduino.html</id><summary type="html">&lt;p&gt;My current apartment does not have a doorbell (Its strange but it is true). I went ahead and built a doorbell using two arduino pro-minis and two NRF24L01 transceivers. The melody to be played when a guest presses a button is controlled by me. I have four melodies programmed in …&lt;/p&gt;</summary><content type="html">&lt;p&gt;My current apartment does not have a doorbell (Its strange but it is true). I went ahead and built a doorbell using two arduino pro-minis and two NRF24L01 transceivers. The melody to be played when a guest presses a button is controlled by me. I have four melodies programmed in.&lt;/p&gt;
&lt;p&gt;Here it is in full action:&lt;/p&gt;
&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/wOZX-KPf5XA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Here are some details:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Remote&lt;/strong&gt;&lt;br&gt;
The schematic for the remote is shown below. The remote is configured to run on 2 AAA batteries and goes to sleep mode most of the time and then wakes up when a guest presses the button. This button press is transmitted to an NRF24L01 receiver on the doorbell by a NRF24L01 tranmisster. I decreased the overall current to 65 microA by removing the LED on the arduino pro mini and used rocket library sleep functions. This arduino pro mini was running at 3.3V and 8 MHz. Could have gone even further in current reduction by removing the board regulator, but I was happy with 65 microAmps. For AAA batteries, assuming 1000 mAh capacity, it should last around 20 months.&lt;/p&gt;
&lt;p&gt;Here are some pictures of the remote. I enclosed it into an eyewear case which turned out to be a nice enclosure.&lt;/p&gt;
&lt;p&gt;[gallery ids="1543,1544,1545"]&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Doorbell&lt;/strong&gt;&lt;br&gt;
The schematic for the doorbell is shown below. This circuit is powered by 9 V adapter from AC mains, which is  converted to a 5 V and 3.3 V by &lt;a href="http://www.ebay.com/itm/ICSA009A-Stable-Step-Down-Power-Supply-Module-3-3V-5V-for-MB-102-Breadboard-/221584526129"&gt;ICSA009&lt;/a&gt; breadboard adapter. I use 3.3 V to power the arduino pro-mini and NRF2L01 receiver. Other than that, nothing fancy here, but I have four doorbell melodies on the arduino that can be chosen with a DIP switch. Connecting buzzer directly to the arduino resulted in very less volume since arduino could source much current, so I connected it to 5V supply with 2N3409 transitor. &lt;a href="http://bryanduxbury.com/2012/01/20/one-transistor-audio-amplifier-for-arduino-projects/"&gt;The base of the transistor is controlled by an arduino pin in series with a 100 ohm resistor&lt;/a&gt;. I may just put the whole breadboard into a food storage container as a case.&lt;/p&gt;
&lt;p&gt;[gallery ids="1541,1542"]&lt;/p&gt;
&lt;p&gt;Arduino code:&lt;/p&gt;
&lt;p&gt;You can find my code at my &lt;a href="https://github.com/plasmon360/Arduino_NRF24L01_Doorbell_project"&gt;github account&lt;/a&gt;. Same code can be uploaded to both remote and doorbell arduino's.&lt;/p&gt;</content><category term="Publications"></category></entry><entry><title>Airtel tune on arduino</title><link href="plasmon360.github.io/airtel-tune-on-arduino.html" rel="alternate"></link><published>2015-05-21T19:54:00-07:00</published><updated>2015-05-21T19:54:00-07:00</updated><author><name>juluribk</name></author><id>tag:None,2015-05-21:plasmon360.github.io/airtel-tune-on-arduino.html</id><summary type="html">&lt;p&gt;For my doorbell project, I needed some melodies to be played on arduino. One can takes notes of a melody and write a corresponding arduino code.&lt;/p&gt;
&lt;p&gt;I like airtel tune and wanted to play it with arduino. I got the notes from https://www.youtube.com/watch?v=3m5j5UIRqQc&lt;/p&gt;
&lt;p&gt;Here …&lt;/p&gt;</summary><content type="html">&lt;p&gt;For my doorbell project, I needed some melodies to be played on arduino. One can takes notes of a melody and write a corresponding arduino code.&lt;/p&gt;
&lt;p&gt;I like airtel tune and wanted to play it with arduino. I got the notes from https://www.youtube.com/watch?v=3m5j5UIRqQc&lt;/p&gt;
&lt;p&gt;Here is the final result, where I use it in my doorbell project.&lt;/p&gt;
&lt;iframe width="420" height="315" src="https://www.youtube.com/embed/r5VJHr3noC0" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;My code is here:&lt;/p&gt;
&lt;p&gt;
&lt;script src="https://gist.github.com/plasmon360/ed5223a391370c61b4a3.js"&gt;&lt;/script&gt;
&lt;/p&gt;</content><category term="Publications"></category><category term="arduino"></category></entry><entry><title>Controlling Rigol Dp832 with python</title><link href="plasmon360.github.io/controlling-rigol-dp832-with-python.html" rel="alternate"></link><published>2015-05-08T17:08:00-07:00</published><updated>2015-05-08T17:08:00-07:00</updated><author><name>juluribk</name></author><id>tag:None,2015-05-08:plasmon360.github.io/controlling-rigol-dp832-with-python.html</id><summary type="html">&lt;p&gt;DC power supplies are very handy for electronic projects. They help to apply bias to a devicve. Controlling it by a computer by a program is helpful in advanced projects where timing and accurate control is an issue. I got my hands on a RIGOL DP832 which is three channel …&lt;/p&gt;</summary><content type="html">&lt;p&gt;DC power supplies are very handy for electronic projects. They help to apply bias to a devicve. Controlling it by a computer by a program is helpful in advanced projects where timing and accurate control is an issue. I got my hands on a RIGOL DP832 which is three channel (two 30V and one 5V) power supply and is programmable through SCPI commands. The device can be controlled by USB and rs232 (optionally by LAN). SCPI commands can be sent to the instruments using VISA interface. I used Python and pyvisa module to communicate with it. I wrote a class with basic functionality. Currently it has a console application and turning on and off at a  particular bias and current value on a specified channel.&lt;/p&gt;
&lt;p&gt;You can add more methods to the class for advanced features. You can see those commands in the &lt;a href="http://www.batronix.com/pdf/Rigol/ProgrammingGuide/DP800_ProgrammingGuide_EN.pdf"&gt;programming manual&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can find my gist underneath or [&lt;a href="https://gist.github.com/plasmon360/3204dc28deddeefe42d5"&gt;download from here.&lt;/a&gt;]{style="text-decoration: underline; color: #ff0000;"}&lt;/p&gt;
&lt;p&gt;
&lt;script src="https://gist.github.com/plasmon360/3204dc28deddeefe42d5.js"&gt;&lt;/script&gt;
&lt;/p&gt;</content><category term="Publications, Test Equipment"></category><category term="Instrumentation"></category><category term="python"></category></entry><entry><title>Hacking Weighing Scale to Upload Weight to Plotly using Raspberry Pi</title><link href="plasmon360.github.io/hacking-weighing-scale-to-upload-weight-to-plotly-using-raspberry-pi.html" rel="alternate"></link><published>2015-04-11T12:44:00-07:00</published><updated>2015-04-11T12:44:00-07:00</updated><author><name>juluribk</name></author><id>tag:None,2015-04-11:plasmon360.github.io/hacking-weighing-scale-to-upload-weight-to-plotly-using-raspberry-pi.html</id><summary type="html">&lt;p&gt;&lt;img alt="Weighing scale" class="aligncenter size-full wp-image-1512" height="228" src="http://juluribk.com/wp-content/uploads/2015/04/Picture7.png" width="902"&gt;&lt;/p&gt;
&lt;p&gt;I have been interested in monitoring and keep track of my weight. In the past, I have used phone apps for this purpose, works OK but I was thinking of reading weight information using some microcontroller from my weighing scale and upload the data to an online database. That means …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="Weighing scale" class="aligncenter size-full wp-image-1512" height="228" src="http://juluribk.com/wp-content/uploads/2015/04/Picture7.png" width="902"&gt;&lt;/p&gt;
&lt;p&gt;I have been interested in monitoring and keep track of my weight. In the past, I have used phone apps for this purpose, works OK but I was thinking of reading weight information using some microcontroller from my weighing scale and upload the data to an online database. That means that microcontroller should connect to my wi-fi connection at home and upload the data. I have seen some projects online that use an arduino for this purpose. They use arduino to serially send information to computer. The information on the computer can be potentially sent to an online database. One could also upload data directly from arduino to internet using a wifi shield, but this makes it more expensive. I was therefore more inclined towards Raspberry pi because it connects to wifi easily and can read data from weighing scale. I was also inclined in programming in python on raspberry pi rather than C, which I am not very proficient.&lt;/p&gt;
&lt;p&gt;Choice of weighing scale: I looked around some projects online and found a weighing scale here (&lt;a href="http://fivevolt.blogspot.com/2011/01/hacking-scale-to-add-zigbee-goodness.html"&gt;http://fivevolt.blogspot.com/2011/01/hacking-scale-to-add-zigbee-goodness.html&lt;/a&gt;) that seemed easy to get data from by reading the LED signals. I bought the same model for around 20 bucks at my local target. The first thing I notice after opening this scale was that it did not look similar to what was described at fivevolt blog. I did not see the four transistors and HC164 of which the author talks about in his blog. May be the manufacturer changed the design or they have different versions of it. I was disappointed.&lt;/p&gt;
&lt;p&gt;The PCB on the weighing scale had a epoxy covered region, which I presume is the microcontroller and it is connected to a big chip on the board. I looked at the name of the big chip on the pcb board and I can barely read TM1628. A simple google search revealed that it was an LED controller for the led display. The led display has four grids (digits). Each of this digit is a 8 segment display . TM1628 controls which grids and segments were to be lit or not (HI or LOW) . So I can see 12 wires going from LED controller to LED display ( four for grids and 8 for the 7 segment display). I could figure out which wires correspond to which grid and which segment and tried to solder wires. But that meant I have to read 12 digital signals (Hi or Low) using raspberry pi GPIO. This also looks very ugly too. So I decided to take a different route instead.&lt;/p&gt;
&lt;p&gt;A close inspection revealed that the microcontroller onboard was sending instructions to TM1628 with SPI protocol. So I intercept the voltage pulses (3.3V) using Raspberry Pi as shown in figure below. SPI bus consists of master and slave and has four lines in between them, which are MOSI, MISO, SCLK and SS (for more information see https://learn.sparkfun.com/tutorials/serial-peripheral-interface-spi).  In this case, the TM1628 is the slave and the microcontroller on board is the master. The slave does not send any data to the microcontroller so there is no MISO line. SCLK is the clock signal. MOSI and SS line are referred as DIO and STB respectively in the TM1628 manual.&lt;/p&gt;
&lt;p&gt;[caption id="attachment_1521" align="aligncenter" width="780"]&lt;a href="http://juluribk.com/wp-content/uploads/2015/04/Picture11.png"&gt;&lt;img alt="Picture1" class="wp-image-1521 size-large" height="532" src="http://juluribk.com/wp-content/uploads/2015/04/Picture11-1024x698.png" width="780"&gt;&lt;/a&gt; Schematic of the hacked weighing scale[/caption]&lt;/p&gt;
&lt;p&gt;After intercepting the STB, SCLK and DIO with raspberry pi as shown in the above figure, I used bitscope () to read these signals. A type pattern looks like this:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://juluribk.com/wp-content/uploads/2015/04/Picture2.png"&gt;&lt;img alt="Picture2" class="aligncenter size-large wp-image-1502" height="439" src="http://juluribk.com/wp-content/uploads/2015/04/Picture2-1024x576.png" width="780"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Each green line in the DIO contains data that is synced to STB and SCLK. When I zoom on the each green line I see the following:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://juluribk.com/wp-content/uploads/2015/04/Picture3.png"&gt;&lt;img alt="Picture3" class="aligncenter size-large wp-image-1503" height="440" src="http://juluribk.com/wp-content/uploads/2015/04/Picture3-1024x577.png" width="780"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Bits of data are being sent out in the DIO line at the rising edge of the clock signal.To decode these bytes, I wrote a python program ([source code link at the bottom of this post]{style="color: #ff0000;"}) that would capture those bits very fast using &lt;a href="http://abyz.co.uk/rpi/pigpio/python.html"&gt;PIGPIO&lt;/a&gt; library. When I just step on the weighing scale and get down, weighing scale displayed “0.0” for some time and then the display turns off. I was able to get the bytes for this action and start to decode according to the TM1628 manual. Below are the bytes being sent and the decoded information for the action of just stepping on and stepping of the weighing scale.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://juluribk.com/wp-content/uploads/2015/04/Picture4.png"&gt;&lt;img alt="Order of commands being sent" class="aligncenter size-large wp-image-1504" height="660" src="http://juluribk.com/wp-content/uploads/2015/04/Picture4-1024x866.png" width="780"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Command 1 and command 2 prepare the display. Command3 helps in preparing the grid/digit. It can be seen from the above figure, once a grid is prepared, a character is being written to that grid/digit. This process starts from the first grid and ends at the fifth grid. This cycle repeats many times. The cycle repeats so fast that we think the display is not changing.  I used the following cheat sheets for decoding the above data bytes. Following table is for command 3 where a certain grid/digit has to being chosen.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://juluribk.com/wp-content/uploads/2015/04/Picture6.png"&gt;&lt;img alt="Grid command" class="aligncenter wp-image-1506" height="268" src="http://juluribk.com/wp-content/uploads/2015/04/Picture6.png" width="790"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Following table is the bytes for displaying a certain character on a certain grid/digit&lt;/p&gt;
&lt;p&gt;&lt;a href="http://juluribk.com/wp-content/uploads/2015/04/Picture5.png"&gt;&lt;img alt="Decoding the bytes on weighing scale" class="aligncenter wp-image-1505" height="790" src="http://juluribk.com/wp-content/uploads/2015/04/Picture5.png" width="714"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Once I understood the commands being sent and how to interpret them, i wrote a python code that uses &lt;a href="http://abyz.co.uk/rpi/pigpio/python.html"&gt;PIGPIO&lt;/a&gt; to read these commands. I also added the capability to select a user with a rotary switch and assign weight information. A user can be guest, myself or my wife. Weight information is written to a file. Finally I also added code to upload the file to plotly for visualization.&lt;/p&gt;
&lt;p&gt;This is my final product&lt;/p&gt;
&lt;p&gt;[caption id="attachment_1510" align="aligncenter" width="596"]&lt;a href="http://juluribk.com/wp-content/uploads/2015/04/IMG_20150411_120429.jpg"&gt;&lt;img alt="IMG_20150411_120429" class="wp-image-1510" height="447" src="http://juluribk.com/wp-content/uploads/2015/04/IMG_20150411_120429.jpg" width="596"&gt;&lt;/a&gt; Hacked Weighing scale and control box[/caption]&lt;/p&gt;
&lt;p&gt;[caption id="attachment_1511" align="aligncenter" width="622"]&lt;a href="http://juluribk.com/wp-content/uploads/2015/04/IMG_20150411_120439.jpg"&gt;&lt;img alt="IMG_20150411_120439" class="wp-image-1511" height="467" src="http://juluribk.com/wp-content/uploads/2015/04/IMG_20150411_120439.jpg" width="622"&gt;&lt;/a&gt; Housing for Raspberry pi and Rotarty switch[/caption]&lt;/p&gt;
&lt;p&gt;&lt;a href="http://juluribk.com/wp-content/uploads/2015/04/Picture7.png"&gt;Below is the youtube video of how the program works (without plotly integration)&lt;br&gt;
&lt;iframe src="https://www.youtube.com/embed/KuFBi6P7Lm8" width="420" height="315" frameborder="0" allowfullscreen="allowfullscreen"&gt;&lt;/iframe&gt;&lt;br&gt;
Below is an image of my weight on plotly since last year. I am still overweight :(&lt;br&gt;
&lt;/a&gt;[&lt;a href="http://juluribk.com/wp-content/uploads/2015/04/plotly_image.png"&gt;&lt;img alt="plotly_image" class="aligncenter wp-image-1507" height="464" src="http://juluribk.com/wp-content/uploads/2015/04/plotly_image.png" width="727"&gt;&lt;/a&gt;]{style="color: #ff0000;"}&lt;/p&gt;
&lt;h2 id="python-source-code-can-be-downloaded-here." style="text-align: center;"&gt;[ [P&lt;a href="https://gist.github.com/plasmon360/ab314441efec4c7b4298"&gt;ython Source code can be downloaded here&lt;/a&gt;.]{style="text-decoration: underline;"}]{style="color: #ff0000;"}&lt;/h2&gt;</content><category term="Test Equipment"></category><category term="python"></category></entry><entry><title>Controlling Newport 1918 Power Meter with Python</title><link href="plasmon360.github.io/newport-1918-power-meter-with-python.html" rel="alternate"></link><published>2015-04-04T12:23:00-07:00</published><updated>2015-04-04T12:23:00-07:00</updated><author><name>juluribk</name></author><id>tag:None,2015-04-04:plasmon360.github.io/newport-1918-power-meter-with-python.html</id><summary type="html">&lt;p&gt;&lt;a href="http://juluribk.com/wp-content/uploads/2015/04/23632.jpg"&gt;&lt;img alt="Newport 1918 power meter" class="aligncenter size-medium wp-image-1456" height="225" src="http://juluribk.com/wp-content/uploads/2015/04/23632-300x225.jpg" width="300"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Optical power meters in-conjunction with a detector are used to measure power from a laser source or monochromatic output. At work, we use &lt;a href="http://www.newport.com/Optical-Power-Meter-High-Performance-Hand-Held-19/509478/1033/info.aspx" title="Newport 1918"&gt;Newport 1918&lt;/a&gt; power meter. This power meter comes with its own &lt;a href="http://www.newport.com/Optical-Power-Meter-High-Performance-Hand-Held-19/509478/1033/info.aspx#tab_Literature" title="software"&gt;software&lt;/a&gt;. However, I was interested in controlling this instrument with python. I made a class for …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://juluribk.com/wp-content/uploads/2015/04/23632.jpg"&gt;&lt;img alt="Newport 1918 power meter" class="aligncenter size-medium wp-image-1456" height="225" src="http://juluribk.com/wp-content/uploads/2015/04/23632-300x225.jpg" width="300"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Optical power meters in-conjunction with a detector are used to measure power from a laser source or monochromatic output. At work, we use &lt;a href="http://www.newport.com/Optical-Power-Meter-High-Performance-Hand-Held-19/509478/1033/info.aspx" title="Newport 1918"&gt;Newport 1918&lt;/a&gt; power meter. This power meter comes with its own &lt;a href="http://www.newport.com/Optical-Power-Meter-High-Performance-Hand-Held-19/509478/1033/info.aspx#tab_Literature" title="software"&gt;software&lt;/a&gt;. However, I was interested in controlling this instrument with python. I made a class for this instrument . If you are interested you can download it at my &lt;strong&gt;&lt;a href="https://github.com/plasmon360/python_newport_1918_powermeter" title="Documentation and Github Repositry"&gt; Github repostitory&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This python module contains higher level functions to communicate with &lt;a href="http://www.newport.com/1918-R-HandHeld-Optical-Power-and-Energy-Meter/509478/1033/info.aspx#tab_Overview"&gt;Newport 1918 power meter&lt;/a&gt; on a Windows computer. It uses python ctypes to access methods in the Newport's usbdll.dll driver.&lt;/p&gt;
&lt;p&gt;For connecting the hardware to the computer, see the &lt;a href="http://assets.newport.com/webDocuments-EN/images/RevA1918-RPowerMeterUsersManual.pdf"&gt;reference manual&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a class="anchor" href="https://github.com/plasmon360/python_newport_1918_powermeter#installing-the-powermeter-and-usbdriver" id="user-content-installing-the-powermeter-and-usbdriver"&gt;&lt;/a&gt;Installing the powermeter and usbdriver&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://assets.newport.com/webDocuments-EN/images/Computer_Interface_Software_v3.0.2.zip"&gt;Click here to download the newport powermeter Application and driver&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On a 32 bit computer:&lt;ol&gt;
&lt;li&gt;Unzip the file&lt;/li&gt;
&lt;li&gt;Install the drivers and the power application found PowerMeter 3.0.2\win32&lt;/li&gt;
&lt;li&gt;run both PMSetup32.msi and USBDriverSetup32.msi (in sub folder). This should install drivers and the newport powermeter application at C:\Program Files\Newport&lt;/li&gt;
&lt;li&gt;LIBNAME (argument that is needed to intialize the instrument) in the case will be r'C:\Program Files\Newport\Newport USB Driver\Bin\usbdll.dll'&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;On a 64 bit computer:&lt;ol&gt;
&lt;li&gt;Unzip the file.&lt;/li&gt;
&lt;li&gt;Install the drivers and the power application found PowerMeter 3.0.2\x86Onx64&lt;/li&gt;
&lt;li&gt;run both PMSetup32on64.msi and USBDriverSetup32on64.msi (in sub folder). This should install drivers and the newport powermeter application at C:\Program Files (x86)\Newport&lt;/li&gt;
&lt;li&gt;LIBNAME (argument that is needed to intialize the instrument) in the case will be r'C:\Program Files (x86)\Newport\Newport USB Driver\Bin\usbdll.dll'&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Before you run the python module, make sure that you can run the newport powermeter application. This will ensure that the drivers are installed properly and there is no problem communicating with the instrument.&lt;/p&gt;
&lt;h2&gt;&lt;a class="anchor" href="https://github.com/plasmon360/python_newport_1918_powermeter#getting-the-product-id" id="user-content-getting-the-product-id"&gt;&lt;/a&gt;Getting the Product ID&lt;/h2&gt;
&lt;p&gt;The variable "product_id" is needed to intialize the instrument. For my case, the product_id was 0xCEC7. I am not sure if this will change on another computer. To find the product_id or PID,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open the Windows Device Manager&lt;/li&gt;
&lt;li&gt;Expand the Human Interface Devices node&lt;/li&gt;
&lt;li&gt;Double-click the device of interest -- the USB Human Interface Device Properties window appears&lt;/li&gt;
&lt;li&gt;Click the Details tab.&lt;/li&gt;
&lt;li&gt;In the Property drop-down box, select Hardware Ids. The product id is some thinglike PID_ABC1, then use product_id = 0xABC1.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href="http://thecurlybrace.blogspot.com/2010/07/how-to-find-usb-device-vendor-and.html"&gt;See Here fore more detailed explaination !&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;&lt;a class="anchor" href="https://github.com/plasmon360/python_newport_1918_powermeter#additional-notes" id="user-content-additional-notes"&gt;&lt;/a&gt;Additional notes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There are many methods in the usbdll.dll, you can see all the methods in &lt;a href="https://github.com/plasmon360/python_newport_1918_powermeter/blob/master/NewpDll.h"&gt;NewPDll.h&lt;/a&gt;. The methods I use to connect/disconnection and read/write commands are:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;newp_usb_init_system - this function opens all USB instruments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;newp_usb_get_device_info - this function retrieves the USB address of all open instruments.&lt;/li&gt;
&lt;li&gt;newp_usb_get_ascii - this function reads the response data from an instrument.&lt;/li&gt;
&lt;li&gt;newp_usb_send_ascii - this function sends the passed in command to an instrument.&lt;/li&gt;
&lt;li&gt;newp_usb_send_binary - this function sends the passed in binary data to an instrument.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;newp_usb_uninit_system - this function closes all USB instruments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A full list of commands that can be sent to the instrument can be found in the &lt;a href="http://assets.newport.com/webDocuments-EN/images/RevA1918-RPowerMeterUsersManual.pdf"&gt;reference manual&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Test Equipment"></category><category term="Instrumentation"></category><category term="python"></category></entry><entry><title>DIY Audio cables using CAT5</title><link href="plasmon360.github.io/diy-audio-cables-using-cat5.html" rel="alternate"></link><published>2014-09-20T23:09:00-07:00</published><updated>2014-09-20T23:09:00-07:00</updated><author><name>juluribk</name></author><id>tag:None,2014-09-20:plasmon360.github.io/diy-audio-cables-using-cat5.html</id><summary type="html">&lt;p&gt;Inspired by the &lt;a href="http://www.audioholics.com/gadget-reviews/diy-speaker-cable-faceoff/diy-cable-faceoff-results-and-conclusion"&gt;article on speaker cables&lt;/a&gt;, I built the CAT5 V3 version of the speaker cable. Following are the images of how I made them. I have access to a precise LCR meter and will measure R, L and C as function of frequencies shortly. The capacitance of the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Inspired by the &lt;a href="http://www.audioholics.com/gadget-reviews/diy-speaker-cable-faceoff/diy-cable-faceoff-results-and-conclusion"&gt;article on speaker cables&lt;/a&gt;, I built the CAT5 V3 version of the speaker cable. Following are the images of how I made them. I have access to a precise LCR meter and will measure R, L and C as function of frequencies shortly. The capacitance of the cat5 speaker cables is known to be high.&lt;/p&gt;
&lt;p&gt;[gallery ids="1082,1083,1084,1085,1086,1087,1088"]&lt;/p&gt;</content><category term="Publications"></category></entry><entry><title>Controlling SP2150i monochromator with Python/PyVisa</title><link href="plasmon360.github.io/controlling-sp2150i-monochromator-with-pythonpyvisa.html" rel="alternate"></link><published>2014-09-19T18:28:00-07:00</published><updated>2014-09-19T18:28:00-07:00</updated><author><name>juluribk</name></author><id>tag:None,2014-09-19:plasmon360.github.io/controlling-sp2150i-monochromator-with-pythonpyvisa.html</id><summary type="html">&lt;p&gt;Monochromator is used in optics research where a narrow bandwidth of light is required to be illuminated on a sample. I work with Princeton Instruments Acton SP2150i and needed a python program to control it.&lt;/p&gt;
&lt;p&gt;I found the manual &lt;a href="ftp://ftp.princetoninstruments.com/public/Manuals/Acton/SP-2150i.pdf"&gt;here&lt;/a&gt; and on page 9-10, I saw the serial commands for …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Monochromator is used in optics research where a narrow bandwidth of light is required to be illuminated on a sample. I work with Princeton Instruments Acton SP2150i and needed a python program to control it.&lt;/p&gt;
&lt;p&gt;I found the manual &lt;a href="ftp://ftp.princetoninstruments.com/public/Manuals/Acton/SP-2150i.pdf"&gt;here&lt;/a&gt; and on page 9-10, I saw the serial commands for various functions (such as changing filters, moving the grating, etc).&lt;/p&gt;
&lt;p&gt;To control the instrument with my windows computer, I followed these steps:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1) Connect a usb cable between SP2150 and a computer&lt;/strong&gt;&lt;br&gt;
I used the port "USB" and not the "USB hub".&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2) Installing the monochromator drivers and Monocontrol software:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Turned on the monochromator and when prompted, I Installed Princeton Instruments VCP drivers (version 2.08.08). These drivers should be in Acton Monochromator Control Software installation Disk.  If the drivers are installed properly, you should see the monochromator as a Princeton Instruments Spectral device(COMx), in the device manager. x could be any number.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://juluribk.com/wp-content/uploads/2014/09/device_manager_11.png"&gt;&lt;img alt="device_manager_1" class="aligncenter" height="414" src="http://juluribk.com/wp-content/uploads/2014/09/device_manager_11.png" width="575"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Before attempting to control the instrument with python/pyvisa, I checked if the computer can communicate with monochromator using  "MonoControl". See the installation instructions &lt;a href="ftp://ftp.princetoninstruments.com/public/Manuals/Acton/Monochromator_Control_Software_Manual.pdf"&gt;here&lt;/a&gt; . Monocontrol allows for control of monochromator which will open a windows like this:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://juluribk.com/wp-content/uploads/2014/09/monocontrol1.png"&gt;&lt;img alt="monocontrol1" class="wp-image-1322 aligncenter" height="410" src="http://juluribk.com/wp-content/uploads/2014/09/monocontrol1.png" width="512"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you cannot reach this stage, then there is some problem with drivers and need to be fixed before you can use python/pyvisa to control the instrument. Close this software if you want to use it with pyvisa.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3) Install NI-VISA runtime &lt;/strong&gt;&lt;br&gt;
I downloaded the exe from National Instruments and installed it. This should provide the required visa32.dll&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4) Install python2.7 and Pyvisa &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You can install pyvisa using Pip&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5) Python code&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I wrote a module that can be used to control the monochromator using pyvisa commands. The module provides a class definition and some high level functions. For the line, "self.m=instrument('COM7', timeout = 10)", change 7 to the right com port number. The number should match the com port number shown in the device manager. This module can be loaded into other python codes and the high level functions can be used to write even higher level functions (for example, see the code after if __name__ == "__main__":) . The specifics of the code are valid for the set of filters,turrets and gratings I use in my instrument, but the program can be used for other cases with slight modifications. You can also download the code &lt;a href="http://juluribk.com/wp-content/uploads/2014/09/SP2150i.txt"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em id="__mceDel"&gt; [cc lang="python"]&lt;br&gt;
"""&lt;br&gt;
Created on Fri Sep 19 18:11:40 2014&lt;/p&gt;
&lt;p&gt;@author: Bala Krishna Juluri&lt;br&gt;
"""&lt;/p&gt;
&lt;p&gt;from visa import *&lt;br&gt;
import time&lt;br&gt;
#assumes connected with USB. Drivers are installed. Needs pyvisa for communication.&lt;br&gt;
# There is no need to use visa write command for SP2150. because all commands are ask type (you write something and get a confirmation back saying OK)&lt;br&gt;
# filter 1 is no filter&lt;br&gt;
# filter 2 is in 320 nm long pass filter&lt;br&gt;
# filter 3 is 590 long pass filter cutoff&lt;br&gt;
# filter 4 is 715 long pass filter&lt;br&gt;
# filter 5 is 1250 long pass filter&lt;br&gt;
#filter 6 is block&lt;/p&gt;
&lt;p&gt;class SP2150i():&lt;br&gt;
def __init__(self):&lt;br&gt;
#self.m=instrument(get_instruments_list()[0])&lt;br&gt;
try:&lt;br&gt;
print get_instruments_list()&lt;br&gt;
self.m=instrument('COM7', timeout = 10) #he default timeout is 5 sec, change the timeout if needed&lt;br&gt;
except:&lt;br&gt;
print "Check if monochromotor is connected to right COM port of instrument list (see control panel, hardward devices). Cannot connect to monochromator. Check connection. Check drivers"&lt;/p&gt;
&lt;p&gt;def get_nm(self):&lt;br&gt;
self.curr_nm=self.m.ask_for_values('?NM')&lt;br&gt;
return self.curr_nm&lt;/p&gt;
&lt;p&gt;def get_nm_per_min(self):&lt;br&gt;
self.curr_nm_min=self.m.ask_for_values('?NM/MIN')&lt;br&gt;
return self.curr_nm_min&lt;/p&gt;
&lt;p&gt;def get_serial_model(self):&lt;br&gt;
self.serial_no=self.m.ask_for_values('SERIAL')&lt;br&gt;
self.model_no=self.m.ask_for_values('MODEL')&lt;br&gt;
return self.serial_no,self.model_no&lt;/p&gt;
&lt;p&gt;def goto_nm_max_speed(self,nm):&lt;br&gt;
self.m.ask('%0.2f GOTO' % nm)&lt;/p&gt;
&lt;p&gt;def get_turret(self):&lt;br&gt;
self.turret=self.m.ask_for_values('?TURRET')&lt;br&gt;
return self.turret&lt;/p&gt;
&lt;p&gt;def get_filter(self):&lt;br&gt;
self.filter=self.m.ask_for_values('?FILTER')&lt;br&gt;
time.sleep(2)&lt;br&gt;
return self.filter&lt;/p&gt;
&lt;p&gt;def get_grating(self):&lt;br&gt;
self.grating=self.m.ask_for_values('?GRATING')&lt;br&gt;
return self.grating&lt;/p&gt;
&lt;p&gt;def set_turret(self,num):&lt;br&gt;
if num &amp;lt;=2:&lt;br&gt;
self.m.ask(str(int(num))+ ' TURRET')&lt;br&gt;
else:&lt;br&gt;
print "There is not turret with this input"&lt;/p&gt;
&lt;p&gt;def set_filter(self,num):&lt;br&gt;
if num &amp;lt;=6:&lt;br&gt;
self.m.ask(str(int(num))+ ' FILTER')&lt;br&gt;
print "Filter changed and waiting with additional delay..."&lt;br&gt;
time.sleep(1) # Additional delay, just in case.&lt;br&gt;
print "Done waiting"&lt;br&gt;
else:&lt;br&gt;
print "There is no filter with this input"&lt;/p&gt;
&lt;p&gt;def set_grating(self,num):&lt;br&gt;
if num&amp;lt;=2:&lt;br&gt;
self.m.ask(str(int(num))+ ' GRATING')&lt;br&gt;
#time.sleep(5) # Additional delay, just in case&lt;br&gt;
else:&lt;br&gt;
print "There is no grating with this input"&lt;/p&gt;
&lt;p&gt;def goto_nm_with_set_nm_per_min(self,nm,nm_per_min):&lt;br&gt;
self.m.ask('%0.2f NM/MIN' % nm_per_min)&lt;br&gt;
self.m.ask('%0.2f &amp;gt;NM' % nm)&lt;br&gt;
char=0&lt;br&gt;
while char!=1:&lt;br&gt;
s=self.m.ask('MONO-?DONE')&lt;br&gt;
char=int(s[2])&lt;br&gt;
#print "Current wavelength is "+ self.m.ask('?NM')&lt;br&gt;
time.sleep(.2)&lt;br&gt;
print "Scan done?: "+'yes' if char == 1 else 'No'&lt;br&gt;
self.m.ask('MONO-STOP')&lt;br&gt;
return self.m.ask_for_values('?NM')&lt;/p&gt;
&lt;p&gt;if __name__ == "__main__":&lt;br&gt;
#This part of the codes uses the SP2150i class to do a wavelength scan&lt;br&gt;
a=SP2150i()&lt;br&gt;
print a.get_serial_model()&lt;br&gt;
print a.get_grating()&lt;br&gt;
print a.get_filter()&lt;br&gt;
print a.get_nm_per_min()&lt;br&gt;
print a.get_nm()&lt;br&gt;
a.set_grating(2) # can only take 1 or 2 as input&lt;/p&gt;
&lt;p&gt;start_wave=500&lt;br&gt;
end_wave=1000&lt;br&gt;
delta_wave=20&lt;br&gt;
speed_nm_per_min=2000&lt;br&gt;
a.set_filter(2) # this applies the 320 nm filter in the beginning&lt;br&gt;
for i in xrange(start_wave,end_wave,delta_wave):&lt;br&gt;
print "----------------------------"&lt;br&gt;
print "Wavelength input is %0.2f nm" % i&lt;br&gt;
wave=a.goto_nm_with_set_nm_per_min(i,speed_nm_per_min)&lt;/p&gt;
&lt;p&gt;if i &amp;lt;= 370 and i+delta_wave &amp;gt;= 370:&lt;br&gt;
a.set_filter(2)&lt;/p&gt;
&lt;p&gt;if i &amp;lt;= 660 and i+delta_wave &amp;gt;= 660:&lt;br&gt;
a.set_filter(3)&lt;/p&gt;
&lt;p&gt;if i &amp;lt;= 775 and i+delta_wave &amp;gt;= 775:&lt;br&gt;
a.set_filter(4)&lt;/p&gt;
&lt;p&gt;if i &amp;lt;= 1300 and i+delta_wave &amp;gt;= 1300:&lt;br&gt;
a.set_filter(5)&lt;/p&gt;
&lt;p&gt;print "Wavelength output is "+str(wave[0])+ " nm"&lt;br&gt;
print "----------------------------"&lt;/p&gt;
&lt;p&gt;print "Resetting the monochromator to home position"&lt;br&gt;
a.goto_nm_max_speed(400)&lt;br&gt;
a.set_filter(1)&lt;br&gt;
print "Position to home at " + str(a.get_nm()[0]) + " nm"+ ' and filter has been reset to ' + str(a.get_filter()[0])&lt;br&gt;
print "Monochromator scan done. Have a nice day!"&lt;/p&gt;
&lt;p&gt;[/cc]&lt;/p&gt;</content><category term="Test Equipment"></category></entry><entry><title>Installing Meep 1.2 on ubuntu</title><link href="plasmon360.github.io/installing-meep-1-2-on-ubuntu.html" rel="alternate"></link><published>2013-07-20T18:50:00-07:00</published><updated>2013-07-20T18:50:00-07:00</updated><author><name>juluribk</name></author><id>tag:None,2013-07-20:plasmon360.github.io/installing-meep-1-2-on-ubuntu.html</id><summary type="html">&lt;p&gt;Pre-compiled Meep binaries for meep1.1 exist for Ubuntu distribution. This makes it very easy to install meep on ubuntu using “apt-get install” command or from the ubuntu software center. However recently, Meep developers have release meep1.2 which has more functions compared to meep1.1. I have recently installed …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Pre-compiled Meep binaries for meep1.1 exist for Ubuntu distribution. This makes it very easy to install meep on ubuntu using “apt-get install” command or from the ubuntu software center. However recently, Meep developers have release meep1.2 which has more functions compared to meep1.1. I have recently installed meep1.2 from source on ubuntu 12.04 using the instructions shown at &lt;a href="http://ab-initio.mit.edu/wiki/index.php/Meep_Installation"&gt;http://ab-initio.mit.edu/wiki/index.php/Meep_Installation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I have root access to my computer, so I installed all the libraries/bin files in their default location (i.e, libraries go in /usr/local/lib, programs in /usr/local/bin, etc)&lt;/p&gt;
&lt;p&gt;These are the steps I followed:&lt;/p&gt;
&lt;p&gt;1) To avoid any complications, I uninstalled meep1.1 and meep-openmpi, which were installed earlier on my ubuntu system from the software center.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2) Setting the environmental variables:&lt;/strong&gt;&lt;br&gt;
export LDFLAGS="-L/usr/local/lib"&lt;br&gt;
export CPPFLAGS="-I/usr/local/include"&lt;br&gt;
export LD_LIBRARY_PATH="/usr/local/lib:\$LD_LIBRARY_PATH"&lt;/p&gt;
&lt;p&gt;3) I installed G77, gfortran, f77, g++ and make packages on my system. I installed g++ and make using “sudo apt-get install build-essential”. Some of the packages might have been pre-installed.&lt;/p&gt;
&lt;p&gt;4)&lt;strong&gt;Installing blas and lapack&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As said at &lt;a href="http://ab-initio.mit.edu/wiki/index.php/Meep_Installation"&gt;http://ab-initio.mit.edu/wiki/index.php/Meep_Installation&lt;/a&gt;, Openblas at &lt;a href="http://xianyi.github.io/OpenBLAS/"&gt;http://xianyi.github.io/OpenBLAS/&lt;/a&gt; should install both blas and lapack libraries. I downloaded the tar file from the website and extracted it. Then I cd’ed into that folder and issued a “make” command. I had some problems with “make” command as it was using f77 for compiling and was throwing an error. After some search, I found that “make FC=gfortran NO_AFFINITY=1 USE_OPENMP=1” solves this problem. This resulted in “libopenblas.a” in /usr/local/lib folder.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5) Installing Harminv&lt;/strong&gt;&lt;br&gt;
I downloaded the tar file from &lt;a href="http://ab-initio.mit.edu/wiki/index.php/Harminv"&gt;http://ab-initio.mit.edu/wiki/index.php/Harminv&lt;/a&gt;. Extracted the tar file and cd’ed into it. I installed the harminv using ./configure, make and sudo make commands as said at " title="http://ab-initio.mit.edu/wiki/index.php/Harminv"&amp;gt;http://ab-initio.mit.edu/wiki/index.php/Harminv_installation This resulted in “libharminv.a”. Harminv required blas and lapack installed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6) Installing Guile&lt;/strong&gt;&lt;br&gt;
This was simple. I used the command “sudo apt-get install guile-2.0” and “sudo apt-get install guile-2.0-dev”&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;7) Installing libctl&lt;/strong&gt;&lt;br&gt;
Downloaded the tar file, extracted it, cd’ed into it. I followed ./configure, make and sudo make commands as told on at &lt;a href="http://ab-initio.mit.edu/wiki/index.php/Libctl"&gt;http://ab-initio.mit.edu/wiki/index.php/Libctl&lt;/a&gt; and after the process I saw libctl.a in the /usr/local/lib folder.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8) Installing hdf5&lt;/strong&gt;&lt;br&gt;
I downloaded the hdf5 tar file from &lt;a href="http://www.hdfgroup.org/ftp/HDF5/releases/hdf5-1.8.8/src"&gt;hdf5-1.8.8 source page&lt;/a&gt;. I used 1.8.8 version (no special reason for this version). Extracted the tar file. Cd’ed into the folder and use “./configure, make, make install” . It took a while for this to complete. At the end, I saw all the libraries, executables and include files were placed in “hdf5” sub-folder. I saw “bin”,”include”,”share”,”lib” inside this sub-folder. I figured they should be placed at default locations so I issued following commands inside the hdf5-1.8.6 folder&lt;br&gt;
sudo cp hdf5/bin/* /usr/local/bin/&lt;br&gt;
sudo cp hdf5/lib/* /usr/local/lib/&lt;br&gt;
sudo cp hdf5/include/* /usr/local/include/&lt;br&gt;
sudo cp hdf5/share/* /usr/local/share/&lt;br&gt;
By the end of the process, I saw libhdf5.a in the /usr/local/lib. I did not enable MPI parallel I/O support in hdf5.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;9) Installing meep&lt;/strong&gt;&lt;br&gt;
I downloaded the tar file from &lt;a href="http://ab-initio.mit.edu/wiki/index.php/Meep_download"&gt;meep downloaded page&lt;/a&gt; and then extracted it. Then I cd’ed into that folder and issued “./configure” command. I had no errors as guile, libctl, harminv, hdf5 libraries were all available. See my &lt;a href="http://juluribk.com/wp-content/uploads/2013/07/configure_log_file.txt"&gt;configure_log_file&lt;/a&gt;. Then “make” and then “sudo make install” commands were issued. I did not enabled parallel version for this post. This resulted in meep executable in “/usr/local/bin” folder. I renamed it to meep12 (sudo mv /usr/local/bin/meep meep12) so that I know that it is running meep1.2 and not to confuse with meep1.1.  Now I opened a new terminal and issued “/usr/local/bin/meep12” to run meep1.2. you should see:&lt;br&gt;
“GNU Guile 2.0.5-deb+1-1&lt;br&gt;
Copyright (C) 1995-2012 Free Software Foundation, Inc.&lt;br&gt;
Guile comes with ABSOLUTELY NO WARRANTY; for details type `,show w'.&lt;br&gt;
This program is free software, and you are welcome to redistribute it&lt;br&gt;
under certain conditions; type `,show c' for details.&lt;br&gt;
Enter `,help' for help.&lt;br&gt;
”&lt;/p&gt;
&lt;p&gt;In future, I will post some meep examples that use the added functionalities of meep1.2. Stay tuned!&lt;/p&gt;</content><category term="Plasmonics, Researc"></category><category term="electromagnetism"></category><category term="FDTD"></category><category term="MEEP"></category><category term="Plasmonics"></category></entry><entry><title>Electric field at localized plasmon resonance using MEEP</title><link href="plasmon360.github.io/electric-field-at-localized-plasmon-resonance-using-meep.html" rel="alternate"></link><published>2013-01-22T15:00:00-08:00</published><updated>2013-01-22T15:00:00-08:00</updated><author><name>juluribk</name></author><id>tag:None,2013-01-22:plasmon360.github.io/electric-field-at-localized-plasmon-resonance-using-meep.html</id><summary type="html">&lt;p&gt;This article is about simulating localized plasmon resonances in metal nanospheres using MEEP package. Generally, I am interested in solving three problems in LSPR systems:&lt;/p&gt;
&lt;ol&gt;
&lt;ol&gt;
1.  **Calculate the extinction, scattering, absorption spectra of metal nanoparticle**  
   The procedure for doing this is very similar to the method I mentioned [here](http …&lt;/ol&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;This article is about simulating localized plasmon resonances in metal nanospheres using MEEP package. Generally, I am interested in solving three problems in LSPR systems:&lt;/p&gt;
&lt;ol&gt;
&lt;ol&gt;
1.  **Calculate the extinction, scattering, absorption spectra of metal nanoparticle**  
   The procedure for doing this is very similar to the method I mentioned [here](http://juluribk.com/2011/06/01/scattering-extinction-absorption-cross-sections-of-silver-nanowires-infinite-cylinders-using-meep/ "here").
2.  **Calculating the electric field enhancement spatially as function of wavelength**  
   This involves taking electric field distributions with a particle in time domain and taking FFT of them. Also to be noted is that the electric fields near the particle should be normalized with electric fields with no nanoparticle. This has to be done by an external program like octave/matlab. One has to do this for three components of electric field in two planes. This was the tough part to pull off.
3.  **Calculate electric field at plasmon resonance as function of time**This was very easy. Get the electric fields at certain wavelength and then multiply it with a time varying sin function.

&lt;/ol&gt;
&lt;/ol&gt;

&lt;p&gt;Below are some results for a silver sphere of 25 nm radius. I am happy with these results. They seem to match the analytical results. Some of the animations are large in size and may take time to load on your browser.&lt;/p&gt;
&lt;p&gt;[gallery link="file" ids="1413,1409,1410,1411,1412,1414,1415"]&lt;/p&gt;
&lt;p&gt;[Update1:]{style="color: #ff0000;"} You can find my project file &lt;a href="http://juluribk.com/wp-content/uploads/2013/01/silver_sphere_efficiencies_enhancement_for_website.zip"&gt;HERE&lt;/a&gt;. Enjoy!&lt;br&gt;
(please remember that the project file is designed to run on ubuntu like system with meep and octave installed. The shell script does everything needed to get the results, make sure to "chmod" the shell file, so that you can run the file. In addition, also make sure to increase the resl (resolution) from 10 to 50 for decent results. This means it will take longer time to run the simulation. The results you see in this post were generated by resl=100 and it took 2 days to run on my computer. If you find any bugs, please let me know.)&lt;/p&gt;
&lt;p&gt;[Update2:]{style="color: #ff0000;"} This method also works well for gold nano-particles of 50 nm radius. See the last figure in above album.&lt;/p&gt;</content><category term="Plasmonics, Publications"></category><category term="electromagnetism"></category><category term="FDTD"></category><category term="MEEP"></category><category term="Plasmonics"></category></entry><entry><title>Building my new desktop system</title><link href="plasmon360.github.io/building-my-new-desktop-system.html" rel="alternate"></link><published>2012-11-17T13:20:00-08:00</published><updated>2012-11-17T13:20:00-08:00</updated><author><name>juluribk</name></author><id>tag:None,2012-11-17:plasmon360.github.io/building-my-new-desktop-system.html</id><summary type="html">&lt;p&gt;As I had access to great workstations at my previous labs, I never needed a personal desktop system to do heavy duty operations such as running simulations, photo/video editing etc. But now that I moved out of graduate school and have some money to spend, I am finding myself …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As I had access to great workstations at my previous labs, I never needed a personal desktop system to do heavy duty operations such as running simulations, photo/video editing etc. But now that I moved out of graduate school and have some money to spend, I am finding myself more in need for a good desktop system. My plan with a new system is to make more tutorials on plasmonics and do more photo editing (now that I own a Nikon D5100). I currently have three old laptops, but all of them are just good enough for browsing but not any of things I want to do. I have a &lt;a href="http://www.dell.com/us/business/p/precision-t5500/pd"&gt;great system&lt;/a&gt; at my current workspace, but I do not want to use it for my personal adventures. :)&lt;/p&gt;
&lt;p&gt;I could have bought a pre-installed system, but there is no fun in it :). In some cases, buying a pre-configured system may be a little bit cheaper, but at an expense of no flexibility and customization. I have never assembled a system before, so I thought it will be a good learning process. I decided to build a personal system couple of months ago and I wanted to get decent stuff at a good price and time was no factor as I am in no hurry.&lt;/p&gt;
&lt;p&gt;Justin (my colleague) referred me to a great website called &lt;a href="http://pcpartpicker.com/"&gt;pc partpicker&lt;/a&gt;. Here one can make their own builds based on user ratings, prices. One can set alerts for any price drops. Alternatively, we would also check for any deals that would pop-up on &lt;a href="http://slickdeals.net/"&gt;slickdeals website.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Currently I have the following parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Power supply: PSU SEASONIC X650 GOLD SS-650KM R - \$96 (Current price is \$140, got a 40\$ discount)&lt;/li&gt;
&lt;li&gt;Motherboard: ASRock Z77 Extreme4 ATX Intel Motherboard- \$115 (Current price is 124\$+taxes)&lt;/li&gt;
&lt;li&gt;Memory: (8Gb) GEIL GEV38GB1600C9DC R - Free with motherboard (Current price is\$40+taxes)&lt;/li&gt;
&lt;li&gt;Case: Antec Nine Hundred Mid Tower ATX Computer Case- \~\$50 (Current price \$100+taxes, got a discount on fry's)&lt;/li&gt;
&lt;li&gt;Processor and Storage: Intel I7-3770K + 240 GB intel SSD 520 Series : \$355 (Current price is \$586+taxes, but got it from a friend who works for Intel at a reduced price :))&lt;/li&gt;
&lt;li&gt;Operating System: Ubuntu 12.10: Free&lt;/li&gt;
&lt;li&gt;I paid a total price of \~\$630.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For time being, I have decieded not to overclock the processor.&lt;/p&gt;
&lt;p&gt;I have learned that the key is to wait for good deals and explore all options (find friends if anyone works for companies such as intel or amd). ~~I will assemble all the parts soon and post a picture of my build.~~ You can find my final configuration at &lt;a href="http://pcpartpicker.com/b/yUT"&gt;http://pcpartpicker.com/b/yUT&lt;/a&gt;&lt;/p&gt;</content><category term="Linux, Ramblings"></category></entry><entry><title>Parallelization in Octave using parcellfun/pararrayfun</title><link href="plasmon360.github.io/parallelization-in-octave-using-parcellfunpararrayfun.html" rel="alternate"></link><published>2012-03-09T13:27:00-08:00</published><updated>2012-03-09T13:27:00-08:00</updated><author><name>juluribk</name></author><id>tag:None,2012-03-09:plasmon360.github.io/parallelization-in-octave-using-parcellfunpararrayfun.html</id><summary type="html">&lt;p&gt;My computer has many processors and I would like to run some octave scripts so that all the processors are being used.&lt;br&gt;
One can use octave function called "&lt;a href="http://octave.sourceforge.net/general/function/pararrayfun.html"&gt;pararrayfun&lt;/a&gt;" for this purpose. This function is part of "general" package on octave-forge.&lt;/p&gt;
&lt;p&gt;On my ubuntu 11.10, I used "sudo apt-get …&lt;/p&gt;</summary><content type="html">&lt;p&gt;My computer has many processors and I would like to run some octave scripts so that all the processors are being used.&lt;br&gt;
One can use octave function called "&lt;a href="http://octave.sourceforge.net/general/function/pararrayfun.html"&gt;pararrayfun&lt;/a&gt;" for this purpose. This function is part of "general" package on octave-forge.&lt;/p&gt;
&lt;p&gt;On my ubuntu 11.10, I used "sudo apt-get install octave-general" to install this package and ran the following script&lt;/p&gt;
&lt;p&gt;[cc lang='matlab']&lt;br&gt;
1; # this is kept to Prevent Octave from thinking that this is a function file:&lt;/p&gt;
&lt;p&gt;close all;&lt;br&gt;
clear all;&lt;/p&gt;
&lt;p&gt;function y=test(a,b)&lt;br&gt;
y=sin(a)+cos(b)&lt;br&gt;
endfunction&lt;/p&gt;
&lt;p&gt;num_process=8&lt;/p&gt;
&lt;p&gt;a_test_inputs=[0:3.14/20:3.14];&lt;br&gt;
b_test_inputs=[0:3.14/20:3.14]*2;&lt;/p&gt;
&lt;p&gt;tic ();&lt;br&gt;
tt_par= pararrayfun(num_process,@test,(a_test_inputs),(b_test_inputs));&lt;br&gt;
parallel_elapsed_time = toc ()&lt;/p&gt;
&lt;p&gt;tic ();&lt;br&gt;
tt_ser= test((a_test_inputs),(b_test_inputs));&lt;br&gt;
serial_elapsed_time = toc ()&lt;/p&gt;
&lt;p&gt;plot(a_test_inputs,tt_par,'-o',a_test_inputs,tt_ser,'-s');&lt;br&gt;
legend('Parallel result','Serial result');&lt;/p&gt;
&lt;p&gt;disp(sprintf('Elapsed time during serial computation is %e',serial_elapsed_time))&lt;br&gt;
disp(sprintf('Elapsed time during parallel computation is %e',parallel_elapsed_time))&lt;/p&gt;
&lt;p&gt;[/cc]&lt;/p&gt;</content><category term="Free Software"></category><category term="octave"></category></entry><entry><title>Spaces in strings in matlab/octave</title><link href="plasmon360.github.io/spaces-in-strings-in-matlaboctave.html" rel="alternate"></link><published>2012-02-24T11:33:00-08:00</published><updated>2012-02-24T11:33:00-08:00</updated><author><name>juluribk</name></author><id>tag:None,2012-02-24:plasmon360.github.io/spaces-in-strings-in-matlaboctave.html</id><summary type="html">&lt;p&gt;To get spaces in the strings to work in matlab or octave, use&lt;/p&gt;
&lt;p&gt;t1={'test test'}&lt;/p&gt;
&lt;p&gt;Result is&lt;br&gt;
t1 =&lt;br&gt;
{&lt;br&gt;
[1,1] = test test&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;t2=strcat({'test test '},{'blah blah'})&lt;/p&gt;
&lt;p&gt;Result is&lt;br&gt;
t2 =&lt;br&gt;
{&lt;br&gt;
[1,1] = test test blah blah&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;you can use this string in your figures by&lt;br&gt;
plot([1:4 …&lt;/p&gt;</summary><content type="html">&lt;p&gt;To get spaces in the strings to work in matlab or octave, use&lt;/p&gt;
&lt;p&gt;t1={'test test'}&lt;/p&gt;
&lt;p&gt;Result is&lt;br&gt;
t1 =&lt;br&gt;
{&lt;br&gt;
[1,1] = test test&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;t2=strcat({'test test '},{'blah blah'})&lt;/p&gt;
&lt;p&gt;Result is&lt;br&gt;
t2 =&lt;br&gt;
{&lt;br&gt;
[1,1] = test test blah blah&lt;br&gt;
}&lt;/p&gt;
&lt;p&gt;you can use this string in your figures by&lt;br&gt;
plot([1:4])&lt;br&gt;
title(t2{})&lt;/p&gt;</content><category term="Matlab"></category><category term="Matlab"></category><category term="octave"></category></entry><entry><title>van der Pauw correction factor</title><link href="plasmon360.github.io/van-der-pauw-correction-factor.html" rel="alternate"></link><published>2012-01-08T15:27:00-08:00</published><updated>2012-01-08T15:27:00-08:00</updated><author><name>juluribk</name></author><id>tag:None,2012-01-08:plasmon360.github.io/van-der-pauw-correction-factor.html</id><summary type="html">&lt;p&gt;The &lt;a href="http://en.wikipedia.org/wiki/Van_der_Pauw_method"&gt;van der Pauw&lt;/a&gt; Method is a technique commonly used to measure the Resistivity and the Hall Coefficient of a sample. A correction factor goes into calculating the resistivity as described in &lt;a href="http://electron.mit.edu/~gsteele/vanderpauw/vanderpauw.pdf"&gt;van der Pauw paper&lt;/a&gt;. A iterative method is generally used to calculate the correction factor and this correction …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The &lt;a href="http://en.wikipedia.org/wiki/Van_der_Pauw_method"&gt;van der Pauw&lt;/a&gt; Method is a technique commonly used to measure the Resistivity and the Hall Coefficient of a sample. A correction factor goes into calculating the resistivity as described in &lt;a href="http://electron.mit.edu/~gsteele/vanderpauw/vanderpauw.pdf"&gt;van der Pauw paper&lt;/a&gt;. A iterative method is generally used to calculate the correction factor and this correction factor is plotted in Figure 5 of &lt;a href="http://electron.mit.edu/~gsteele/vanderpauw/vanderpauw.pdf"&gt;van der Pauw paper&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I reproduced the same figure below using fsolve function in octave.&lt;br&gt;
&lt;a href="http://juluribk.com/wp-content/uploads/2012/01/Van_der_Paw_correction_factor.png"&gt;&lt;img alt="" class="aligncenter size-medium wp-image-943" height="300" src="http://juluribk.com/wp-content/uploads/2012/01/Van_der_Paw_correction_factor-300x300.png" title="Van der Pauw correction factor" width="300"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This figure was produced by the octave code shown below. The raw data is &lt;a href="http://juluribk.com/wp-content/uploads/2012/01/van_der_pauw_correction_factor.csv"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;[cc lang='matlab']&lt;br&gt;
%This octave/matlab code calculates the correction factor,f as a function of Rmnop/Rnopm. This correcton factor will be used in calculation of sheet resistance/resistivity of thin films.&lt;br&gt;
% Fore more details see the paper L. J. van der Pauw, A method of measuring the resistivity and hall coefficients of Lamellae of arbitrary shape, Philips Technical Review, Vol 26, 220.&lt;br&gt;
clear all&lt;br&gt;
close all&lt;br&gt;
x = logspace(0,3,100);&lt;br&gt;
for i=1:length(x)&lt;br&gt;
Lp=@(f)cosh(((x(i)-1)./(x(i)+1))*(log(2)/f))-0.5*exp((log(2)/f));&lt;br&gt;
F(i) = fsolve(Lp,0.5);&lt;br&gt;
end&lt;br&gt;
semilogx(x,F,'-o')&lt;br&gt;
xlabel('R_{RM,OP}/R_{NO,PM}')&lt;br&gt;
ylabel('Correction Factor (f)')&lt;br&gt;
grid('minor');&lt;br&gt;
title('van der Pauw Correction factors for resistivity measurements');&lt;br&gt;
print('Van_der_Paw_correction_factor.png','-dpng','-r200','-S600,600');&lt;br&gt;
[/cc]&lt;/p&gt;</content><category term="Publications"></category><category term="octave"></category><category term="van der pauw"></category></entry><entry><title>Surface plasmon dispersion relation for thin metal films</title><link href="plasmon360.github.io/surface-plasmon-dispersion-relation-for-thin-metal-films.html" rel="alternate"></link><published>2011-12-07T21:12:00-08:00</published><updated>2011-12-07T21:12:00-08:00</updated><author><name>juluribk</name></author><id>tag:None,2011-12-07:plasmon360.github.io/surface-plasmon-dispersion-relation-for-thin-metal-films.html</id><summary type="html">&lt;p&gt;[latexpage]&lt;/p&gt;
&lt;p&gt;A thin metal film in dielectric (also known as dielectric-metal-dielectric configuration) can support surface plasmons that are different in nature to the ones observed in thick metal-dielectric interfaces. Unlike, a single mode that is observed in thick metal film, thin metal films exhibit two types of modes for the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;[latexpage]&lt;/p&gt;
&lt;p&gt;A thin metal film in dielectric (also known as dielectric-metal-dielectric configuration) can support surface plasmons that are different in nature to the ones observed in thick metal-dielectric interfaces. Unlike, a single mode that is observed in thick metal film, thin metal films exhibit two types of modes for the same wavevector due to excitation and interaction of surface plasmons on both sides of the film. One mode (L+) is at higher energy and other (L-) is at a lower energy. The high energy has anti-symmetric field distribution whereas the low energy one has symmetric field distribution. The dispersion relations of these modes can be obtained by applying appropriate boundary conditions and solving Maxwell equations (&lt;a href="http://paper.gentilemathieu.free.fr/_L1988Raether%20Surface%20Plasmons.pdf"&gt;page 25 of Raether book on Surface plasmons&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The dispersion relations (energy of different modes as function of complex wavevector, \$k_x\^{'}(\omega)+ik_x\^{''}(\omega)\$) are given by the solutions of :&lt;/p&gt;
&lt;p&gt;\$\omega\^+: L+= \epsilon_1k_{z2}+\epsilon_2k_{z1} \tanh\left [ \frac{-ik_{z1}d}{2}\right ]=0\$&lt;/p&gt;
&lt;p&gt;\$\omega\^-: L-= \epsilon_1k_{z2}+\epsilon_2k_{z1} \coth\left [ \frac{-ik_{z1}d}{2}\right ]=0\$,&lt;/p&gt;
&lt;p&gt;Where \$\epsilon_1\$ and \$\epsilon_2\$ represent the dielectric functions of dielectric and metal respectively, \$d\$ is the thickness of metal film, \$\omega\^+\$ is frequency of high energy mode, \$\omega\^-\$ is frequency of low energy mode, \$k_{z1,z2}=\sqrt{\epsilon_{1,2}\left[ \frac{\omega}{c}\right ]\^2-(k_x\^{'}(\omega)+ik_x\^{''}(\omega))\^2}\$.&lt;/p&gt;
&lt;p&gt;What does solving these equations mean? if one considers one mode, say \$L+\$ mode, for a certain \$\omega\^+\$, there exists a particular \$k_x\^{'}\$ and \$k_x\^{''}\$ that will make the above left hand side of L+ equation equal to zero. How do we get those special \$k\$? Unfortunately, there is no exact solution to this, to solve them, one has to use numerical techniques such as Nelder-Mead minimization algorithm that does unconstrained minimization. The algorithm works cleverly by searching for \$k_{z1,z2}\$ at a particular \$\omega\$, such that \$L+\$ and \$L-\$ will be minimum (in this case as close to zero as possible).&lt;/p&gt;
&lt;p&gt;I have used "fmins" function in octave to solve these dispersion relations. Fmins function in octave can be obtained by installing &lt;a href="http://octave.sourceforge.net/optim/"&gt;octave-optmin package&lt;/a&gt;. On Ubuntu use "sudo apt-get install octave-optim" in your terminal. Documentation of fmins function is given &lt;a href="http://octave.sourceforge.net/optim/function/fmins.html"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The numerical solution of dispersion relation for a sample configuration is shown below and qualitatively matches with a figure 5 in this &lt;a href="http://arxiv.org/pdf/cond-mat/0611257"&gt;paper.&lt;/a&gt; I have not plotted the dispersion relation with imaginary part of wave-vector to simplify the case.&lt;/p&gt;
&lt;p&gt;[caption id="attachment_912" align="aligncenter" width="300" caption="Numerical solution to thin films surface plasmon dispersion obtained by unconstrained minimization algorithm"]&lt;a href="http://juluribk.com/wp-content/uploads/2011/12/dmd_analytical_web1.png"&gt;&lt;img alt="" class="size-medium wp-image-912" height="300" src="http://juluribk.com/wp-content/uploads/2011/12/dmd_analytical_web1-300x300.png" title="Numerical solution to thin films surface plasmon dispersion" width="300"&gt;&lt;/a&gt;[/caption]&lt;/p&gt;
&lt;p&gt;Below is the octave code written for octave3.2 and &lt;strong&gt;has not been checked in matlab&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;[cc lang='matlab']&lt;br&gt;
%% Octave script to solve the dispersion relations of surface&lt;br&gt;
%% plasmons propagating on a thin film embedded in dielectric media.&lt;br&gt;
%% Written by Bala Krishna Juluri (www.juluribk.com), Dec-6-2011.&lt;br&gt;
%% Requires octave-optim package and octave3.2 or greater.&lt;/p&gt;
&lt;p&gt;%% A note on units. The code is written in normalized units.&lt;br&gt;
%% All length units are normalized to lambda_p (frequency corresponding to plasma frequency).&lt;br&gt;
%%By normalizing to lambda_p, the dispersion curves become independent of material.&lt;/p&gt;
&lt;p&gt;clear all;&lt;br&gt;
close all;&lt;br&gt;
c=1;% velocity of light in vacuum in normalized units.&lt;br&gt;
wp=1;% plasma frequency of metal in normalized units, this will also make kp=1, as kp=wp/c;&lt;br&gt;
d=0.3;% thickness of metal film in normalized units.&lt;br&gt;
% One normalized length unit is equal to 212.99 nm for silver and 377 nm for gold. This is because,&lt;br&gt;
% 1) for silver, plasma frequency is 8.85e15 1/sec , so the plasma wavelength = 212.99 nm&lt;br&gt;
% 2) for copper, plasma frequency is 5e15 1/sec, so the plasma wavelength = 377 nm&lt;br&gt;
% so if d (thickness of the film) is 0.3 in normalized units, it means that in real units,&lt;br&gt;
%% it is equal to 0.3*212.99nm of silver or 0.3*377nm for gold.&lt;/p&gt;
&lt;p&gt;epsd=1;# dielectric of surrounding.&lt;br&gt;
tol=1e-10;# Relative size of simplex for fmins function&lt;/p&gt;
&lt;p&gt;%creates a non-unifom density of points of w&lt;br&gt;
a=linspace(0.01,3,100);b=1-exp(-a); w=b/max(b)*1.25; % creates a non-uniform density of frequencies&lt;br&gt;
%%from 0 to \~1.3 at which real and complex wavevectors will be calculated.&lt;/p&gt;
&lt;p&gt;%%finds the solutions using fmins&lt;br&gt;
for j=1:length(w)&lt;br&gt;
epsm=1-(wp/w(j))\^2; # The code uses Drude model for material and assumes no losses. plasma_frequency (omega_p) =1,&lt;/p&gt;
&lt;p&gt;#Define first mode&lt;br&gt;
Lp=@(kx)abs(epsm*(sqrt(epsd*(w(j)/c)\^2-(kx(1)+i*kx(2))\^2))+epsd*(sqrt(epsm*(w(j)/c)\^2-(kx(1)+i*kx(2))\^2))*tanh(-0.5*i*(sqrt(epsm*(w(j)/c)\^2-(kx(1)+i*kx(2))\^2))*d));&lt;br&gt;
#solve for first mode using Nelder-Mead technique&lt;br&gt;
[kx_Lp(j,:)] = fmins(Lp,[1.5; 0.25],[0,tol]); # 1.5 and 0.25 are the initial quesses for kx(1) and kx(2)&lt;/p&gt;
&lt;p&gt;#Define other mode&lt;br&gt;
Lm=@(kx)abs(epsm*(sqrt(epsd*(w(j)/c)\^2-(kx(1)+i*kx(2))\^2))+epsd*(sqrt(epsm*(w(j)/c)\^2-(kx(1)+i*kx(2))\^2))*coth(-0.5*i*(sqrt(epsm*(w(j)/c)\^2-(kx(1)+i*kx(2))\^2))*d));&lt;br&gt;
#solve for other mode using Nelder-Mead technique&lt;br&gt;
[kx_Lm(j,:)] = fmins(Lm,[1.5; 0.25],[0,tol]);# 1.5 and 0.25 are the initial quesses for kx(1) and kx(2)&lt;br&gt;
end&lt;/p&gt;
&lt;p&gt;%Plotting and printing section&lt;br&gt;
putenv("GNUTERM",'wxt')&lt;br&gt;
plot(abs(kx_Lp(:,1)),w,'ro',abs(kx_Lm(:,1)),w,'rs');&lt;br&gt;
xlabel('Real(kx) /k_p')&lt;br&gt;
ylabel('w/w_p')&lt;br&gt;
legend('L+','L-','location','SouthEast')&lt;br&gt;
title('Analytical solution to metal thin-film surface plasmon dispersion relation')&lt;br&gt;
xlim([0,3]);&lt;br&gt;
print('dmd_analytical_web.png','-dpng','-r200','-S600,600');&lt;br&gt;
[/cc]&lt;/p&gt;</content><category term="Plasmonics"></category><category term="electromagnetism"></category><category term="octave"></category><category term="Plasmonics"></category></entry><entry><title>All entries of array except certain indices in octave/matlab</title><link href="plasmon360.github.io/all-entries-of-array-except-certain-indices-in-octavematlab.html" rel="alternate"></link><published>2011-12-07T18:14:00-08:00</published><updated>2011-12-07T18:14:00-08:00</updated><author><name>juluribk</name></author><id>tag:None,2011-12-07:plasmon360.github.io/all-entries-of-array-except-certain-indices-in-octavematlab.html</id><summary type="html">&lt;p&gt;In Octave or Matlab, some times one needs to eliminate certain elements in an array.&lt;/p&gt;
&lt;p&gt;For example, if&lt;/p&gt;
&lt;p&gt;[cclN_matlab]&lt;br&gt;
a=[10,20,30,40,50,60];&lt;br&gt;
[/cclN_matlab]&lt;/p&gt;
&lt;p&gt;and suppose I want to create a matrix "b" such that it has all the elements of "a" except 20 and 40. This …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In Octave or Matlab, some times one needs to eliminate certain elements in an array.&lt;/p&gt;
&lt;p&gt;For example, if&lt;/p&gt;
&lt;p&gt;[cclN_matlab]&lt;br&gt;
a=[10,20,30,40,50,60];&lt;br&gt;
[/cclN_matlab]&lt;/p&gt;
&lt;p&gt;and suppose I want to create a matrix "b" such that it has all the elements of "a" except 20 and 40. This can be achieved by:&lt;/p&gt;
&lt;p&gt;[cclN_matlab]&lt;br&gt;
b=a(1:end\~=2&amp;amp;1:end\~=4);&lt;br&gt;
[/cclN_matlab]&lt;/p&gt;
&lt;p&gt;The result is:&lt;br&gt;
[cclN_matlab]&lt;br&gt;
b =&lt;/p&gt;
&lt;p&gt;10 30 50 60&lt;/p&gt;
&lt;p&gt;[/cclN_matlab]&lt;/p&gt;</content><category term="Publications"></category><category term="Matlab"></category><category term="octave"></category></entry><entry><title>Scattering / extinction / absorption cross-sections of silver nanowires (infinite cylinders) using meep</title><link href="plasmon360.github.io/scattering-extinction-absorption-cross-sections-of-silver-nanowires-infinite-cylinders-using-meep.html" rel="alternate"></link><published>2011-06-01T14:06:00-07:00</published><updated>2011-06-01T14:06:00-07:00</updated><author><name>juluribk</name></author><id>tag:None,2011-06-01:plasmon360.github.io/scattering-extinction-absorption-cross-sections-of-silver-nanowires-infinite-cylinders-using-meep.html</id><summary type="html">&lt;p&gt;Particles scatter and absorb electromagnetic radiation. One often needs to compare the amount of scattering/absorption/extinction for particles of different shapes, composition, sizes and incident light properties (polarization, frequency and angle). In this regard, the concept of cross-sections comes into picture. There are three types of cross-sections, 1) scattering …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Particles scatter and absorb electromagnetic radiation. One often needs to compare the amount of scattering/absorption/extinction for particles of different shapes, composition, sizes and incident light properties (polarization, frequency and angle). In this regard, the concept of cross-sections comes into picture. There are three types of cross-sections, 1) scattering 2) absorption and 3) extinction. All of them have units of area, \$m\^2\$, and provide a measure to quantify scattering/absorption process. Here using MEEP I calculate the crossections of silver nanowires and compare them with numerical solution (&lt;a href="http://onlinelibrary.wiley.com/doi/10.1002/9783527618156.app4/pdf"&gt;code from Bohren and Hauffman book&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;[caption id="attachment_862" align="aligncenter" width="400"]&lt;a href="http://juluribk.com/wp-content/uploads/2011/06/cylinders_meepvsanalytical.png"&gt;&lt;img alt="" class="size-full wp-image-862" height="300" src="http://juluribk.com/wp-content/uploads/2011/06/cylinders_meepvsanalytical.png" title="plasmonic cylinder cross-sections meep vs analytical" width="400"&gt;&lt;/a&gt; Comparison of meep results with analytical results for silver nanowires[/caption]&lt;/p&gt;
&lt;p&gt;To achieve this, I wrote a meep code that performs a 2D simulation (x-y) with the cylinder axis along z axis with sources and monitors places as shown below. The source is a line source which travels along y direction and has polarization with electric field along x axis (along radius). I also use mirror-symmetries anti-symetry along X direction (which reduces the simulation time by half). PML layers are used on all sides. Calculation of cross-sections involves creating multiple 1-d flux monitors and running multiple simulations as shown below.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://juluribk.com/wp-content/uploads/2011/06/silver_cylinder_gray_comp_no_fft.zip"&gt;Here is my project file.&lt;/a&gt;. You would need ubuntu like system with meep and octave installed. Shell script will do all the work.&lt;/p&gt;
&lt;p&gt;I have also shared the &lt;a href="https://github.com/juluribk/Meep_cylinder_scattering_project"&gt;project at github.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://juluribk.com/wp-content/uploads/2011/06/Picture3.png"&gt;&lt;img alt="" class="aligncenter size-medium wp-image-1014" height="252" src="http://juluribk.com/wp-content/uploads/2011/06/Picture3-300x252.png" title="simulation set up" width="300"&gt;&lt;/a&gt;&lt;a href="http://juluribk.com/wp-content/uploads/2011/06/simulation_steps.png"&gt;&lt;img alt="" class="aligncenter size-medium wp-image-1013" height="99" src="http://juluribk.com/wp-content/uploads/2011/06/simulation_steps-300x99.png" title="simulation_steps" width="300"&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="Publications"></category></entry><entry><title>Gnuplot rgb color schemes in matlab as colormaps</title><link href="plasmon360.github.io/843.html" rel="alternate"></link><published>2011-05-18T12:00:00-07:00</published><updated>2011-05-18T12:00:00-07:00</updated><author><name>juluribk</name></author><id>tag:None,2011-05-18:plasmon360.github.io/843.html</id><summary type="html">&lt;p&gt;I like the color schemes that are used as &lt;a href="http://gnuplot.sourceforge.net/demo/pm3dcolors.html"&gt;palettes in gnuplot's pm3d plots&lt;/a&gt;. I wanted similar color schemes that can be used as colormaps in matlab.&lt;/p&gt;
&lt;p&gt;After reading this &lt;a href="http://gnuplot-tricks.blogspot.com/2009/06/comment-on-phonged-surfaces-in-gnuplot.html"&gt;article&lt;/a&gt;, I found that  one can easily incorporate the traditional rgbpallette schemes in matlab&lt;/p&gt;
&lt;p&gt;To start, there are several schemes …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I like the color schemes that are used as &lt;a href="http://gnuplot.sourceforge.net/demo/pm3dcolors.html"&gt;palettes in gnuplot's pm3d plots&lt;/a&gt;. I wanted similar color schemes that can be used as colormaps in matlab.&lt;/p&gt;
&lt;p&gt;After reading this &lt;a href="http://gnuplot-tricks.blogspot.com/2009/06/comment-on-phonged-surfaces-in-gnuplot.html"&gt;article&lt;/a&gt;, I found that  one can easily incorporate the traditional rgbpallette schemes in matlab&lt;/p&gt;
&lt;p&gt;To start, there are several schemes in gnuplot  that can be used in pm3d plots and they are:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;   &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="n"&gt;traditional&lt;/span&gt; &lt;span class="n"&gt;pm3d&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;black&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;blue&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;yellow&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;   &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="n"&gt;green&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;violet&lt;/span&gt;
&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;  &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="n"&gt;ocean&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;green&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;blue&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;white&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;try&lt;/span&gt; &lt;span class="n"&gt;also&lt;/span&gt; &lt;span class="k"&gt;all&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="n"&gt;permutations&lt;/span&gt;
&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="n"&gt;hot&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;black&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;yellow&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;white&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;31&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;32&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt; &lt;span class="n"&gt;printable&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="n"&gt;gray&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;black&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;blue&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;violet&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;yellow&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;white&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="n"&gt;rainbow&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;blue&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;green&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;yellow&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt; &lt;span class="p"&gt;...&lt;/span&gt; &lt;span class="n"&gt;AFM&lt;/span&gt; &lt;span class="n"&gt;hot&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;black&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;red&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;yellow&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;white&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The numbers represent different mapping functions for red, green and blue and the functions are&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;               &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;             &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;               &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;             &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;             &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;         &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;       &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;       &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)^&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;       &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;      &lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;180&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)|&lt;/span&gt;
&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;360&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;      &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;360&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;      &lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;360&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)|&lt;/span&gt;
&lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;360&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)|&lt;/span&gt;    &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;720&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)|&lt;/span&gt;    &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;cos&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;720&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;)|&lt;/span&gt;
&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;             &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;           &lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;         &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;         &lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="mi"&gt;27&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;       &lt;span class="mi"&gt;28&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;)/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;     &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;)/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="sr"&gt;/0.32-0.78125 31: 2*x-0.84       32: 4x;1;-2x+1.84;x/&lt;/span&gt;&lt;span class="mf"&gt;0.08&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;11.5&lt;/span&gt;
&lt;span class="mi"&gt;33&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;    &lt;span class="mi"&gt;34&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;            &lt;span class="mi"&gt;35&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;
&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;negative&lt;/span&gt; &lt;span class="n"&gt;numbers&lt;/span&gt; &lt;span class="n"&gt;mean&lt;/span&gt; &lt;span class="n"&gt;inverted&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;negative&lt;/span&gt; &lt;span class="n"&gt;colour&lt;/span&gt; &lt;span class="n"&gt;component&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;thus&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;ranges&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="err"&gt;`&lt;/span&gt;&lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="n"&gt;pm3d&lt;/span&gt; &lt;span class="n"&gt;rgbformulae&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;&lt;span class="o"&gt;..&lt;/span&gt;&lt;span class="mi"&gt;36&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For example, if we choose, 7,5,15 , ie, traditional pm3d (black-blue-red-yellow), the three numbers correspond to functions used for red, green and blue respectively. So in this case, red(x)=sqrt(x), green(x)=x\^3 and blue(x)=sin(2*pi*x), where x has range from 0 to 1. Note that red(x)/green(x)/blue(x) should not be negative numbers, so if they are negative make then zeros.&lt;/p&gt;
&lt;p&gt;With that knowledge, here is a matlab code that creates 7,5,15 and 3,11,6 colormaps and uses it in the display of an image.&lt;br&gt;
[cc lang='matlab']&lt;br&gt;
clear all&lt;br&gt;
x=linspace(0,1,128);&lt;br&gt;
r = sqrt(x);&lt;br&gt;
g = x.\^3.0;&lt;br&gt;
b=sin(x*2*pi);&lt;br&gt;
b(b&amp;lt;0)=0;&lt;br&gt;
pm3d7515_bbry=[r;g;b]'&lt;br&gt;
figure&lt;br&gt;
load mandrill;&lt;br&gt;
imagesc(X);&lt;br&gt;
colormap(pm3d7515_bbry);&lt;br&gt;
colorbar&lt;/p&gt;
&lt;p&gt;r = x;&lt;br&gt;
g = abs(x-0.5);&lt;br&gt;
b=x.\^4;&lt;br&gt;
pm3d3116_grv=[r;g;b]'&lt;br&gt;
figure&lt;br&gt;
load mandrill;&lt;br&gt;
imagesc(X);&lt;br&gt;
colormap(pm3d3116_grv);&lt;br&gt;
colorbar&lt;/p&gt;
&lt;p&gt;[/cc]&lt;/p&gt;
&lt;p&gt;This results are shown below. Other color schemes can be similarly incorporated into matlab codes.&lt;br&gt;
[gallery order="DESC"]&lt;/p&gt;</content><category term="Publications"></category></entry><entry><title>Arbitrary 2d shapes in MEEP</title><link href="plasmon360.github.io/arbitrary-2d-shapes-in-meep.html" rel="alternate"></link><published>2011-05-10T22:52:00-07:00</published><updated>2011-05-10T22:52:00-07:00</updated><author><name>juluribk</name></author><id>tag:None,2011-05-10:plasmon360.github.io/arbitrary-2d-shapes-in-meep.html</id><summary type="html">&lt;p&gt;&lt;a href="http://juluribk.com/wp-content/uploads/2011/05/Arbirary_shapes-eps-000000000.png"&gt;&lt;img alt="" class="aligncenter size-full wp-image-816" height="460" src="http://juluribk.com/wp-content/uploads/2011/05/Arbirary_shapes-eps-000000000.png" title="&amp;quot;A&amp;quot; shaped dielectric object in meep after triangulation" width="513"&gt;&lt;/a&gt;&lt;a href="http://ab-initio.mit.edu/wiki/index.php/Meep"&gt;In MEEP (1.1.1)&lt;/a&gt;, dielectric structures are often created by constructive geometry (adding and subtracting primitive shapes). The primitive shapes that are allowed are blocks, cylinders, ellipsoids and cones. To create a complex shape, one has to decompose the geometry into these primitive shapes. Over the weekend, I was …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://juluribk.com/wp-content/uploads/2011/05/Arbirary_shapes-eps-000000000.png"&gt;&lt;img alt="" class="aligncenter size-full wp-image-816" height="460" src="http://juluribk.com/wp-content/uploads/2011/05/Arbirary_shapes-eps-000000000.png" title="&amp;quot;A&amp;quot; shaped dielectric object in meep after triangulation" width="513"&gt;&lt;/a&gt;&lt;a href="http://ab-initio.mit.edu/wiki/index.php/Meep"&gt;In MEEP (1.1.1)&lt;/a&gt;, dielectric structures are often created by constructive geometry (adding and subtracting primitive shapes). The primitive shapes that are allowed are blocks, cylinders, ellipsoids and cones. To create a complex shape, one has to decompose the geometry into these primitive shapes. Over the weekend, I was wondering if it was possible to somehow create any complex shape in 2d without figuring out the exact positions and operations with the available primitive shapes. Here I report how I solve this problem.&lt;/p&gt;
&lt;p&gt;The first thing I figured out was to create a 2d triangle with known vertices using a certain primitive shape. One can cut a cone to create a triangle, but that would limit me to isosceles triangle. My very smart colleague (&lt;a href="http://www.esm.psu.edu/wiki/research:juh17:mengqian_lu"&gt;Mengqian Lu&lt;/a&gt;) suggested me to cut a block/brick object with non-orthogonal axes such that you get a triangle. In meep, block object requires, 1) the lengths of the block edges along each of its three axes, 2) the directions of the axes of the block and 3)center. A triangle with known (x1,y1,0), (x2,y2,0) and (x3,y3,0) can be represented with a block (with possible non-orthogonality) element by modifications as shown in the figure. I pick a random point "E" which is not in the plane of my triangle and assume it as origin of the block. Then the vectors corresponding to axes of block are given by EA, EB, EC vectors, sizes are given by |EA|,|EB|,|EC| and the center of the block is OE+0.5*(EA+EB+EC).&lt;/p&gt;
&lt;p&gt;[caption id="attachment_809" align="aligncenter" width="300" caption="Triangle in meep using block primitive object"]&lt;a href="http://juluribk.com/wp-content/uploads/2011/05/tr.png"&gt;&lt;img alt="" class="size-medium wp-image-809" height="242" src="http://juluribk.com/wp-content/uploads/2011/05/tr-300x242.png" title="Triangle in meep using block primitive object" width="300"&gt;&lt;/a&gt;[/caption]&lt;/p&gt;
&lt;p&gt;To test this, I wrote a octave code which produces a meep code that that can be executed to create a triangle with vertices of (-10,0,0), (10,0,0) and (0,10,0). The result of compiling the meep code and exporting the dielectric distribution is shown below. The length of the simulation domain is 20 units in both x and y directions.&lt;/p&gt;
&lt;p&gt;[caption id="attachment_809" align="aligncenter" width="300" caption="Triangle shape implemented in meep using block primitive object"]&lt;a href="http://juluribk.com/wp-content/uploads/2011/05/single_triangle-eps-000000.00.png"&gt;&lt;img alt="" class="aligncenter size-medium wp-image-815" height="300" src="http://juluribk.com/wp-content/uploads/2011/05/single_triangle-eps-000000.00-300x300.png" title="Triangle in MEEP" width="300"&gt;&lt;/a&gt;[/caption]&lt;/p&gt;
&lt;p&gt;With this information of incorporating a single triangle in meep, I can now obtain complex 2d shapes in meep. I start by writing a file that contains information regarding points that make up my structure and do a &lt;a href="http://en.wikipedia.org/wiki/Delaunay_triangulation"&gt;constrained delaunay triangulation&lt;/a&gt;. One can use &lt;a href="http://www.mathworks.com/products/matlab/demos.html?file=/products/demos/shipping/matlab/demoDelaunayTri.html"&gt;matlab (versions &amp;gt;2009) to do such constrained delaunay triangulation&lt;/a&gt;. However, many of us (poor graduate students :( ) do not have access to matlab. I figured out that constrained delaunay triangulation can be done by using &lt;a href="http://www.cs.cmu.edu/~quake/triangle.html"&gt;Triangle package&lt;/a&gt;, which is free. After I compile this code, I see two executables 1) Triangle and 2) Showme in my source folder. Triangle does the triangulation and showme does the visualization before and after triangulation.&lt;/p&gt;
&lt;p&gt;First, I write a ".poly" file, to mention my structure. ”.poly” file contains information of the points that make up the structure, one has to also mention segments (the border of the polygon) and any holes (if present). More information can be &lt;a href="http://www.cs.cmu.edu/~quake/triangle.delaunay.html"&gt;found here&lt;/a&gt;. Once a poly file is written, it can visualized using showme executable . If everything is ok, then do a constrained delaunay triangulation using Triangle executable (beware of concavities). I again visualize the structure after triangulation using showme executable to check whether triangulation has happened correctly or not. Once triangulated, I use the method above to convert each triangle to a corresponding meep block element (with suitable centers, sizes and axes) and stitch all of them together (once again use a octave code to do that automatically).&lt;/p&gt;
&lt;p&gt;Using the poly file for shape “A” obtained from &lt;a href="http://people.sc.fsu.edu/~jburkardt/data/poly/a.poly"&gt;here&lt;/a&gt; I create a dielectric structure in MEEP with each triangle representing a random dielectric constant. Below is the final result. This method can also be extended to a group of arbitrary shapes in one simulation each with different dielectric functions.&lt;br&gt;
[caption id="attachment_829" align="aligncenter" width="249" caption="Screenshot of showme executable showing the triangulation of 'A' shape"]&lt;a href="http://juluribk.com/wp-content/uploads/2011/05/Screenshot.png"&gt;&lt;img alt="" class="size-medium wp-image-829" height="300" src="http://juluribk.com/wp-content/uploads/2011/05/Screenshot-249x300.png" title="Screenshot of showme executable showing the triangulation of 'A' shape" width="249"&gt;&lt;/a&gt;[/caption]&lt;/p&gt;
&lt;p&gt;[caption id="attachment_809" align="aligncenter" width="300" caption="'A' shaped dielectric structure in MEEP"]&lt;a href="http://people.sc.fsu.edu/~jburkardt/data/poly/a.poly"&gt;&lt;/a&gt;&lt;a href="http://juluribk.com/wp-content/uploads/2011/05/Arbirary_shapes-eps-000000000.png"&gt;&lt;img alt="" class="aligncenter size-medium wp-image-816" height="269" src="http://juluribk.com/wp-content/uploads/2011/05/Arbirary_shapes-eps-000000000-300x269.png" title="&amp;quot;A&amp;quot; shaped dielectric object in meep after triangulation" width="300"&gt;&lt;/a&gt;[/caption]&lt;/p&gt;</content><category term="Publications"></category><category term="electromagnetism"></category><category term="FDTD"></category><category term="MEEP"></category><category term="octave"></category><category term="photonics"></category><category term="Plasmonics"></category></entry><entry><title>Plasmonic materials in MEEP</title><link href="plasmon360.github.io/plasmonic-materials-in-meep.html" rel="alternate"></link><published>2011-04-27T00:39:00-07:00</published><updated>2011-04-27T00:39:00-07:00</updated><author><name>juluribk</name></author><id>tag:None,2011-04-27:plasmon360.github.io/plasmonic-materials-in-meep.html</id><summary type="html">&lt;p&gt;[latexpage]&lt;/p&gt;
&lt;p&gt;The aim of this post is to share my experience in incorporating dielectric function of metals such as gold and silver into MEEP (a free finite difference time domain package) code. The incorporation is not an easy task and can be daunting for the first time user.&lt;/p&gt;
&lt;p&gt;Metals such …&lt;/p&gt;</summary><content type="html">&lt;p&gt;[latexpage]&lt;/p&gt;
&lt;p&gt;The aim of this post is to share my experience in incorporating dielectric function of metals such as gold and silver into MEEP (a free finite difference time domain package) code. The incorporation is not an easy task and can be daunting for the first time user.&lt;/p&gt;
&lt;p&gt;Metals such as gold and silver have both Drude and Lorentz components for the dielectric function. There are many forms of Lorentz-Drude expressions in literature with slight notation differences.&lt;/p&gt;
&lt;p&gt;I prefer the Lorentz-Drude expression mentioned in &lt;a href="http://www.opticsinfobase.org/abstract.cfm?URI=ao-37-22-5271"&gt;Rakic et al., Optical properties of metallic films for vertical-cavity optoelectronic devices, Applied Optics (1998)&lt;/a&gt; and is given by:&lt;/p&gt;
&lt;p&gt;\$\epsilon(\omega)=1-\frac{f_1\omega_p'\^2}{(\omega\^2+i\Gamma_1'\omega)}+\sum_{j=2}\^{n}\frac{f_j\omega_p'\^2}{(\omega_{o,j}'\^2-\omega\^2-i\Gamma_j'\omega)}\$.&lt;/p&gt;
&lt;p&gt;I took it as reference as they also give the parameters for metals such as Ag and Au and these models fit decently well to experimental data over a larger frequency range (0.1 eV to 6 eV).&lt;/p&gt;
&lt;p&gt;For Silver, the parameters are :&lt;/p&gt;
&lt;p&gt;\$\omega_p\$ = 9.01;% Plasma frequency in eV&lt;/p&gt;
&lt;p&gt;f = [0.845 0.065 0.124 0.011 0.840 5.646];% Oscillators' strengths&lt;/p&gt;
&lt;p&gt;\$\Gamma\$ = [0.048 3.886 0.452 0.065 0.916 2.419];% Damping frequency of each oscillator in eV&lt;/p&gt;
&lt;p&gt;\$\omega_o\$ = [0.000 0.816 4.481 8.185 9.083 20.29];% Resonant frequency of each oscillator in eV&lt;/p&gt;
&lt;p&gt;For Gold, the parameters are :&lt;/p&gt;
&lt;p&gt;\$\omega_p\$ = 9.03;% Plasma frequency in eV&lt;/p&gt;
&lt;p&gt;f = [0.760 0.024 0.010 0.071 0.601 4.384];% Oscillators' strengths&lt;/p&gt;
&lt;p&gt;\$\Gamma\$ = [0.053 0.241 0.345 0.870 2.494 2.214];% Damping frequency of each oscillator in eV&lt;/p&gt;
&lt;p&gt;\$\omega_o\$ = [0.000 0.415 0.830 2.969 4.304 13.32];% Resonant frequency of each oscillator in eV&lt;/p&gt;
&lt;p&gt;To convert these parameters usable for MEEP codes, one needs to do the following:&lt;/p&gt;
&lt;p&gt;1) Normalization:&lt;/p&gt;
&lt;p&gt;\$\omega_p'=\omega_p \times \textrm{norm}\$,&lt;/p&gt;
&lt;p&gt;\$\Gamma'=\Gamma \times \textrm{norm}\$,&lt;/p&gt;
&lt;p&gt;\$\omega_o'=\omega_o \times \textrm{norm}\$,&lt;/p&gt;
&lt;p&gt;where \$\textrm{norm}=\frac{ev2w}{\frac{2\pi c}{a}}\$, \$ev2w=\frac{2\pi}{4.135666e-15}\$ .&lt;/p&gt;
&lt;p&gt;Essentially, we are converting the units of \$\omega_p\$,\$\Gamma\$ and \$\omega_o\$ from eV to angular frequency, which is done by multiplying them with \$ev2w\$. Further, they need to be normalized to MEEP units, divide by \$\frac{2\pi c}{a}\$, where \$a\$ is the length unit in meters used in your MEEP code and obviously c is 299792458 m/s.&lt;/p&gt;
&lt;p&gt;2) Casting Lorentz-Drude model to MEEP's model&lt;/p&gt;
&lt;p&gt;Current version of MEEP (1.1.1), supports dispersive materials through Lorentz model and is given by:&lt;/p&gt;
&lt;p&gt;\$ \epsilon(\omega)=\epsilon_{\infty}+\sum_{j=1}\^{n}\frac{\sigma_{L,j}\omega_{L,j}\^2} {(\omega_{L,j}\^2-\omega\^2-i\Gamma_{L,j}\omega)}\$.&lt;/p&gt;
&lt;p&gt;The normalized parameters, \$\omega_p'\$,\$\Gamma'\$ and \$\omega_o'\$ from step 1, need to be cast into the MEEP's dispersive materials model by the following modifications:&lt;/p&gt;
&lt;p&gt;1) \$\omega_{L,1}=1e\^{-20}\$ (Any small number should be fine.)&lt;/p&gt;
&lt;p&gt;2) \$\omega_{L,j&amp;gt;1}=\omega_{o,j&amp;gt;1}'\$&lt;/p&gt;
&lt;p&gt;3) \$\sigma_{L,j}=\frac{f_j\omega_p'\^2}{\omega_{L,j}\^2}\$&lt;/p&gt;
&lt;p&gt;4) \$\epsilon_{\infty}=1\$&lt;/p&gt;
&lt;p&gt;5) \$\Gamma_{L,j}=\Gamma_j'\$&lt;/p&gt;
&lt;p&gt;Here is scheme code snippet for silver with a=100e-9m (100 nm) after normalization and casting them into MEEP's material model.&lt;/p&gt;
&lt;p&gt;[cc lang="scheme"]&lt;br&gt;
(define myAg (make dielectric (epsilon 1)&lt;br&gt;
(polarizations&lt;br&gt;
(make polarizability&lt;br&gt;
(omega 1e-20) (gamma 0.0038715) (sigma 4.4625e+39))&lt;br&gt;
(make polarizability&lt;br&gt;
(omega 0.065815) (gamma 0.31343) (sigma 7.9247))&lt;br&gt;
(make polarizability&lt;br&gt;
(omega 0.36142) (gamma 0.036456) (sigma 0.50133))&lt;br&gt;
(make polarizability&lt;br&gt;
(omega 0.66017) (gamma 0.0052426) (sigma 0.013329))&lt;br&gt;
(make polarizability&lt;br&gt;
(omega 0.73259) (gamma 0.07388) (sigma 0.82655))&lt;br&gt;
(make polarizability&lt;br&gt;
(omega 1.6365) (gamma 0.19511) (sigma 1.1133))&lt;br&gt;
)))&lt;/p&gt;
&lt;p&gt;[/cc]&lt;/p&gt;
&lt;p&gt;The first polarizability is the Drude component and the rest 5 polarzabilities represent the Lorentz components. I have used this snippet in a MEEP code that calculates the reflection from a thin film of silver (to be consistent, all my units in this MEEP code are also normalized to 100 nm). Later I compared the reflection spectra with an &lt;a href="http://en.wikipedia.org/wiki/Fresnel_equations"&gt;analytical solution&lt;/a&gt;. These results are shown below. The MEEP calculation results match very well the analytical solutions. One can also clearly see the Ag interband effects in UV regime. The results also match with an other &lt;a href="http://upload.wikimedia.org/wikipedia/commons/9/9d/Image-Metal-reflectance.png"&gt;reference&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If anyone needs the codes that generate the scheme snippet for material polarization and calculation of reflectivity of thin metal films, please shoot me an email.&lt;/p&gt;
&lt;p&gt;[caption id="attachment_795" align="aligncenter" width="600"]&lt;a href="http://juluribk.com/wp-content/uploads/2011/04/bitmap.png"&gt;&lt;img alt="" class="size-full wp-image-795" height="450" src="http://juluribk.com/wp-content/uploads/2011/04/bitmap.png" title="Reflectivity comparision between MEEP and analytical model for Silver" width="600"&gt;&lt;/a&gt; Reflectivity of Ag thin film (MEEP vs. analytical model)[/caption]&lt;/p&gt;
&lt;p&gt;[You can find my project file &lt;a href="http://juluribk.com/wp-content/uploads/2011/04/reflection_meep_material_generator.zip"&gt;here&lt;/a&gt;. Please read the readme.txt for further instructions.]{style="text-decoration: underline;"}&lt;/p&gt;
&lt;p&gt;[UPDATE:]{style="color: #ff0000;"} Aaron Webster used this code for a 1 × 1 × 1 pixel region and epilion was exported with the command meep-fields-analytic-chi1. He showed that the dielectric function seen by meep through using my snippet matches with the experimental dielectric function. You can find his report &lt;a href="http://falsecolour.com/aw/meep_metals/meep-metals.pdf"&gt;here&lt;/a&gt;. Thank you Aaron.&lt;/p&gt;
&lt;p&gt;Majid has written a python code to do the operation described above. Please find it &lt;a href="http://msdresearch.blogspot.com/2012/02/understanding-meeps-dispersive-media.html"&gt;here&lt;/a&gt;&lt;/p&gt;</content><category term="Plasmonics, Researc"></category><category term="electromagnetism"></category><category term="FDTD"></category><category term="Free Software"></category><category term="Matlab"></category><category term="MEEP"></category><category term="octave"></category><category term="photonics"></category><category term="Plasmonics"></category><category term="SERS"></category></entry><entry><title>Electric Field in Metal Nanoparticle Dimers</title><link href="plasmon360.github.io/electric-field-in-metal-nanoparticle-dimers.html" rel="alternate"></link><published>2011-04-09T15:32:00-07:00</published><updated>2011-04-09T15:32:00-07:00</updated><author><name>juluribk</name></author><id>tag:None,2011-04-09:plasmon360.github.io/electric-field-in-metal-nanoparticle-dimers.html</id><summary type="html">&lt;p&gt;Metal nanoparticles exhibit localized surface plasmon resonance (LSPR). One can think of LSPR as resonance of electron sea oscillations driven by incident electric field. This is similar to the way a spring-mass system attains resonance under external periodic driving force. The result of this plasmon resonance is enhanced dipole moment …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Metal nanoparticles exhibit localized surface plasmon resonance (LSPR). One can think of LSPR as resonance of electron sea oscillations driven by incident electric field. This is similar to the way a spring-mass system attains resonance under external periodic driving force. The result of this plasmon resonance is enhanced dipole moment or charge separation, which leads to 1) large extinction (extinction is defined as sum of scattering and absorption) and 2) large electric field near the particle. Both of which are shape, size and surrounding dependent. Researchers have taken advantage of this large electric field localization to enhance Raman signals from molecules and have lead to the field of Surface Enhanced Raman Spectroscopy (SERS) (&lt;a href="http://en.wikipedia.org/wiki/Surface_enhanced_Raman_spectroscopy"&gt;more information here&lt;/a&gt;). Raman signal provides quantitative information of vibration modes in molecules and is proportional to the fourth power of electric field perceived by the molecule. Therefore large electric field structures are important for SERS. The real mechanism of SERS is still a topic of debate due to arguments of whether this effect is caused due to enhanced electromagnetic electric field (EM effect) or due to charge transfer effects (usually referred to CHEM effect). Most researchers think that both of these arguments are valid and depend upon the system under consideration. Assuming electric field as an important requirement for SERS, one can think that nanostructures with large electric field should be better SERS candidates. This is very true and researchers have designed many geometries that can give large electric field. Another argument in SERS community is that not only large electric fields are important, it is equally important to get reproducible SERS signals from structures.&lt;/p&gt;
&lt;p&gt;Of interest have been nanoparticle configurations that consist of two nanoparticles that are very close to each other (commonly referred as dimer nanoparticles).  I have simulated electric fields (see figure below) using FDTD for both single nanoparticle and nanoparticle dimers with varying gap (here disks are used, but it is more or less true for any other geometry) at LSPR. One can see, 1) metal nanoparticle dimers have large electric field in the junction compared to single nanoparticles and 2) gap dependence on the electric field. As the gap reduces, electric field increases. The electric field intensity (|E/Eo|\^2) goes from 2 orders to 4 orders of magnitude driving Raman enhancement factors (|E/Eo|\^4) from 4 orders to 8 orders.&lt;br&gt;
Not only large electric field is important for SERS, one has to also match the LSPR wavelength of these particles to the Raman excitation laser wavelength to get the best benefit out of dimers. This is tricky because gap also changes the plasmon resonances generally moving them to lower energy (nearly exponentially with gap).  One can think of why they move to lower energy is due to increased restoring force between charge separations in individual nanoparticles making the system more easy to resonate. There is still a debate what happens at very small gaps when electrons start to tunnel between nanoparticles one can expect to see a LSPR move to higher energy instead of lower energy. This cannot be simulated by basic Maxwell equations as tunneling of electrons is not considered in them. Such cases require quantum treatment.&lt;/p&gt;
&lt;p&gt;[caption id="attachment_731" align="aligncenter" width="632" caption="Electric field in nanoparticles dimers as a function of gap between them."]&lt;a href="http://juluribk.com/wp-content/uploads/2011/04/disc_dimer4.png"&gt;&lt;img alt="" class="size-full wp-image-731" height="978" src="http://juluribk.com/wp-content/uploads/2011/04/disc_dimer4.png" title="Metal nanoparticle dimers" width="632"&gt;&lt;/a&gt;[/caption]&lt;/p&gt;</content><category term="Publications"></category><category term="FDTD"></category><category term="Molecular Machines"></category><category term="photonics"></category><category term="Plasmonics"></category><category term="SERS"></category></entry><entry><title>Charge density in metal nanoparticles at plasmon resonance</title><link href="plasmon360.github.io/charge-density-in-metal-nanoparticles-at-plasmon-resonance.html" rel="alternate"></link><published>2010-11-23T14:11:00-08:00</published><updated>2010-11-23T14:11:00-08:00</updated><author><name>juluribk</name></author><id>tag:None,2010-11-23:plasmon360.github.io/charge-density-in-metal-nanoparticles-at-plasmon-resonance.html</id><summary type="html">&lt;p&gt;It is important to know the magnitude and distribution of electric field near the metallic nanoparticles at plasmon resonance. One can look at the electric field and say whether the plasmon mode is dipolar or higher order mode such as qudrapolar mode. At many times one is also interested to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It is important to know the magnitude and distribution of electric field near the metallic nanoparticles at plasmon resonance. One can look at the electric field and say whether the plasmon mode is dipolar or higher order mode such as qudrapolar mode. At many times one is also interested to know the surface charge density which makes easier to identify the plasmon mode. One can get the surface charge density by talking the divergence of electric field (near field) either calculated by DDA method or FDTD method &lt;a href="http://iopscience.iop.org/1367-2630/2/1/327/"&gt;[Reference paper]&lt;/a&gt;. Below I have calculated the electric field near nanoparticle at plasmon resonance using FDTD method and also calculated the corresponding surface charge density. One can see the dipolar nature of the electric field, and also the surface charge density maximum at one end of the particle and minimum at the other end. Surface Charge density plots become more useful when analyzing complex geometries with complex modes.&lt;/p&gt;
&lt;p&gt;[caption id="attachment_655" align="alignnone" width="300" caption="Electric field and charge density distribution"]&lt;a href="http://juluribk.com/wp-content/uploads/2010/11/test.png"&gt;&lt;img alt="" class="size-medium wp-image-655" height="97" src="http://juluribk.com/wp-content/uploads/2010/11/test-300x97.png" title="Electric field and charge density distribution" width="300"&gt;&lt;/a&gt;[/caption]&lt;/p&gt;
&lt;p&gt;&lt;a href="http://juluribk.com/wp-content/uploads/2010/11/test.png"&gt;&lt;/a&gt;&lt;/p&gt;</content><category term="Publications"></category><category term="electromagnetism"></category><category term="FDTD"></category><category term="Free Software"></category><category term="photonics"></category><category term="Plasmonics"></category></entry><entry><title>Spoof Plasmons / Designer Surface Plasmons</title><link href="plasmon360.github.io/spoof-plasmons-designer-surface-plasmons.html" rel="alternate"></link><published>2010-10-07T14:28:00-07:00</published><updated>2010-10-07T14:28:00-07:00</updated><author><name>juluribk</name></author><id>tag:None,2010-10-07:plasmon360.github.io/spoof-plasmons-designer-surface-plasmons.html</id><summary type="html">&lt;p&gt;Aim of this article/post: To 1) introduce the concept of Designer surface plasmons or Spoof plasmons and 2) Dispersion relations and Visualization of the fields using MEEP code. (Some of the text/simulations are taken from &lt;a href="http://www.esm.psu.edu/wiki/_media/research%3Ajuh17%3Apublication%3Abkjuluri_oe_2009.pdf"&gt;my paper in the area of DSPs.&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Surface Plasmons are electromagnetic waves that …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Aim of this article/post: To 1) introduce the concept of Designer surface plasmons or Spoof plasmons and 2) Dispersion relations and Visualization of the fields using MEEP code. (Some of the text/simulations are taken from &lt;a href="http://www.esm.psu.edu/wiki/_media/research%3Ajuh17%3Apublication%3Abkjuluri_oe_2009.pdf"&gt;my paper in the area of DSPs.&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Surface Plasmons are electromagnetic waves that travel at the interface of metals such as Ag/Au (follow Lorentz-Drude dielectric model) and a dielectric. Surface plasmons are not expected in perfect electric conductors (PEC's) as the electric field inside the metal is zero. However, highly localized surface-bound states appear when the PEC is periodically modulated with arrays of sub-wavelength square or circular holes. Both theoretical and experimental studies suggest that surface-bound states and SPs exhibit similar dispersion relationships. Due to the similarity such surface-bound states are referred to as ‘spoof’ or ‘designer’ surface plasmons (DSPs).&lt;/p&gt;
&lt;p&gt;Structured PEC surfaces and the excited DSPs have recently garnered interest within the photonics community, as a new platform to engineer surface-bound states of a wide frequency range.  An important example is the guiding of terahertz-range radiation  in the form of DSPs. This enables the application of terahertz plasmonics to near-field imaging, sensing, and spectroscopy. A prime advantage of DSP is that, unlike conventional SP, the propagation of these waves can be controlled by engineering the material-independent, perceived group index. PEC structures have been engineered to guide DSPs of speci?c terahertz-range frequencies. To know more about &lt;a href="http://www.esm.psu.edu/wiki/_media/research%3Ajuh17%3Apublication%3Abkjuluri_oe_2009.pdf"&gt;DSP's and relevant references, see references in my paper on DSP's here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the figure below, I show how DSP's are excited. I also show numerically calculated dispersion curves and fields. These were obtained using freely available finite difference time domain simulation software, MEEP.&lt;/p&gt;
&lt;p&gt;[caption id="attachment_624" align="aligncenter" width="502"]&lt;a href="http://juluribk.com/wp-content/uploads/2010/10/band_structure.png"&gt;&lt;img alt="" class="size-large wp-image-624" height="158" src="http://juluribk.com/wp-content/uploads/2010/10/band_structure-1024x321.png" title="Designer Surface Plasmons" width="502"&gt;&lt;/a&gt; Schematic shows the excitation of Designer surface plasmons (DSPS) (left). Inset shows the fields (Ey and Ex). Dispersion relationship of these waves (right))[/caption]&lt;/p&gt;
&lt;p&gt;&lt;object width="240" height="192" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0"&gt;&lt;param name="allowFullScreen" value="true"&gt;&lt;/param&gt;&lt;param name="allowscriptaccess" value="always"&gt;&lt;/param&gt;&lt;param name="src" value="http://www.youtube.com/v/YxaB9wwXJ2g?fs=1&amp;amp;hl=en_US&amp;amp;color1=0x2b405b&amp;amp;color2=0x6b8ab6"&gt;&lt;/param&gt;&lt;param name="allowfullscreen" value="true"&gt;&lt;/param&gt;&lt;embed width="240" height="192" type="application/x-shockwave-flash" src="http://www.youtube.com/v/YxaB9wwXJ2g?fs=1&amp;amp;hl=en_US&amp;amp;color1=0x2b405b&amp;amp;color2=0x6b8ab6" allowfullscreen="true" allowscriptaccess="always" allowfullscreen="true"&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/p&gt;
&lt;p&gt;&lt;object width="240" height="192" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0"&gt;&lt;param name="allowFullScreen" value="true"&gt;&lt;/param&gt;&lt;param name="allowscriptaccess" value="always"&gt;&lt;/param&gt;&lt;param name="src" value="http://www.youtube.com/v/VAM9r8EV1_I?fs=1&amp;amp;hl=en_US&amp;amp;color1=0x2b405b&amp;amp;color2=0x6b8ab6"&gt;&lt;/param&gt;&lt;param name="allowfullscreen" value="true"&gt;&lt;/param&gt;&lt;embed width="240" height="192" type="application/x-shockwave-flash" src="http://www.youtube.com/v/VAM9r8EV1_I?fs=1&amp;amp;hl=en_US&amp;amp;color1=0x2b405b&amp;amp;color2=0x6b8ab6" allowfullscreen="true" allowscriptaccess="always" allowfullscreen="true"&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/p&gt;
&lt;p&gt;[Update on May 2 2013:]{style="color: #ff0000;"} (&lt;a href="http://juluribk.com/wp-content/uploads/2010/10/Spoof_plasmons_Two-dimensional-unit-cell.zip"&gt;Here is my project file&lt;/a&gt;)&lt;/p&gt;</content><category term="Publications"></category><category term="Free Software"></category><category term="photonics"></category><category term="Plasmonics"></category></entry><entry><title>DDSCAT and electric field at plasmon resonance</title><link href="plasmon360.github.io/ddscat-and-electric-field-at-plasmon-resonance.html" rel="alternate"></link><published>2010-05-26T21:10:00-07:00</published><updated>2010-05-26T21:10:00-07:00</updated><author><name>juluribk</name></author><id>tag:None,2010-05-26:plasmon360.github.io/ddscat-and-electric-field-at-plasmon-resonance.html</id><summary type="html">&lt;p&gt;Discrete Dipole Approximation (DDA) is an important tool in plasmonics research. Using DDA, one can calculate scattering properties of nanoparticles at various wavelengths, polarizations and surrounding medium. The specialty of DDA is that one can calculate scattering properties of irregular shape particles (particles other than spheroids). DDA is based on …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Discrete Dipole Approximation (DDA) is an important tool in plasmonics research. Using DDA, one can calculate scattering properties of nanoparticles at various wavelengths, polarizations and surrounding medium. The specialty of DDA is that one can calculate scattering properties of irregular shape particles (particles other than spheroids). DDA is based on representing a particle into a set of interacting dipoles and solving their dipole moments such that they are all self-conistent with each other and are linked by far-field and near-field interactions. Once these dipole moments are calculated, they can be used to calculate scattering properties such as scattering efficiency, absorption efficiency and extinction efficiency. Not only efficiencies, one can also calculate electric field and magnetic field at an interested wavelength of incident light. More information on DDA can be found in this &lt;a href="http://arxiv.org/ftp/arxiv/papers/0704/0704.0038.pdf"&gt;review paper&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are various codes that have implemented the discrete dipole approximation method. My favorite implentation is DDSCAT. DDSCAT is a free and easy to learn code.  You can get more information on downloading and installing &lt;a href="http://www.astro.princeton.edu/~draine/DDSCAT.html"&gt;DDSCAT here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here, I have used DDSCAT to calculate the electric field near the vicinity of a 60 nm gold nanoparticle in water at localized surface plasmon resonance (532 nm). Note the large electric field at the edges of the nanoparticle and dipolar field due to plasmon resonance.&lt;/p&gt;
&lt;p&gt;[caption id="attachment_554" align="aligncenter" width="614"]&lt;a href="http://juluribk.com/wp-content/uploads/2010/05/field.png"&gt;&lt;img alt="" class="size-large wp-image-554" height="250" src="http://juluribk.com/wp-content/uploads/2010/05/field-1024x417.png" title="field around nanoparticles" width="614"&gt;&lt;/a&gt; Electric field distribution inside and outside of a 60 nm Au nanosphere in water at a wavelength at LSPR (532 nm). These results were obtained using DDSCAT 7.1[/caption]&lt;/p&gt;
&lt;p&gt;[UPDATE:]{style="color: #ff0000;"} Many of my readers were interested in the simulation files. You can find my project file &lt;a href="http://juluribk.com/wp-content/uploads/2010/05/spheres_website.zip"&gt;here&lt;/a&gt;. &lt;strong&gt;Note that electric fields were calculated using DDSCAT7.1 (ddscat7.2 uses totally different method to calculate electric field)&lt;/strong&gt;. The folder contains details for calculating and plotting the electric field around a sphere in xy plane, where light is polarized in y direction and propagting in x direction. But this could be extended to other geometries and other planes of interest. Follow these steps: 1) Read the flowchart.ppt to understand the problem of interest and the work flow 2) compile the ddscat7.1 source_code on linux or windows with cygwin 3) get hold of octave/matlab for running the efield part.&lt;/p&gt;</content><category term="Publications"></category><category term="DDSCAT"></category><category term="electromagnetism"></category><category term="Free Software"></category><category term="Plasmonics"></category></entry><entry><title>Nmie: Extinction, Scattering and Absorption efficiencies of multilayer nanoparticles</title><link href="plasmon360.github.io/nmie-extinction-scattering-and-absorption-efficiencies-of-multilayer-nanoparticles.html" rel="alternate"></link><published>2010-05-11T21:37:00-07:00</published><updated>2010-05-11T21:37:00-07:00</updated><author><name>juluribk</name></author><id>tag:None,2010-05-11:plasmon360.github.io/nmie-extinction-scattering-and-absorption-efficiencies-of-multilayer-nanoparticles.html</id><summary type="html">&lt;p&gt;&lt;img alt="" src="file:///C:/Users/Mengqian/AppData/Local/Temp/moz-screenshot-2.png"&gt;&lt;/p&gt;
&lt;p&gt;[caption id="attachment_551" align="alignleft" width="300" caption="nmie tool on Nanohub.org. This tool calculates the extinction, scattering, and absorption efficiencies of single nanoparticle (1 layer),core-shell nanoparticle (2 layer) and nanomatryushka nanoparticle (3 layer) using MIE formulation. "]&lt;a href="http://juluribk.com/wp-content/uploads/2010/05/Screenshot-main1.png"&gt;&lt;img alt="" class="size-medium wp-image-551" height="215" src="http://juluribk.com/wp-content/uploads/2010/05/Screenshot-main1-300x215.png" title="nmie_screenshot" width="300"&gt;&lt;/a&gt;[/caption]&lt;/p&gt;
&lt;p&gt;Since 2009, I have been a regular user of Nanohub …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="" src="file:///C:/Users/Mengqian/AppData/Local/Temp/moz-screenshot-2.png"&gt;&lt;/p&gt;
&lt;p&gt;[caption id="attachment_551" align="alignleft" width="300" caption="nmie tool on Nanohub.org. This tool calculates the extinction, scattering, and absorption efficiencies of single nanoparticle (1 layer),core-shell nanoparticle (2 layer) and nanomatryushka nanoparticle (3 layer) using MIE formulation. "]&lt;a href="http://juluribk.com/wp-content/uploads/2010/05/Screenshot-main1.png"&gt;&lt;img alt="" class="size-medium wp-image-551" height="215" src="http://juluribk.com/wp-content/uploads/2010/05/Screenshot-main1-300x215.png" title="nmie_screenshot" width="300"&gt;&lt;/a&gt;[/caption]&lt;/p&gt;
&lt;p&gt;Since 2009, I have been a regular user of Nanohub.org. &lt;a href="www.nanohub.org"&gt;www.Nanohub.org&lt;/a&gt;is a website that provides a platform for online simulation, research and teaching resources. Of interest is the ability to perform simulation online without installing software on your local computer. I envision that this type of cloud computing model will be the future of scientific computing.&lt;/p&gt;
&lt;p&gt;Developers can use their Rappture toolkit (&lt;a href="http://www.youtube.com/watch?v=bsJ8bzQQ6vw"&gt;nice video to learn Rappture toolkit&lt;/a&gt;) to write wrappers for codes that are written in Fortran, C or Matlab and enable an easy to use GUI for the executables. There are few tools for Plasmonics on nanohub which you can find on &lt;a href="http://juluribk.com/2010/01/12/books-on-electromagnetics/"&gt;my plasmonics resources&lt;/a&gt; post.&lt;/p&gt;
&lt;p&gt;We have developed a Rappture tool called nmie. This tool calculates the extinction, scattering, and absorption efficiencies of single nanoparticle (1 layer), core-shell nanoparticle (2 layer) and nanomatryushka nanoparticle (3 layer) using MIE formulation. The user can change the layer composition (metals- au/ag or dielectric) and the refractive index of the surrounding medium. He/She can also change the wavelength range of the calculation. One thing I like about nanohub tools is that you can do many simulation cases and compare with each other.&lt;/p&gt;
&lt;p&gt;You can find the tool &lt;a href="https://nanohub.org/resources/8228"&gt;here.&lt;/a&gt;To use this tool, you need to register first, which is free. :)&lt;/p&gt;
&lt;p&gt;Technical details:&lt;/p&gt;
&lt;p&gt;The engine is based on nmie code distributed by Dr. Nikolai Voshchinnikov http://www.astro.spbu.ru/staff/ilin2/SOFTWARE/nmie0.html. The nmie code can take layers more than 3, however I have used the code for three layers which is more common in plasmonics research. The recursive algorithm of Wu &amp;amp; Wang are used. Fore more details see&lt;/p&gt;
&lt;p&gt;1) Wu Z.P., Wang Y.P., Electromagnetic scattering for multilaered spheres using recursive algorithms, Radio Science 1991. V. 26. P. 1393-1401.&lt;/p&gt;
&lt;p&gt;2) Voshchinnikov N.V., Mathis J.S., Calculating Cross Sections of Composite Interstellar Grains, Astrophys. J. 1999. V. 526. 3) Johnson PB, Christy RW (1972) Phys Rev B 6,4370&lt;/p&gt;
&lt;p&gt;The demo for this tool is here:&lt;br&gt;
&lt;object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="480" height="385" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0"&gt;&lt;param name="allowFullScreen" value="true"&gt;&lt;/param&gt;&lt;param name="allowscriptaccess" value="always"&gt;&lt;/param&gt;&lt;param name="src" value="http://www.youtube.com/v/Yp2_N1zj5oU&amp;amp;hl=en_US&amp;amp;fs=1&amp;amp;"&gt;&lt;/param&gt;&lt;param name="allowfullscreen" value="true"&gt;&lt;/param&gt;&lt;embed type="application/x-shockwave-flash" width="480" height="385" src="http://www.youtube.com/v/Yp2_N1zj5oU&amp;amp;hl=en_US&amp;amp;fs=1&amp;amp;" allowscriptaccess="always" allowfullscreen="true"&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/p&gt;
&lt;p&gt;If you have any questions/comments/bugs on this tool, please let me know either at the nanohub website or here in the comments section.&lt;/p&gt;</content><category term="Publications"></category><category term="electromagnetism"></category><category term="Free Software"></category><category term="Nanohub.org"></category><category term="Plasmonics"></category></entry><entry><title>Beamer Themes</title><link href="plasmon360.github.io/beamer-themes.html" rel="alternate"></link><published>2010-04-18T15:32:00-07:00</published><updated>2010-04-18T15:32:00-07:00</updated><author><name>juluribk</name></author><id>tag:None,2010-04-18:plasmon360.github.io/beamer-themes.html</id><summary type="html">&lt;p&gt;One can use Beamer to make high quality presentations using Latex code. To know more about beamer and its capabilities visit &lt;a href="http://en.wikipedia.org/wiki/Beamer_%28LaTeX%29"&gt;here&lt;/a&gt;and &lt;a href="http://latex-beamer.sourceforge.net/beamerexample1.pdf"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Beamer comes with a set of default templates. However,it has capability to design new themes.&lt;/p&gt;
&lt;p&gt;Here, I will maintain a list of beamer themes shared …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One can use Beamer to make high quality presentations using Latex code. To know more about beamer and its capabilities visit &lt;a href="http://en.wikipedia.org/wiki/Beamer_%28LaTeX%29"&gt;here&lt;/a&gt;and &lt;a href="http://latex-beamer.sourceforge.net/beamerexample1.pdf"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Beamer comes with a set of default templates. However,it has capability to design new themes.&lt;/p&gt;
&lt;p&gt;Here, I will maintain a list of beamer themes shared by beamer users. If you know any that are not listed below, please let me know and I can add here for the greater good.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="file:///tmp/moz-screenshot.png"&gt;&lt;img alt="" src="file:///tmp/moz-screenshot-1.png"&gt;&lt;a href="http://recherche.noiraudes.net/fr/LaTeX.php"&gt;http://recherche.noiraudes.net/fr/LaTeX.php&lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.barisione.org/2007-09/torino-a-pretty-theme-for-latex-beamer/"&gt;http://blog.barisione.org/2007-09/torino-a-pretty-theme-for-latex-beamer/&lt;/a&gt;&lt;br&gt;
&lt;a href="http://www.win.tue.nl/latex/documentation/tuebeamer/tueslides.pdf"&gt;http://www.win.tue.nl/latex/documentation/tuebeamer/tueslides.pdf&lt;/a&gt;&lt;br&gt;
&lt;a href="http://www.shawnlankton.com/2008/02/beamer-and-latex-with-keynote-theme/"&gt;http://www.shawnlankton.com/2008/02/beamer-and-latex-with-keynote-theme/&lt;/a&gt;&lt;br&gt;
&lt;a href="http://www.ist.tugraz.at/staff/weiglhofer/misc/tugbeamer/"&gt;http://www.ist.tugraz.at/staff/weiglhofer/misc/tugbeamer/&lt;/a&gt;&lt;br&gt;
&lt;a href="http://www.guidodiepen.nl/2009/04/latex-beamer-diepen-style/"&gt;http://www.guidodiepen.nl/2009/04/latex-beamer-diepen-style/&lt;/a&gt;&lt;br&gt;
&lt;a href="http://matdat.life.ku.dk/LaTeX/Frederiksberg/examples.html"&gt;http://matdat.life.ku.dk/LaTeX/Frederiksberg/examples.html&lt;/a&gt;&lt;br&gt;
&lt;a href="http://win.ua.ac.be/~nschloe/content/ua-beamer-theme"&gt;http://win.ua.ac.be/~nschloe/content/ua-beamer-theme&lt;/a&gt;&lt;br&gt;
&lt;a href="http://www.kde.org/kdeslides/"&gt;http://www.kde.org/kdeslides/&lt;/a&gt;&lt;br&gt;
&lt;a href="http://latex-my.blogspot.com/2009/10/kde-beamer-themes.html"&gt;http://latex-my.blogspot.com/2009/10/kde-beamer-themes.html&lt;/a&gt;&lt;br&gt;
&lt;a href="http://latex-my.blogspot.com/2009/10/kde-beamer-themes.html"&gt;http://www.cert.fr/dcsd/PUBLIS/THESES/sbouveret/francais/LaTeX.html&lt;/a&gt;&lt;br&gt;
&lt;a href="http://win.ua.ac.be/~nschloe/content/ua-beamer-theme"&gt;http://win.ua.ac.be/~nschloe/content/ua-beamer-theme&lt;/a&gt;&lt;br&gt;
&lt;a href="http://cameron.bracken.bz/beamer-template"&gt;http://cameron.bracken.bz/beamer-template&lt;/a&gt;&lt;br&gt;
&lt;a href="https://bitbucket.org/marczellm/beamerports"&gt;https://bitbucket.org/marczellm/beamerports&lt;/a&gt;&lt;br&gt;
&lt;a href="http://latex.simon04.net/"&gt;http://latex.simon04.net/&lt;/a&gt;&lt;/p&gt;</content><category term="Publications"></category><category term="beamer"></category><category term="Free Software"></category><category term="Latex"></category></entry><entry><title>Adding a title to colobar in Matlab</title><link href="plasmon360.github.io/adding-a-title-to-colobar-in-matlab.html" rel="alternate"></link><published>2010-03-21T16:34:00-07:00</published><updated>2010-03-21T16:34:00-07:00</updated><author><name>juluribk</name></author><id>tag:None,2010-03-21:plasmon360.github.io/adding-a-title-to-colobar-in-matlab.html</id><summary type="html">&lt;p&gt;To insert a title to the colorbar in matlab.  Use the following code(&lt;a href="http://www.mathworks.com/matlabcentral/newsreader/view_thread/171788"&gt;Source&lt;/a&gt;):&lt;br&gt;
[cc lang='matlab']&lt;br&gt;
load mandrill % Loads a data for the example&lt;br&gt;
image(X) % Plots an image for the example&lt;br&gt;
t=colorbar;% Inserts a colorbar. a handle is created&lt;br&gt;
set(get(t,'ylabel'),'string','My colorbar title' …&lt;/p&gt;</summary><content type="html">&lt;p&gt;To insert a title to the colorbar in matlab.  Use the following code(&lt;a href="http://www.mathworks.com/matlabcentral/newsreader/view_thread/171788"&gt;Source&lt;/a&gt;):&lt;br&gt;
[cc lang='matlab']&lt;br&gt;
load mandrill % Loads a data for the example&lt;br&gt;
image(X) % Plots an image for the example&lt;br&gt;
t=colorbar;% Inserts a colorbar. a handle is created&lt;br&gt;
set(get(t,'ylabel'),'string','My colorbar title','Fontsize',10) % sets the ylabel property of the handle t.&lt;br&gt;
[/cc]&lt;/p&gt;</content><category term="Publications"></category><category term="Matlab"></category></entry><entry><title>WINSPALL software for surface plasmon resonance experiments</title><link href="plasmon360.github.io/winspall-software-for-surface-plasmon-resonance-experiments.html" rel="alternate"></link><published>2010-03-10T23:12:00-08:00</published><updated>2010-03-10T23:12:00-08:00</updated><author><name>juluribk</name></author><id>tag:None,2010-03-10:plasmon360.github.io/winspall-software-for-surface-plasmon-resonance-experiments.html</id><summary type="html">&lt;p&gt;One needs to fit the reflectivity curves obtained in surface plasmon resonance experiments with theoretical models. A free software (for non commercial use) called Winspall exactly does that.&lt;/p&gt;
&lt;p&gt;According to the developers, WINSPALL is a PC based software which computes the reflectivity of optical multilayer systems. It is based on …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One needs to fit the reflectivity curves obtained in surface plasmon resonance experiments with theoretical models. A free software (for non commercial use) called Winspall exactly does that.&lt;/p&gt;
&lt;p&gt;According to the developers, WINSPALL is a PC based software which computes the reflectivity of optical multilayer systems. It is based on the Fresnel equations and the matrix formalism. It can be used to analyze surface plasmon experiments. WINSPALL was developed in the Knoll group. WINSPALL is available for use without charge. It may &lt;strong&gt;not&lt;/strong&gt; be reused for commercial purposes.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="file:///C:/DOCUME%7E1/bxj139/LOCALS%7E1/Temp/moz-screenshot-3.jpg"&gt;&lt;/p&gt;
&lt;p&gt;[caption id="" align="alignnone" width="475" caption="Image from the developer website"]&lt;img alt="" height="370" src="http://www.mpip-mainz.mpg.de/knoll/soft/winspall.jpg" width="475"&gt;[/caption]&lt;/p&gt;
&lt;p&gt;~~It is available for download &lt;a href="http://www.mpip-mainz.mpg.de/knoll/soft/"&gt;here&lt;/a&gt;.~~&lt;/p&gt;
&lt;p&gt;you can download the software from this discussion on Research Gate. &lt;a href="https://www.researchgate.net/post/Where_can_I_find_Winspall_software_the_free_software_for_predicting_SPR_angles"&gt;https://www.researchgate.net/post/Where_can_I_find_Winspall_software_the_free_software_for_predicting_SPR_angles&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A tutorial to use this software is available &lt;a href="http://www.res-tec.de/tutorials/res-tec-tutorial-02.pdf"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Many thanks for &lt;a href="http://chem.okstate.edu/index.php?option=com_content&amp;amp;task=view&amp;amp;id=42&amp;amp;Itemid=126"&gt;Prof. Barry Lavine&lt;/a&gt; for this information&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;</content><category term="Free Software, Plasmonics"></category><category term="electromagnetism"></category><category term="Free Software"></category><category term="photonics"></category><category term="Plasmonics"></category></entry><entry><title>Shortcuts in Ubuntu/Gnome</title><link href="plasmon360.github.io/shortcuts-in-ubuntugnome.html" rel="alternate"></link><published>2010-01-30T12:44:00-08:00</published><updated>2010-01-30T12:44:00-08:00</updated><author><name>juluribk</name></author><id>tag:None,2010-01-30:plasmon360.github.io/shortcuts-in-ubuntugnome.html</id><summary type="html">&lt;p&gt;ctrl + alt + l locks the user screen.&lt;/p&gt;
&lt;p&gt;ctrl+alt+del Logout&lt;/p&gt;
&lt;p&gt;ctrl-h : show hidden files&lt;/p&gt;
&lt;p&gt;ctrl-t : move to trash&lt;/p&gt;
&lt;p&gt;f9 : toggle side-pane in file/folder manger&lt;/p&gt;
&lt;p&gt;alt-home : jump to home folder&lt;/p&gt;
&lt;p&gt;alt-enter : file / folder properties&lt;/p&gt;
&lt;p&gt;alt-f1 : launch applications menu&lt;/p&gt;
&lt;p&gt;alt-f2 : launch "run application" dialogue&lt;/p&gt;
&lt;p&gt;ctrl-alt - right/left arrow : move to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;ctrl + alt + l locks the user screen.&lt;/p&gt;
&lt;p&gt;ctrl+alt+del Logout&lt;/p&gt;
&lt;p&gt;ctrl-h : show hidden files&lt;/p&gt;
&lt;p&gt;ctrl-t : move to trash&lt;/p&gt;
&lt;p&gt;f9 : toggle side-pane in file/folder manger&lt;/p&gt;
&lt;p&gt;alt-home : jump to home folder&lt;/p&gt;
&lt;p&gt;alt-enter : file / folder properties&lt;/p&gt;
&lt;p&gt;alt-f1 : launch applications menu&lt;/p&gt;
&lt;p&gt;alt-f2 : launch "run application" dialogue&lt;/p&gt;
&lt;p&gt;ctrl-alt - right/left arrow : move to the next virtual desktop&lt;/p&gt;
&lt;p&gt;ctrl-alt-shift - right/left arrow : take current window to the next virtual desktop&lt;/p&gt;
&lt;p&gt;ctrl+a – select all&lt;/p&gt;
&lt;p&gt;ctrl+n – new window&lt;/p&gt;
&lt;p&gt;ctrl+shift+n – new folder&lt;/p&gt;
&lt;p&gt;f2 – rename&lt;/p&gt;
&lt;p&gt;Source: http://ubuntu-tutorials.com/2007/02/20/shortcut-keys-you-might-not-know-about/&lt;/p&gt;</content><category term="Publications"></category></entry><entry><title>My list of most used packages for ubuntu</title><link href="plasmon360.github.io/my-list-of-most-used-packages-for-ubuntu.html" rel="alternate"></link><published>2010-01-27T17:44:00-08:00</published><updated>2010-01-27T17:44:00-08:00</updated><author><name>juluribk</name></author><id>tag:None,2010-01-27:plasmon360.github.io/my-list-of-most-used-packages-for-ubuntu.html</id><summary type="html">&lt;p&gt;To install octave, gnuplot,numpy,scipy,matplotlib,gcc-4.2-base, gfortran&lt;br&gt;
[cc lang='bash']&lt;br&gt;
sudo apt-get install octave gnuplot \&lt;br&gt;
ipython python-numpy python-scipy \&lt;br&gt;
python-matplotlib wine gcc-4.2-base gfortran-4.2&lt;br&gt;
[/cc]&lt;br&gt;
To install graphics programs: gimp, imagmagick and inkscape&lt;br&gt;
[cc lang='bash']sudo apt-get install inkscape gimp imagemagick [/cc]&lt;br&gt;
To install most of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;To install octave, gnuplot,numpy,scipy,matplotlib,gcc-4.2-base, gfortran&lt;br&gt;
[cc lang='bash']&lt;br&gt;
sudo apt-get install octave gnuplot \&lt;br&gt;
ipython python-numpy python-scipy \&lt;br&gt;
python-matplotlib wine gcc-4.2-base gfortran-4.2&lt;br&gt;
[/cc]&lt;br&gt;
To install graphics programs: gimp, imagmagick and inkscape&lt;br&gt;
[cc lang='bash']sudo apt-get install inkscape gimp imagemagick [/cc]&lt;br&gt;
To install most of the multimedia requirements&lt;br&gt;
[cc lang='bash'] sudo apt-get install vlc mozilla-plugin-vlc gstreamer0.10-ffmpeg \&lt;br&gt;
gstreamer0.10-fluendo-mp3 gstreamer0.10-fluendo-mpegdemux \&lt;br&gt;
gstreamer0.10-plugins-ugly gstreamer0.10-plugins-ugly-multiverse \&lt;br&gt;
gstreamer0.10-plugins-bad gstreamer0.10-plugins-bad-multiverse w32codecs [/cc]&lt;br&gt;
To install Microsoft fonts&lt;br&gt;
[cc lang='bash']sudo apt-get install msttcorefonts[/cc]&lt;br&gt;
To install latex relates stuff, kile&lt;br&gt;
[cc lang='bash']sudo apt-get install texlive kile texlive-latex-extra texlive-xetex lmodern[/cc]&lt;br&gt;
To install utilities:&lt;br&gt;
[cc lang='bash']sudo apt-get install subversion unrar kdiff3[/cc]&lt;/p&gt;</content><category term="Free Software, Linux"></category><category term="Free Software"></category><category term="Linux"></category></entry><entry><title>Dynamic Exciton-Plasmon Coupling</title><link href="plasmon360.github.io/dynamic-exciton-plasmon-coupling.html" rel="alternate"></link><published>2010-01-27T12:26:00-08:00</published><updated>2010-01-27T12:26:00-08:00</updated><author><name>juluribk</name></author><id>tag:None,2010-01-27:plasmon360.github.io/dynamic-exciton-plasmon-coupling.html</id><summary type="html">&lt;p&gt;&lt;a href="http://juluribk.com/wp-content/uploads/2010/01/adv_materials_cover_image1.png"&gt;&lt;img alt="" class="alignleft size-full wp-image-598" height="420" src="http://juluribk.com/wp-content/uploads/2010/01/adv_materials_cover_image1.png" title="adv_materials_cover_image" width="314"&gt;&lt;/a&gt;&lt;br&gt;
Our paper titled "Dynamically Tuning Plasmon-Exciton Coupling in Arrays of Nanodisk-J-aggregate Complexes" has been accepted as front cover image of &lt;a href="www.advmat.de"&gt;Advanced Materials&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;In this work, we demonstrated the dynamic tuning of plasmon-exciton resonant coupling in arrays of nanodisk–J-aggregate complexes. The angle-resolved spectra of an array of bare Au nanodisks …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://juluribk.com/wp-content/uploads/2010/01/adv_materials_cover_image1.png"&gt;&lt;img alt="" class="alignleft size-full wp-image-598" height="420" src="http://juluribk.com/wp-content/uploads/2010/01/adv_materials_cover_image1.png" title="adv_materials_cover_image" width="314"&gt;&lt;/a&gt;&lt;br&gt;
Our paper titled "Dynamically Tuning Plasmon-Exciton Coupling in Arrays of Nanodisk-J-aggregate Complexes" has been accepted as front cover image of &lt;a href="www.advmat.de"&gt;Advanced Materials&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;In this work, we demonstrated the dynamic tuning of plasmon-exciton resonant coupling in arrays of nanodisk–J-aggregate complexes. The angle-resolved spectra of an array of bare Au nanodisks exhibited continuous shifting of localized surface plasmon resonances and this characteristic enabled the production of real-time, controllable spectral overlaps between molecular resonance and plasmonic resonance. In this work we explored resonant interaction strength as a function of spectral overlap. In experiments where we changed the incident angle of a probe light, the coupling strength changed; this result matched with the simulated data based on a coupled dipole approximation method.&lt;/p&gt;
&lt;p&gt;Our method provides a platform to understand the interaction between LSPR and other optical properties of molecules such as fluorescence and Raman spectroscopy, which require precise control of the overlap between the LSPR and the excitation or emission wavelengths. An understanding of these interactions will enable optimization of metal nanoparticle-molecule complexes and have a impact on many applications such as active nanophotonic devices, surface-enhanced Raman spectroscopy (SERS), and biosensors.&lt;/p&gt;</content><category term="Plasmonics, Publications"></category><category term="electromagnetism"></category><category term="Plasmonics"></category><category term="Publications"></category></entry><entry><title>Python</title><link href="plasmon360.github.io/python.html" rel="alternate"></link><published>2010-01-17T14:19:00-08:00</published><updated>2010-01-17T14:19:00-08:00</updated><author><name>juluribk</name></author><id>tag:None,2010-01-17:plasmon360.github.io/python.html</id><summary type="html">&lt;p&gt;[caption id="" align="aligncenter" width="311" caption="from XKCD on Python"]&lt;img alt="" height="353" src="http://imgs.xkcd.com/comics/python.png" title="Python" width="311"&gt;[/caption]&lt;/p&gt;
&lt;p&gt;I am playing with Python for the first time. The syntax seems to be so natural. So many modules (numpy, scipy and matplotlib) for researchers/scientists. Cannot see any shortcoming at this point. Perhaps need more testing and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;[caption id="" align="aligncenter" width="311" caption="from XKCD on Python"]&lt;img alt="" height="353" src="http://imgs.xkcd.com/comics/python.png" title="Python" width="311"&gt;[/caption]&lt;/p&gt;
&lt;p&gt;I am playing with Python for the first time. The syntax seems to be so natural. So many modules (numpy, scipy and matplotlib) for researchers/scientists. Cannot see any shortcoming at this point. Perhaps need more testing and implementation.&lt;/p&gt;
&lt;p&gt;Some questions I am looking answers for: Is it faster than Fortran? If not faster, can it do everything Matlab does, such as availability of host of toolboxes?&lt;/p&gt;</content><category term="Publications"></category><category term="Free Software"></category><category term="python"></category></entry><entry><title>Radiation from an oscillating dipole</title><link href="plasmon360.github.io/radiation-from-dipole.html" rel="alternate"></link><published>2010-01-14T19:26:00-08:00</published><updated>2010-01-14T19:26:00-08:00</updated><author><name>juluribk</name></author><id>tag:None,2010-01-14:plasmon360.github.io/radiation-from-dipole.html</id><summary type="html">&lt;p&gt;The electric field from an oscillating dipole is given by:&lt;img alt="" src="file:///C:/DOCUME%7E1/bxj139/LOCALS%7E1/Temp/moz-screenshot-1.jpg"&gt;&lt;img alt="" class="aligncenter" height="52" src="http://upload.wikimedia.org/math/1/c/b/1cb95474b78138db05d3763ac2fcd75a.png" title="dipole_radiation" width="527"&gt;, where [tex]\hat{r}[/tex] is the position vector, [tex] \omega [/tex] is the frequency of dipole oscillation, [tex]\textbf{p}[/tex] is the dipole moment. The two terms in the electric field consists of 1) near field (area near …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The electric field from an oscillating dipole is given by:&lt;img alt="" src="file:///C:/DOCUME%7E1/bxj139/LOCALS%7E1/Temp/moz-screenshot-1.jpg"&gt;&lt;img alt="" class="aligncenter" height="52" src="http://upload.wikimedia.org/math/1/c/b/1cb95474b78138db05d3763ac2fcd75a.png" title="dipole_radiation" width="527"&gt;, where [tex]\hat{r}[/tex] is the position vector, [tex] \omega [/tex] is the frequency of dipole oscillation, [tex]\textbf{p}[/tex] is the dipole moment. The two terms in the electric field consists of 1) near field (area near to the dipole) and 2) far field (area far from the dipole) contributions. Far field falls of as [tex]\frac{1}{r}[/tex] and the near field falls of by [tex]\frac{1}{r\^3}[/tex].&lt;/p&gt;
&lt;p&gt;A beautiful simulation showing the electric field radiation from a dipole is shown below. This simulation is part of &lt;a href="http://www.ece.rutgers.edu/~orfanidi/ewa/"&gt;Sophocles J. Orfanidis book on electromagnetic waves and antennas&lt;/a&gt;.  For more details on 1) how the above equation is simplified by transforming into polar coordinates and 2) the matlab code to plot the field, see Example 14.5.1. in Chapter 14 of his book. Many thanks to Prof. Orfanidis for sharing these matlab codes.&lt;/p&gt;
&lt;p&gt;[caption id="attachment_354" align="aligncenter" width="600" caption="Radiation from an oscillating dipole (Simulation done using Matlab code from Prof. Orfanidis book)"]&lt;a href="http://juluribk.com/wp-content/uploads/2010/01/dipmovie.gif"&gt;&lt;img alt="" class="size-full wp-image-354" height="600" src="http://juluribk.com/wp-content/uploads/2010/01/dipmovie.gif" title="Radiation from an oscillating dipole" width="600"&gt;&lt;/a&gt;[/caption]&lt;/p&gt;</content><category term="Free Software, Matlab, Plasmonics"></category><category term="electromagnetism"></category><category term="Matlab"></category><category term="Plasmonics"></category></entry><entry><title>Plot on your wordpress pages/posts using gnuplot plugin</title><link href="plasmon360.github.io/plot-on-your-wordpress-pagesposts-using-gnuplot-plugin.html" rel="alternate"></link><published>2010-01-13T10:12:00-08:00</published><updated>2010-01-13T10:12:00-08:00</updated><author><name>juluribk</name></author><id>tag:None,2010-01-13:plasmon360.github.io/plot-on-your-wordpress-pagesposts-using-gnuplot-plugin.html</id><summary type="html">&lt;p&gt;One can insert a gnuplot plot on any of the wordpress post/page by installing gnuplot plugin version 1.1 for wordpress available &lt;a href="http://www.clker.com/blog/2008/07/18/gnuplot-wordpress-plugin-v11/"&gt;here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NOTE: I am not sure whether this plugin can plot from a data file. If you any of you readers can do it, please let me …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One can insert a gnuplot plot on any of the wordpress post/page by installing gnuplot plugin version 1.1 for wordpress available &lt;a href="http://www.clker.com/blog/2008/07/18/gnuplot-wordpress-plugin-v11/"&gt;here.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NOTE: I am not sure whether this plugin can plot from a data file. If you any of you readers can do it, please let me know.&lt;/p&gt;
&lt;p&gt;As of today, the search of this plugin on wordpress only shows version 1 of this plugin. However version 1.1 is more advanced as it does need gnuplot installed on your webserver.&lt;/p&gt;
&lt;p&gt;To install this plugin:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Copy the file ( &lt;a href="http://www.clker.com/blog/wp-content/uploads/2008/07/gnuplot.phptxt"&gt;gnuplot plugin&lt;/a&gt; ) in you wp-content/plugins directory, and rename to .php instead of .phptxt.&lt;/li&gt;
&lt;li&gt;Create wp-content/cache directory, and make sure it is write able to the webserver&lt;/li&gt;
&lt;li&gt;Activate the plugin from the plugins tab inside wordpress&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;One can get a gnuplot plot like this:&lt;/p&gt;
&lt;p&gt;[gplot]&lt;br&gt;
set size 1,0.7&lt;br&gt;
set dummy u,v&lt;br&gt;
unset key&lt;br&gt;
set parametric&lt;br&gt;
set view 60, 30, 1.1, 1.33&lt;br&gt;
set isosamples 50, 20&lt;br&gt;
set title "Interlocking Tori - PM3D surface with depth sorting"&lt;br&gt;
set urange [ -3.14159 : 3.14159 ] noreverse nowriteback&lt;br&gt;
set vrange [ -3.14159 : 3.14159 ] noreverse nowriteback&lt;br&gt;
set pm3d depthorder&lt;br&gt;
splot cos(u)+.5*cos(u)*cos(v),sin(u)+.5*sin(u)*cos(v),.5*sin(v) with pm3d,\&lt;br&gt;
1+cos(u)+.5*cos(u)*cos(v),.5*sin(v),sin(u)+.5*sin(u)*cos(v) with pm3d&lt;br&gt;
[/gplot]&lt;/p&gt;
&lt;p&gt;by inserting following code&lt;/p&gt;
&lt;p&gt;[cc lang="gnuplot"]&lt;/p&gt;
&lt;p&gt;[gplot]&lt;br&gt;
set size 1,0.7&lt;br&gt;
set dummy u,v&lt;br&gt;
unset key&lt;br&gt;
set parametric&lt;br&gt;
set view 60, 30, 1.1, 1.33&lt;br&gt;
set isosamples 50, 20&lt;br&gt;
set title "Interlocking Tori - PM3D surface with depth sorting"&lt;br&gt;
set urange [ -3.14159 : 3.14159 ] noreverse nowriteback&lt;br&gt;
set vrange [ -3.14159 : 3.14159 ] noreverse nowriteback&lt;br&gt;
set pm3d depthorder&lt;br&gt;
splot cos(u)+.5*cos(u)*cos(v),sin(u)+.5*sin(u)*cos(v),.5*sin(v) with pm3d,\&lt;br&gt;
1+cos(u)+.5*cos(u)*cos(v),.5*sin(v),sin(u)+.5*sin(u)*cos(v) with pm3d&lt;br&gt;
[/gplot]&lt;/p&gt;
&lt;p&gt;[/cc]&lt;/p&gt;</content><category term="Publications"></category><category term="gnuplot"></category><category term="graphs"></category><category term="wordpress"></category></entry><entry><title>Adding PSU webmail to Gmail</title><link href="plasmon360.github.io/adding-psu-webmail-to-gmail.html" rel="alternate"></link><published>2010-01-12T14:24:00-08:00</published><updated>2010-01-12T14:24:00-08:00</updated><author><name>juluribk</name></author><id>tag:None,2010-01-12:plasmon360.github.io/adding-psu-webmail-to-gmail.html</id><content type="html">&lt;p&gt;For those who want to get their Pennstate emails from webmail to gmail. Follow these &lt;a href="http://three20four.wordpress.com/2008/03/26/penn-state-webmail-to-gmail/"&gt;instructions&lt;/a&gt; posted by &lt;a href="http://three20four.wordpress.com/"&gt;324 reflections.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In addition, you also can send email from another address (like xyz@psu.edu) without "on behalf of" by following these &lt;a href="http://gmailblog.blogspot.com/2009/07/send-mail-from-another-address-without.html"&gt;instructuctions&lt;/a&gt;.&lt;/p&gt;</content><category term="Publications"></category><category term="mail"></category><category term="psu"></category></entry><entry><title>Resources on Electromagnetics/Plasmonics/Nanophotonics</title><link href="plasmon360.github.io/books-on-electromagnetics.html" rel="alternate"></link><published>2010-01-12T11:01:00-08:00</published><updated>2010-01-12T11:01:00-08:00</updated><author><name>juluribk</name></author><id>tag:None,2010-01-12:plasmon360.github.io/books-on-electromagnetics.html</id><summary type="html">&lt;p&gt;These are some resources on Electromagnetics/plasmonics/nanophotonics&lt;/p&gt;
&lt;p&gt;I will maintain a list of free resources on electromagnetics, plasmonics, nanophotonics, optics and other related topics here. If any of you (readers) know any other free resources related to this topic, please let me know and I can add into these …&lt;/p&gt;</summary><content type="html">&lt;p&gt;These are some resources on Electromagnetics/plasmonics/nanophotonics&lt;/p&gt;
&lt;p&gt;I will maintain a list of free resources on electromagnetics, plasmonics, nanophotonics, optics and other related topics here. If any of you (readers) know any other free resources related to this topic, please let me know and I can add into these lists.&lt;/p&gt;
&lt;p&gt;Free books:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://www.ece.rutgers.edu/~orfanidi/ewa/"&gt;Electromagnetic waves and Antennas&lt;/a&gt; by Prof. Sophocles J. Orfanidis&lt;/li&gt;
&lt;li&gt;Surface plasmons by Smooth and Rough surfaces by Heinz Raether (Note: This book is hosted by Prof. Shalaev's on &lt;a href="http://cobweb.ecn.purdue.edu/~ece695s/"&gt;Nanophotonics &amp;amp; Metamaterials course website&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;Photonic Crystals:Molding the Flow of Light by John D. Joannopoulos, Steven G. Johnson, Joshua N. Winn, and Robert D. Meade. This can be downloaded from &lt;a href="http://ab-initio.mit.edu/book/"&gt;their website&lt;/a&gt;.  This book is must for anyone interested in photonic crystals and for serious readers, purchasing the book is definitely worth it (I have a copy).&lt;/li&gt;
&lt;li&gt;&lt;a href="http://optics.byu.edu/textbook.aspx"&gt;Physics of Light and Waves&lt;/a&gt; by Justin Peatross and MichaelWare. You can also  buy a printed copy which covers the printing &lt;a href="http://www.lulu.com/content/393488"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.plasma.uu.se/CED/Book/"&gt;Electromagnetic Field Theory&lt;/a&gt; by Bo Thidé&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.giss.nasa.gov/~crmim/publications/book_2.pdf"&gt;Scattering, Absorption and Emission of Light by Small Particles&lt;/a&gt; by Micheal I Mishchenko, Larry D. Travis,  and Andrew A. Lacis available at their &lt;a href="http://www.giss.nasa.gov/staff/mmishchenko/books.html"&gt;website&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.giss.nasa.gov/staff/mmishchenko/books.html"&gt;&lt;/a&gt;&lt;a href="http://www.lrsm.upenn.edu/~frenchrh/download/0208fwootenopticalpropertiesofsolids.pdf"&gt;Frederick Wooten, Optical Properties of Solids, Academic Press, New York, 49, (1972).&lt;/a&gt; This book is shared on Dr. Roger French website and focuses on dielectrics of metals.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Free course material:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://nanohub.org/resources/1748#series"&gt;Nanophotonics by Prof. Valdamir Shalev&lt;/a&gt; (Purdue University)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.erbium.nl/nanophotonics/"&gt;Nanophotonics by Prof. Albert Polman&lt;/a&gt; (Center for Nanophotonics, FOM-Institute AMOLF, Amsterdam)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.aph.kit.edu/wegener/en/lectures/advanced-optical-materials-ws09-10"&gt;Advanved Optical Materials&lt;/a&gt; by Georg von Freymann, Stefan Linden on Prof. Martin Wegener group.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://sharepoint.creol.ucf.edu/kik/OSE6650"&gt;Opt. Prop. of Nanostructured Materials&lt;/a&gt; by Prof. Peter Kik (CREOL, UCF)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://sharepoint.creol.ucf.edu/kik/OSE5312"&gt;Fundamentals of Optical Science&lt;/a&gt; by Prof. Peter Kik (CREOL, UCF)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Online Simulation tools:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://nanohub.org/tools/nmie"&gt;Nmie Tool. Calculates the extinction, scattering, and absorption efficiencies of single nanoparticle (1 layer), core-shell Nanoparticle (2 layer) and nanomatryushka nanoparticle (3 layer).&lt;/a&gt; I have blogged about it &lt;a href="http://juluribk.com/2010/05/11/nmie-extinction-scattering-and-absorption-efficiencies-of-multilayer-nanoparticles/"&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nanohub.org/tools/photonicsdb"&gt;PhotonicsDB: Nanohub tool to download experimental and theoretical data on dielectric constants of metals (Ag, Au, etc.)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nanohub.org/tools/bowtie"&gt;Simulation of Bowtie Nanoantennas using MEEP FDTD software&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nanohub.org/resources/nsoptics"&gt;Nanooptics Lab center: Calculates the absorption, scattering, and extinction spectra of spherical nanoparticles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://nanohub.org/tools/nsoptics3d"&gt;Nanosphere Optics Lab Field Simulator. Calculates fields and efficiencies of spherical nanoparticles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://refractiveindex.info"&gt;&lt;img alt="Refractive index database" src="http://refractiveindex.info/banners/button_88x31.gif"&gt;Refractive index database for crystals, metals, etc&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Free Optical tools&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://people.csail.mit.edu/jaffer/FreeSnell/"&gt;Freesnell. This tool calculates various optical properties such as transmission, reflection and absorption of multi-layer thin films.&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="Publications"></category><category term="books"></category><category term="electromagnetism"></category><category term="FDTD"></category><category term="Free Software"></category><category term="Nanohub.org"></category><category term="photonics"></category><category term="Plasmonics"></category></entry><entry><title>Simulation of Localized surface plasmons</title><link href="plasmon360.github.io/simulation-of-localized-surface-plasmons.html" rel="alternate"></link><published>2010-01-11T12:09:00-08:00</published><updated>2010-01-11T12:09:00-08:00</updated><author><name>juluribk</name></author><id>tag:None,2010-01-11:plasmon360.github.io/simulation-of-localized-surface-plasmons.html</id><summary type="html">&lt;p&gt;
&lt;center&gt;

&lt;object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="425" height="344" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0"&gt;
&lt;param name="allowFullScreen" value="true"&gt;&lt;/param&gt;&lt;param name="allowscriptaccess" value="always"&gt;&lt;/param&gt;&lt;param name="src" value="http://www.youtube.com/v/cR1U_cIEhVE&amp;amp;hl=en_US&amp;amp;fs=1&amp;amp;"&gt;&lt;/param&gt;&lt;param name="allowfullscreen" value="true"&gt;&lt;/param&gt;

&lt;embed type="application/x-shockwave-flash" width="425" height="344" src="http://www.youtube.com/v/cR1U_cIEhVE&amp;amp;hl=en_US&amp;amp;fs=1&amp;amp;" allowscriptaccess="always" allowfullscreen="true"&gt;
&lt;/embed&gt;
&lt;/object&gt;


&lt;/center&gt;

A cool simulation using FDTD showing the excitaion of Localized Surface Plasmons in metal nanorods. These simulations are done by [Prof. Maxim Sukhrev](https://webapp4.asu.edu/directory/person/1271759). The external electromagnetic wave excites plasmons (oscillation of electron sea in the particle) in the direction of polarization of incident …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
&lt;center&gt;

&lt;object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" width="425" height="344" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0"&gt;
&lt;param name="allowFullScreen" value="true"&gt;&lt;/param&gt;&lt;param name="allowscriptaccess" value="always"&gt;&lt;/param&gt;&lt;param name="src" value="http://www.youtube.com/v/cR1U_cIEhVE&amp;amp;hl=en_US&amp;amp;fs=1&amp;amp;"&gt;&lt;/param&gt;&lt;param name="allowfullscreen" value="true"&gt;&lt;/param&gt;

&lt;embed type="application/x-shockwave-flash" width="425" height="344" src="http://www.youtube.com/v/cR1U_cIEhVE&amp;amp;hl=en_US&amp;amp;fs=1&amp;amp;" allowscriptaccess="always" allowfullscreen="true"&gt;
&lt;/embed&gt;
&lt;/object&gt;


&lt;/center&gt;

A cool simulation using FDTD showing the excitaion of Localized Surface Plasmons in metal nanorods. These simulations are done by [Prof. Maxim Sukhrev](https://webapp4.asu.edu/directory/person/1271759). The external electromagnetic wave excites plasmons (oscillation of electron sea in the particle) in the direction of polarization of incident wave. At a certain resonance frequency of incoming light (which depends on the shape, size and environment), the particle exhibits large scattering and absorption. It also leads to large enhancements in electric field at the surface.

&lt;/p&gt;
To know more about localized surface plasmons, read my upcoming articles in my plasmonics information center.</content><category term="Plasmonics"></category><category term="FDTD"></category><category term="Plasmonics"></category></entry><entry><title>Smooth image in matlab</title><link href="plasmon360.github.io/smooth-image-in-matlab.html" rel="alternate"></link><published>2010-01-10T01:25:00-08:00</published><updated>2010-01-10T01:25:00-08:00</updated><author><name>juluribk</name></author><id>tag:None,2010-01-10:plasmon360.github.io/smooth-image-in-matlab.html</id><summary type="html">&lt;p&gt;In matlab, sometimes I prefer to plot a image for mesh data instead of surf and use view(2) (view(2) gives the top view of the surface plot). However,&lt;br&gt;
&lt;code lang="matlab"&gt;imagesc(x,y,z) shading 'interp'&lt;/code&gt;&lt;br&gt;
does not work. This problem can be solved by using:&lt;br&gt;
&lt;code lang="matlab"&gt;pcolor(x,y,z …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;In matlab, sometimes I prefer to plot a image for mesh data instead of surf and use view(2) (view(2) gives the top view of the surface plot). However,&lt;br&gt;
&lt;code lang="matlab"&gt;imagesc(x,y,z) shading 'interp'&lt;/code&gt;&lt;br&gt;
does not work. This problem can be solved by using:&lt;br&gt;
&lt;code lang="matlab"&gt;pcolor(x,y,z) shading 'interp' set(gca,'TickDir','out')&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;.&lt;/p&gt;</content><category term="Matlab"></category><category term="graphs"></category><category term="Matlab"></category></entry><entry><title>Surface Plasmons (SP's)</title><link href="plasmon360.github.io/surface-plasmons-animation.html" rel="alternate"></link><published>2010-01-08T19:14:00-08:00</published><updated>2010-01-08T19:14:00-08:00</updated><author><name>juluribk</name></author><id>tag:None,2010-01-08:plasmon360.github.io/surface-plasmons-animation.html</id><summary type="html">&lt;p&gt;[caption id="attachment_263" align="aligncenter" width="300"]&lt;a href="http://juluribk.com/wp-content/uploads/2010/01/test_water_mark.gif"&gt;&lt;img alt="" class="size-full wp-image-263" height="120" src="http://juluribk.com/wp-content/uploads/2010/01/test_water_mark.gif" title="Surface plasmon simulation" width="300"&gt;&lt;/a&gt; Propagation of surface plasmons[/caption]&lt;/p&gt;
&lt;p&gt;Surface plasmons (SP's) are electromagnetic waves that propagate at the interface between metals (such as Ag, Au ) and dielectric material. Here I have simulated the propagation of surface plasmons on Ag-air interface, the color indicates the magnitude of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;[caption id="attachment_263" align="aligncenter" width="300"]&lt;a href="http://juluribk.com/wp-content/uploads/2010/01/test_water_mark.gif"&gt;&lt;img alt="" class="size-full wp-image-263" height="120" src="http://juluribk.com/wp-content/uploads/2010/01/test_water_mark.gif" title="Surface plasmon simulation" width="300"&gt;&lt;/a&gt; Propagation of surface plasmons[/caption]&lt;/p&gt;
&lt;p&gt;Surface plasmons (SP's) are electromagnetic waves that propagate at the interface between metals (such as Ag, Au ) and dielectric material. Here I have simulated the propagation of surface plasmons on Ag-air interface, the color indicates the magnitude of electric field (blue for positive and red for negative).  I have used MEEP  (a FDTD program that solves for Maxwells equations on numerical grid) to simulate these electric field distribution of these special waves. The source for SP's is a point dipole and is placed at the center. It is easier to excite SP's in numerical simulation, however to excite them in an experiment, one has to use tricks to match the momentum.  In this simulation, one can also see strong localization of these waves at the interface. This form of localization and propagation characteristics have attracted attention of researchers in engineering, physics and chemistry communities. Few applications include integerated circuits driven by light, sensing, energy harvesting, nanolithography etc.&lt;/p&gt;
&lt;p&gt;[UPDATE:]{style="color: #ff0000;"} You can download my &lt;a href="http://juluribk.com/wp-content/uploads/2010/01/Metal-dielectric_interface-_web1.zip"&gt;meep code here&lt;/a&gt;. The zip file also contains code to obtain dispersion relation of surface plasmon modes using MEEP. Let me know if you have any questions.&lt;/p&gt;</content><category term="Free Software, Plasmonics, Publications"></category><category term="animation"></category><category term="Plasmonics"></category></entry><entry><title>Plasmonic coupling of electromagnetic energy in hexagonal array of silver nanorods</title><link href="plasmon360.github.io/plasmonic-coupling-of-electromagnetic-energy-in-hexagonal-array-of-silver-nanorods.html" rel="alternate"></link><published>2010-01-08T18:20:00-08:00</published><updated>2010-01-08T18:20:00-08:00</updated><author><name>juluribk</name></author><id>tag:None,2010-01-08:plasmon360.github.io/plasmonic-coupling-of-electromagnetic-energy-in-hexagonal-array-of-silver-nanorods.html</id><summary type="html">&lt;p&gt;&lt;a href="http://juluribk.com/wp-content/uploads/2010/01/Plasmonics-silver-helix.gif"&gt;&lt;img alt="" class="aligncenter size-full wp-image-245" height="180" src="http://juluribk.com/wp-content/uploads/2010/01/Plasmonics-silver-helix.gif" title="Plasmonics-silver-helix" width="720"&gt;&lt;/a&gt;A cool animation which I reproduced from W.M Saj, Optics Express, Vol 13, 13, 2005 using freely obtained FDTD software (MEEP). It demonstrates the propagation of electromagnetic energy in hexagonal array of silver nanorods due to plasmonic coupling. The source is offset from the center and the energy is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://juluribk.com/wp-content/uploads/2010/01/Plasmonics-silver-helix.gif"&gt;&lt;img alt="" class="aligncenter size-full wp-image-245" height="180" src="http://juluribk.com/wp-content/uploads/2010/01/Plasmonics-silver-helix.gif" title="Plasmonics-silver-helix" width="720"&gt;&lt;/a&gt;A cool animation which I reproduced from W.M Saj, Optics Express, Vol 13, 13, 2005 using freely obtained FDTD software (MEEP). It demonstrates the propagation of electromagnetic energy in hexagonal array of silver nanorods due to plasmonic coupling. The source is offset from the center and the energy is propagated in an interesting snake like pattern. For more details about this kind of propagation,  look at the article &lt;a href="http://www.opticsinfobase.org/oe/abstract.cfm?URI=oe-13-13-4818"&gt;(W.M Saj, Optics Express, Vol 13, 13, 2005)&lt;/a&gt;.&lt;/p&gt;</content><category term="Free Software, Plasmonics"></category><category term="FDTD"></category><category term="MEEP"></category><category term="Plasmonics"></category></entry><entry><title>Sabih and Guler Hayek Graduate Scholarship</title><link href="plasmon360.github.io/sabih-and-guler-hayek-graduate-scholarship.html" rel="alternate"></link><published>2010-01-08T15:54:00-08:00</published><updated>2010-01-08T15:54:00-08:00</updated><author><name>juluribk</name></author><id>tag:None,2010-01-08:plasmon360.github.io/sabih-and-guler-hayek-graduate-scholarship.html</id><content type="html">&lt;p&gt;I have been selected to receive the Sabih and Guler Hayek Graduate Scholarship in Engineering Science and Mechanics for Fall 2009. This scholarship provides recognition and financial assistance to outstanding graduate students enrolled or planning to enroll in the Department of Engineering Science and Mechanics.&lt;/p&gt;</content><category term="Publications"></category><category term="News"></category></entry><entry><title>Artificial Molecular Muscles drive Microcantilevers</title><link href="plasmon360.github.io/test-2.html" rel="alternate"></link><published>2010-01-08T12:31:00-08:00</published><updated>2010-01-08T12:31:00-08:00</updated><author><name>juluribk</name></author><id>tag:None,2010-01-08:plasmon360.github.io/test-2.html</id><summary type="html">&lt;p&gt;&lt;a href="http://juluribk.com/wp-content/uploads/2010/01/nn-2008-002373_0005.gif"&gt;&lt;img alt="" class="alignleft size-full wp-image-159" height="145" src="http://juluribk.com/wp-content/uploads/2010/01/nn-2008-002373_0005-e1262972270948.gif" title="nn-2008-002373_0005" width="253"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The collective motions induced by oxidation and reduction of &lt;img alt="" src="http://pubs.acs.org/appl/literatum/publisher/achs/journals/entities/223C.gif"&gt;8 billion muscle molecules are harnessed to perform mechanical work on a microcantilevers. The use of the cooperative forces generated by these self-assembled, nanometer-scale artificial molecular muscles that are electrically wired to an external power supply constitutes a seminal step toward …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="http://juluribk.com/wp-content/uploads/2010/01/nn-2008-002373_0005.gif"&gt;&lt;img alt="" class="alignleft size-full wp-image-159" height="145" src="http://juluribk.com/wp-content/uploads/2010/01/nn-2008-002373_0005-e1262972270948.gif" title="nn-2008-002373_0005" width="253"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The collective motions induced by oxidation and reduction of &lt;img alt="" src="http://pubs.acs.org/appl/literatum/publisher/achs/journals/entities/223C.gif"&gt;8 billion muscle molecules are harnessed to perform mechanical work on a microcantilevers. The use of the cooperative forces generated by these self-assembled, nanometer-scale artificial molecular muscles that are electrically wired to an external power supply constitutes a seminal step toward molecular-machine-based nanoelectromechanical systems (NEMS). This work of ours is reported in issue 3 of ACS Nano journal.  Article can be downloaded from my publications page.&lt;/p&gt;</content><category term="Publications"></category><category term="Molecular Machines"></category></entry><entry><title>Split, collate, watermark and password protect PDF documents using portable pdftk</title><link href="plasmon360.github.io/split-collate-watermark-and-password-protect-pdf-documents-using-portable-pdftk.html" rel="alternate"></link><published>2010-01-08T11:07:00-08:00</published><updated>2010-01-08T11:07:00-08:00</updated><author><name>juluribk</name></author><id>tag:None,2010-01-08:plasmon360.github.io/split-collate-watermark-and-password-protect-pdf-documents-using-portable-pdftk.html</id><summary type="html">&lt;p&gt;To split, collate, watermark and password protect pdf documents, I use pdftk portable app. pdftk is one of numerous applications that come with  PortableApps.com free software. This platform can be installed on any portable USB drive and can be run on any computer without administrative privileges. More information can …&lt;/p&gt;</summary><content type="html">&lt;p&gt;To split, collate, watermark and password protect pdf documents, I use pdftk portable app. pdftk is one of numerous applications that come with  PortableApps.com free software. This platform can be installed on any portable USB drive and can be run on any computer without administrative privileges. More information can be found&lt;a href="http://portableapps.com/"&gt;here&lt;/a&gt; and &lt;a href="http://portableapps.com/apps/office/pdftk_builder_portable"&gt;here&lt;/a&gt;. A screen shots of portable apps and pdftk are shown below:&lt;/p&gt;
&lt;p&gt;[nggallery id=1]&lt;/p&gt;</content><category term="Free Software"></category></entry><entry><title>Update Gnuplot plot automatically</title><link href="plasmon360.github.io/update-gnuplot-plot-automatically.html" rel="alternate"></link><published>2010-01-07T23:18:00-08:00</published><updated>2010-01-07T23:18:00-08:00</updated><author><name>juluribk</name></author><id>tag:None,2010-01-07:plasmon360.github.io/update-gnuplot-plot-automatically.html</id><summary type="html">&lt;p&gt;To update gnuplot plot automatically. Run the command [cc]gnuplot gnuplot_script.txt[/cc] in terminal. (note: for some unknown reason it does not work for me on cygwin xterm, however it works on linux terminals.)&lt;/p&gt;
&lt;p&gt;gnuplot_script looks like this:&lt;/p&gt;
&lt;p&gt;[cc lang="gnuplot"]&lt;br&gt;
plot "data.dat" using 1:2 w lp …&lt;/p&gt;</summary><content type="html">&lt;p&gt;To update gnuplot plot automatically. Run the command [cc]gnuplot gnuplot_script.txt[/cc] in terminal. (note: for some unknown reason it does not work for me on cygwin xterm, however it works on linux terminals.)&lt;/p&gt;
&lt;p&gt;gnuplot_script looks like this:&lt;/p&gt;
&lt;p&gt;[cc lang="gnuplot"]&lt;br&gt;
plot "data.dat" using 1:2 w lp&lt;br&gt;
replot&lt;br&gt;
pause -5&lt;br&gt;
reread&lt;br&gt;
[/cc]&lt;/p&gt;</content><category term="Free Software"></category><category term="gnuplot"></category><category term="graphs"></category><category term="Linux"></category></entry><entry><title>Bibtex in Word</title><link href="plasmon360.github.io/bibtex-in-word.html" rel="alternate"></link><published>2010-01-07T00:30:00-08:00</published><updated>2010-01-07T00:30:00-08:00</updated><author><name>juluribk</name></author><id>tag:None,2010-01-07:plasmon360.github.io/bibtex-in-word.html</id><content type="html">&lt;p&gt;Bibtex4Word is an add-in for Microsoft Word that allows the citation of references and the insertion of a bibliography into word document. This add-in imbibes all the good things of bibtex in latex documents.More information is available on&lt;a href="http://www.ee.ic.ac.uk/hp/staff/dmb/perl/index.html"&gt;Bibtex4word&lt;/a&gt; website.&lt;/p&gt;</content><category term="Free Software, Latex, Publications"></category><category term="bibtex"></category><category term="Latex"></category><category term="word"></category><category term="writing"></category></entry><entry><title>GFortran in Cygwin1.7.1 for DDSCAT</title><link href="plasmon360.github.io/gfortran-in-cygwin1-7-1-for-ddscat.html" rel="alternate"></link><published>2010-01-06T16:25:00-08:00</published><updated>2010-01-06T16:25:00-08:00</updated><author><name>juluribk</name></author><id>tag:None,2010-01-06:plasmon360.github.io/gfortran-in-cygwin1-7-1-for-ddscat.html</id><summary type="html">&lt;p&gt;For DDSCAT 7 users, the makefile needs gfortran. On window os, Gfortran can be installed in Cygwin 1.7.1 by installing "GCC4-fortran" package. It installs a exe file named "gfotran-4.exe" in the "xyz\cygwin\bin". So my makefile compiler options are as follows:&lt;/p&gt;
&lt;p&gt;[cc lang="fortran"]&lt;br&gt;
# 1.  gfortran …&lt;/p&gt;</summary><content type="html">&lt;p&gt;For DDSCAT 7 users, the makefile needs gfortran. On window os, Gfortran can be installed in Cygwin 1.7.1 by installing "GCC4-fortran" package. It installs a exe file named "gfotran-4.exe" in the "xyz\cygwin\bin". So my makefile compiler options are as follows:&lt;/p&gt;
&lt;p&gt;[cc lang="fortran"]&lt;br&gt;
# 1.  gfortran compiler&lt;br&gt;
#     sp + no MKL + no OpenMP + no MPI&lt;br&gt;
# define the following:&lt;br&gt;
PRECISION    = dp&lt;br&gt;
CXFFTMKL.f    = cxfft3_mkl_fake.f90&lt;br&gt;
CXFFTMKL.o    = cxfft3_mkl_fake.o&lt;br&gt;
MKLM        =&lt;br&gt;
DOMP        =&lt;br&gt;
OPENMP        =&lt;br&gt;
MPI.f        = mpi_fake.f90&lt;br&gt;
MPI.o        = mpi_fake.o&lt;br&gt;
DMPI        =&lt;br&gt;
FC        = gfortran-4&lt;br&gt;
FFLAGS        = -O2&lt;br&gt;
LFLAGS         =&lt;br&gt;
[/cc]&lt;/p&gt;</content><category term="Free Software"></category><category term="Cygwin"></category><category term="DDSCAT"></category></entry></feed>