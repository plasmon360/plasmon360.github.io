<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Bala Juluri's Blog - Free Software</title><link href="plasmon360.github.io/" rel="alternate"></link><link href="plasmon360.github.io/feeds/free-software.atom.xml" rel="self"></link><id>plasmon360.github.io/</id><updated>2016-10-29T18:16:00-07:00</updated><subtitle>Ramblings</subtitle><entry><title>Tab autocompletetion with python interpreter in bash terminal</title><link href="plasmon360.github.io/tab-autocompletetion-with-python-interpreter-in-bash-terminal.html" rel="alternate"></link><published>2016-10-29T18:16:00-07:00</published><updated>2016-10-29T18:16:00-07:00</updated><author><name>juluribk</name></author><id>tag:None,2016-10-29:plasmon360.github.io/tab-autocompletetion-with-python-interpreter-in-bash-terminal.html</id><summary type="html">&lt;p&gt;I want to tab autocomplete commands in my python interpreter within bash terminal. This is very useful when I import a module and just want to browse through the methods and autocomplete.&lt;/p&gt;
&lt;p&gt;Found two ways to do it. Thanks to stack overflow posts.&lt;/p&gt;
&lt;h3&gt;Method 1 (&lt;a href="http://stackoverflow.com/questions/2603798/ipython-tab-completion-not-working"&gt;as mentioned here&lt;/a&gt;):&lt;/h3&gt;
&lt;p&gt;This is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I want to tab autocomplete commands in my python interpreter within bash terminal. This is very useful when I import a module and just want to browse through the methods and autocomplete.&lt;/p&gt;
&lt;p&gt;Found two ways to do it. Thanks to stack overflow posts.&lt;/p&gt;
&lt;h3&gt;Method 1 (&lt;a href="http://stackoverflow.com/questions/2603798/ipython-tab-completion-not-working"&gt;as mentioned here&lt;/a&gt;):&lt;/h3&gt;
&lt;p&gt;This is easy. Install pyreadline (pip install pyreadline) and use ipython. This is a snapshot of it working.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://juluribk.com/wp-content/uploads/2016/10/iptyhon_autocompletion.png"&gt;&lt;img alt="iptyhon autocompletion" class="aligncenter size-full wp-image-1731" height="322" src="http://juluribk.com/wp-content/uploads/2016/10/iptyhon_autocompletion.png" width="708"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Method 2 ( &lt;a href="https://docs.python.org/2/library/rlcompleter.html#module-rlcompleter"&gt;as mentioned here&lt;/a&gt;):&lt;/h3&gt;
&lt;p&gt;This is for standard  python interpreter in bash terminal (such as in Ubuntu). This method requires readline and rlcompeter modules. Install these modules if you do not have them installed. This can be done with pip.&lt;/p&gt;
&lt;p&gt;Basically, the idea is to have a python interpreter look for the value of environment path variable "PYTHONSTARTUP". This variable should be set to a location for the file ("python startup file.py") with commands that enable tab autocompletion.&lt;/p&gt;
&lt;p&gt;In my home directory "/home/bjuluri" I make a file called "python startup file.py" by&lt;/p&gt;
&lt;div class="highlight bash"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;bjuluri@bjuluri-VirtualBox:&lt;span class="se"&gt;\~\$&lt;/span&gt; gedit python startup file.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;copy and paste following lines&lt;/p&gt;
&lt;div class="highlight python"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
   &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;readline&lt;/span&gt;  
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Module readline not available.&amp;quot;&lt;/span&gt;  
&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;rlcompleter&lt;/span&gt;  
    &lt;span class="n"&gt;readline&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tab: complete&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Save and close the file.&lt;/p&gt;
&lt;p&gt;Now lets assign the an environmental variable "PYTHONSTARTUP" to the location of this "python startup file"&lt;/p&gt;
&lt;p&gt;./bashrc is loaded whenever a bash terminal is fired. This file sits in the user's home directory, we will edit it and assign the environmental variable at the end of the file.&lt;/p&gt;
&lt;div class="highlight bash"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;nano .bashrc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;at the end of the file, copy and paste&lt;/p&gt;
&lt;div class="highlight bash"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;export&lt;/span&gt; &lt;span class="nv"&gt;PYTHONSTARTUP&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;python startup file.py&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Save the file and exit.&lt;/p&gt;
&lt;p&gt;reload the .bashrc file in terminal by either opening a new terminal or by typing the following in the current terminal.&lt;/p&gt;
&lt;div class="highlight bash"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;source&lt;/span&gt; .bashrc
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Once those commands run at the python startup, tab autocompletion with suggestions will be enabled in the interpreter.&lt;/p&gt;</content><category term="Free Software"></category><category term="Linux"></category><category term="python"></category></entry><entry><title>Parallelization in Octave using parcellfun/pararrayfun</title><link href="plasmon360.github.io/parallelization-in-octave-using-parcellfunpararrayfun.html" rel="alternate"></link><published>2012-03-09T13:27:00-08:00</published><updated>2012-03-09T13:27:00-08:00</updated><author><name>juluribk</name></author><id>tag:None,2012-03-09:plasmon360.github.io/parallelization-in-octave-using-parcellfunpararrayfun.html</id><summary type="html">&lt;p&gt;My computer has many processors and I would like to run some octave scripts so that all the processors are being used.&lt;br&gt;
One can use octave function called "&lt;a href="http://octave.sourceforge.net/general/function/pararrayfun.html"&gt;pararrayfun&lt;/a&gt;" for this purpose. This function is part of "general" package on octave-forge.&lt;/p&gt;
&lt;p&gt;On my ubuntu 11.10, I used "sudo apt-get …&lt;/p&gt;</summary><content type="html">&lt;p&gt;My computer has many processors and I would like to run some octave scripts so that all the processors are being used.&lt;br&gt;
One can use octave function called "&lt;a href="http://octave.sourceforge.net/general/function/pararrayfun.html"&gt;pararrayfun&lt;/a&gt;" for this purpose. This function is part of "general" package on octave-forge.&lt;/p&gt;
&lt;p&gt;On my ubuntu 11.10, I used "sudo apt-get install octave-general" to install this package and ran the following script&lt;/p&gt;
&lt;p&gt;[cc lang='matlab']&lt;br&gt;
1; # this is kept to Prevent Octave from thinking that this is a function file:&lt;/p&gt;
&lt;p&gt;close all;&lt;br&gt;
clear all;&lt;/p&gt;
&lt;p&gt;function y=test(a,b)&lt;br&gt;
y=sin(a)+cos(b)&lt;br&gt;
endfunction&lt;/p&gt;
&lt;p&gt;num_process=8&lt;/p&gt;
&lt;p&gt;a_test_inputs=[0:3.14/20:3.14];&lt;br&gt;
b_test_inputs=[0:3.14/20:3.14]*2;&lt;/p&gt;
&lt;p&gt;tic ();&lt;br&gt;
tt_par= pararrayfun(num_process,@test,(a_test_inputs),(b_test_inputs));&lt;br&gt;
parallel_elapsed_time = toc ()&lt;/p&gt;
&lt;p&gt;tic ();&lt;br&gt;
tt_ser= test((a_test_inputs),(b_test_inputs));&lt;br&gt;
serial_elapsed_time = toc ()&lt;/p&gt;
&lt;p&gt;plot(a_test_inputs,tt_par,'-o',a_test_inputs,tt_ser,'-s');&lt;br&gt;
legend('Parallel result','Serial result');&lt;/p&gt;
&lt;p&gt;disp(sprintf('Elapsed time during serial computation is %e',serial_elapsed_time))&lt;br&gt;
disp(sprintf('Elapsed time during parallel computation is %e',parallel_elapsed_time))&lt;/p&gt;
&lt;p&gt;[/cc]&lt;/p&gt;</content><category term="Free Software"></category><category term="octave"></category></entry><entry><title>Split, collate, watermark and password protect PDF documents using portable pdftk</title><link href="plasmon360.github.io/split-collate-watermark-and-password-protect-pdf-documents-using-portable-pdftk.html" rel="alternate"></link><published>2010-01-08T11:07:00-08:00</published><updated>2010-01-08T11:07:00-08:00</updated><author><name>juluribk</name></author><id>tag:None,2010-01-08:plasmon360.github.io/split-collate-watermark-and-password-protect-pdf-documents-using-portable-pdftk.html</id><summary type="html">&lt;p&gt;To split, collate, watermark and password protect pdf documents, I use pdftk portable app. pdftk is one of numerous applications that come with  PortableApps.com free software. This platform can be installed on any portable USB drive and can be run on any computer without administrative privileges. More information can …&lt;/p&gt;</summary><content type="html">&lt;p&gt;To split, collate, watermark and password protect pdf documents, I use pdftk portable app. pdftk is one of numerous applications that come with  PortableApps.com free software. This platform can be installed on any portable USB drive and can be run on any computer without administrative privileges. More information can be found&lt;a href="http://portableapps.com/"&gt;here&lt;/a&gt; and &lt;a href="http://portableapps.com/apps/office/pdftk_builder_portable"&gt;here&lt;/a&gt;. A screen shots of portable apps and pdftk are shown below:&lt;/p&gt;
&lt;p&gt;[nggallery id=1]&lt;/p&gt;</content><category term="Free Software"></category></entry><entry><title>Update Gnuplot plot automatically</title><link href="plasmon360.github.io/update-gnuplot-plot-automatically.html" rel="alternate"></link><published>2010-01-07T23:18:00-08:00</published><updated>2010-01-07T23:18:00-08:00</updated><author><name>juluribk</name></author><id>tag:None,2010-01-07:plasmon360.github.io/update-gnuplot-plot-automatically.html</id><summary type="html">&lt;p&gt;To update gnuplot plot automatically. Run the command [cc]gnuplot gnuplot_script.txt[/cc] in terminal. (note: for some unknown reason it does not work for me on cygwin xterm, however it works on linux terminals.)&lt;/p&gt;
&lt;p&gt;gnuplot_script looks like this:&lt;/p&gt;
&lt;p&gt;[cc lang="gnuplot"]&lt;br&gt;
plot "data.dat" using 1:2 w lp …&lt;/p&gt;</summary><content type="html">&lt;p&gt;To update gnuplot plot automatically. Run the command [cc]gnuplot gnuplot_script.txt[/cc] in terminal. (note: for some unknown reason it does not work for me on cygwin xterm, however it works on linux terminals.)&lt;/p&gt;
&lt;p&gt;gnuplot_script looks like this:&lt;/p&gt;
&lt;p&gt;[cc lang="gnuplot"]&lt;br&gt;
plot "data.dat" using 1:2 w lp&lt;br&gt;
replot&lt;br&gt;
pause -5&lt;br&gt;
reread&lt;br&gt;
[/cc]&lt;/p&gt;</content><category term="Free Software"></category><category term="gnuplot"></category><category term="graphs"></category><category term="Linux"></category></entry><entry><title>GFortran in Cygwin1.7.1 for DDSCAT</title><link href="plasmon360.github.io/gfortran-in-cygwin1-7-1-for-ddscat.html" rel="alternate"></link><published>2010-01-06T16:25:00-08:00</published><updated>2010-01-06T16:25:00-08:00</updated><author><name>juluribk</name></author><id>tag:None,2010-01-06:plasmon360.github.io/gfortran-in-cygwin1-7-1-for-ddscat.html</id><summary type="html">&lt;p&gt;For DDSCAT 7 users, the makefile needs gfortran. On window os, Gfortran can be installed in Cygwin 1.7.1 by installing "GCC4-fortran" package. It installs a exe file named "gfotran-4.exe" in the "xyz\cygwin\bin". So my makefile compiler options are as follows:&lt;/p&gt;
&lt;p&gt;[cc lang="fortran"]&lt;br&gt;
# 1.  gfortran …&lt;/p&gt;</summary><content type="html">&lt;p&gt;For DDSCAT 7 users, the makefile needs gfortran. On window os, Gfortran can be installed in Cygwin 1.7.1 by installing "GCC4-fortran" package. It installs a exe file named "gfotran-4.exe" in the "xyz\cygwin\bin". So my makefile compiler options are as follows:&lt;/p&gt;
&lt;p&gt;[cc lang="fortran"]&lt;br&gt;
# 1.  gfortran compiler&lt;br&gt;
#     sp + no MKL + no OpenMP + no MPI&lt;br&gt;
# define the following:&lt;br&gt;
PRECISION    = dp&lt;br&gt;
CXFFTMKL.f    = cxfft3_mkl_fake.f90&lt;br&gt;
CXFFTMKL.o    = cxfft3_mkl_fake.o&lt;br&gt;
MKLM        =&lt;br&gt;
DOMP        =&lt;br&gt;
OPENMP        =&lt;br&gt;
MPI.f        = mpi_fake.f90&lt;br&gt;
MPI.o        = mpi_fake.o&lt;br&gt;
DMPI        =&lt;br&gt;
FC        = gfortran-4&lt;br&gt;
FFLAGS        = -O2&lt;br&gt;
LFLAGS         =&lt;br&gt;
[/cc]&lt;/p&gt;</content><category term="Free Software"></category><category term="Cygwin"></category><category term="DDSCAT"></category></entry></feed>